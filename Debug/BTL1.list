
BTL1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005a88  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e8  08005b94  08005b94  00015b94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005c7c  08005c7c  000200f4  2**0
                  CONTENTS
  4 .ARM          00000000  08005c7c  08005c7c  000200f4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005c7c  08005c7c  000200f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005c7c  08005c7c  00015c7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005c80  08005c80  00015c80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000f4  20000000  08005c84  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000015c  200000f4  08005d78  000200f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000250  08005d78  00020250  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f749  00000000  00000000  0002011d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000026b2  00000000  00000000  0002f866  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e30  00000000  00000000  00031f18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ce8  00000000  00000000  00032d48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018ee2  00000000  00000000  00033a30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000124fb  00000000  00000000  0004c912  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b6b0  00000000  00000000  0005ee0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ea4bd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003d00  00000000  00000000  000ea510  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000f4 	.word	0x200000f4
 8000128:	00000000 	.word	0x00000000
 800012c:	08005b7c 	.word	0x08005b7c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000f8 	.word	0x200000f8
 8000148:	08005b7c 	.word	0x08005b7c

0800014c <isButtonPressed>:
    {BUTTON0_GPIO_Port, BUTTON0_Pin, NORMAL_STATE, NORMAL_STATE, NORMAL_STATE, NORMAL_STATE, 500, 0, 0},
    {BUTTON1_GPIO_Port, BUTTON1_Pin, NORMAL_STATE, NORMAL_STATE, NORMAL_STATE, NORMAL_STATE, 500, 0, 0},
    {BUTTON2_GPIO_Port, BUTTON2_Pin, NORMAL_STATE, NORMAL_STATE, NORMAL_STATE, NORMAL_STATE, 500, 0, 0}
};

int isButtonPressed(int index){
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	if(buttons[index].flag == 1){
 8000154:	490e      	ldr	r1, [pc, #56]	; (8000190 <isButtonPressed+0x44>)
 8000156:	687a      	ldr	r2, [r7, #4]
 8000158:	4613      	mov	r3, r2
 800015a:	009b      	lsls	r3, r3, #2
 800015c:	4413      	add	r3, r2
 800015e:	00db      	lsls	r3, r3, #3
 8000160:	440b      	add	r3, r1
 8000162:	331c      	adds	r3, #28
 8000164:	681b      	ldr	r3, [r3, #0]
 8000166:	2b01      	cmp	r3, #1
 8000168:	d10b      	bne.n	8000182 <isButtonPressed+0x36>
		buttons[index].flag = 0;
 800016a:	4909      	ldr	r1, [pc, #36]	; (8000190 <isButtonPressed+0x44>)
 800016c:	687a      	ldr	r2, [r7, #4]
 800016e:	4613      	mov	r3, r2
 8000170:	009b      	lsls	r3, r3, #2
 8000172:	4413      	add	r3, r2
 8000174:	00db      	lsls	r3, r3, #3
 8000176:	440b      	add	r3, r1
 8000178:	331c      	adds	r3, #28
 800017a:	2200      	movs	r2, #0
 800017c:	601a      	str	r2, [r3, #0]
		return 1;
 800017e:	2301      	movs	r3, #1
 8000180:	e000      	b.n	8000184 <isButtonPressed+0x38>
	}
	return 0;
 8000182:	2300      	movs	r3, #0
}
 8000184:	4618      	mov	r0, r3
 8000186:	370c      	adds	r7, #12
 8000188:	46bd      	mov	sp, r7
 800018a:	bc80      	pop	{r7}
 800018c:	4770      	bx	lr
 800018e:	bf00      	nop
 8000190:	20000000 	.word	0x20000000

08000194 <isButtonLongPressed>:

int isButtonLongPressed(int index){
 8000194:	b480      	push	{r7}
 8000196:	b083      	sub	sp, #12
 8000198:	af00      	add	r7, sp, #0
 800019a:	6078      	str	r0, [r7, #4]
	if(buttons[index].long_pressed == 1){
 800019c:	490e      	ldr	r1, [pc, #56]	; (80001d8 <isButtonLongPressed+0x44>)
 800019e:	687a      	ldr	r2, [r7, #4]
 80001a0:	4613      	mov	r3, r2
 80001a2:	009b      	lsls	r3, r3, #2
 80001a4:	4413      	add	r3, r2
 80001a6:	00db      	lsls	r3, r3, #3
 80001a8:	440b      	add	r3, r1
 80001aa:	3320      	adds	r3, #32
 80001ac:	681b      	ldr	r3, [r3, #0]
 80001ae:	2b01      	cmp	r3, #1
 80001b0:	d10b      	bne.n	80001ca <isButtonLongPressed+0x36>
		buttons[index].long_pressed = 0;
 80001b2:	4909      	ldr	r1, [pc, #36]	; (80001d8 <isButtonLongPressed+0x44>)
 80001b4:	687a      	ldr	r2, [r7, #4]
 80001b6:	4613      	mov	r3, r2
 80001b8:	009b      	lsls	r3, r3, #2
 80001ba:	4413      	add	r3, r2
 80001bc:	00db      	lsls	r3, r3, #3
 80001be:	440b      	add	r3, r1
 80001c0:	3320      	adds	r3, #32
 80001c2:	2200      	movs	r2, #0
 80001c4:	601a      	str	r2, [r3, #0]
		return 1;
 80001c6:	2301      	movs	r3, #1
 80001c8:	e000      	b.n	80001cc <isButtonLongPressed+0x38>
	}
	return 0;
 80001ca:	2300      	movs	r3, #0
}
 80001cc:	4618      	mov	r0, r3
 80001ce:	370c      	adds	r7, #12
 80001d0:	46bd      	mov	sp, r7
 80001d2:	bc80      	pop	{r7}
 80001d4:	4770      	bx	lr
 80001d6:	bf00      	nop
 80001d8:	20000000 	.word	0x20000000

080001dc <getKeyInput>:
void getKeyInput() {
 80001dc:	b580      	push	{r7, lr}
 80001de:	b082      	sub	sp, #8
 80001e0:	af00      	add	r7, sp, #0
    for (int index = 0; index < NUM_BUTTONS; index++) {
 80001e2:	2300      	movs	r3, #0
 80001e4:	607b      	str	r3, [r7, #4]
 80001e6:	e0f4      	b.n	80003d2 <getKeyInput+0x1f6>
        buttons[index].KeyReg2 = buttons[index].KeyReg1;
 80001e8:	497e      	ldr	r1, [pc, #504]	; (80003e4 <getKeyInput+0x208>)
 80001ea:	687a      	ldr	r2, [r7, #4]
 80001ec:	4613      	mov	r3, r2
 80001ee:	009b      	lsls	r3, r3, #2
 80001f0:	4413      	add	r3, r2
 80001f2:	00db      	lsls	r3, r3, #3
 80001f4:	440b      	add	r3, r1
 80001f6:	330c      	adds	r3, #12
 80001f8:	6819      	ldr	r1, [r3, #0]
 80001fa:	487a      	ldr	r0, [pc, #488]	; (80003e4 <getKeyInput+0x208>)
 80001fc:	687a      	ldr	r2, [r7, #4]
 80001fe:	4613      	mov	r3, r2
 8000200:	009b      	lsls	r3, r3, #2
 8000202:	4413      	add	r3, r2
 8000204:	00db      	lsls	r3, r3, #3
 8000206:	4403      	add	r3, r0
 8000208:	3310      	adds	r3, #16
 800020a:	6019      	str	r1, [r3, #0]
        buttons[index].KeyReg1 = buttons[index].KeyReg0;
 800020c:	4975      	ldr	r1, [pc, #468]	; (80003e4 <getKeyInput+0x208>)
 800020e:	687a      	ldr	r2, [r7, #4]
 8000210:	4613      	mov	r3, r2
 8000212:	009b      	lsls	r3, r3, #2
 8000214:	4413      	add	r3, r2
 8000216:	00db      	lsls	r3, r3, #3
 8000218:	440b      	add	r3, r1
 800021a:	3308      	adds	r3, #8
 800021c:	6819      	ldr	r1, [r3, #0]
 800021e:	4871      	ldr	r0, [pc, #452]	; (80003e4 <getKeyInput+0x208>)
 8000220:	687a      	ldr	r2, [r7, #4]
 8000222:	4613      	mov	r3, r2
 8000224:	009b      	lsls	r3, r3, #2
 8000226:	4413      	add	r3, r2
 8000228:	00db      	lsls	r3, r3, #3
 800022a:	4403      	add	r3, r0
 800022c:	330c      	adds	r3, #12
 800022e:	6019      	str	r1, [r3, #0]
        // Read the current state of the button
        buttons[index].KeyReg0 = HAL_GPIO_ReadPin(buttons[index].GPIO_Port, buttons[index].GPIO_Pin);
 8000230:	496c      	ldr	r1, [pc, #432]	; (80003e4 <getKeyInput+0x208>)
 8000232:	687a      	ldr	r2, [r7, #4]
 8000234:	4613      	mov	r3, r2
 8000236:	009b      	lsls	r3, r3, #2
 8000238:	4413      	add	r3, r2
 800023a:	00db      	lsls	r3, r3, #3
 800023c:	440b      	add	r3, r1
 800023e:	6818      	ldr	r0, [r3, #0]
 8000240:	4968      	ldr	r1, [pc, #416]	; (80003e4 <getKeyInput+0x208>)
 8000242:	687a      	ldr	r2, [r7, #4]
 8000244:	4613      	mov	r3, r2
 8000246:	009b      	lsls	r3, r3, #2
 8000248:	4413      	add	r3, r2
 800024a:	00db      	lsls	r3, r3, #3
 800024c:	440b      	add	r3, r1
 800024e:	3304      	adds	r3, #4
 8000250:	881b      	ldrh	r3, [r3, #0]
 8000252:	4619      	mov	r1, r3
 8000254:	f001 fe34 	bl	8001ec0 <HAL_GPIO_ReadPin>
 8000258:	4603      	mov	r3, r0
 800025a:	4618      	mov	r0, r3
 800025c:	4961      	ldr	r1, [pc, #388]	; (80003e4 <getKeyInput+0x208>)
 800025e:	687a      	ldr	r2, [r7, #4]
 8000260:	4613      	mov	r3, r2
 8000262:	009b      	lsls	r3, r3, #2
 8000264:	4413      	add	r3, r2
 8000266:	00db      	lsls	r3, r3, #3
 8000268:	440b      	add	r3, r1
 800026a:	3308      	adds	r3, #8
 800026c:	6018      	str	r0, [r3, #0]

        // Check for stable button state
        if ((buttons[index].KeyReg1 == buttons[index].KeyReg0) && (buttons[index].KeyReg1 == buttons[index].KeyReg2)) {
 800026e:	495d      	ldr	r1, [pc, #372]	; (80003e4 <getKeyInput+0x208>)
 8000270:	687a      	ldr	r2, [r7, #4]
 8000272:	4613      	mov	r3, r2
 8000274:	009b      	lsls	r3, r3, #2
 8000276:	4413      	add	r3, r2
 8000278:	00db      	lsls	r3, r3, #3
 800027a:	440b      	add	r3, r1
 800027c:	330c      	adds	r3, #12
 800027e:	6819      	ldr	r1, [r3, #0]
 8000280:	4858      	ldr	r0, [pc, #352]	; (80003e4 <getKeyInput+0x208>)
 8000282:	687a      	ldr	r2, [r7, #4]
 8000284:	4613      	mov	r3, r2
 8000286:	009b      	lsls	r3, r3, #2
 8000288:	4413      	add	r3, r2
 800028a:	00db      	lsls	r3, r3, #3
 800028c:	4403      	add	r3, r0
 800028e:	3308      	adds	r3, #8
 8000290:	681b      	ldr	r3, [r3, #0]
 8000292:	4299      	cmp	r1, r3
 8000294:	f040 809a 	bne.w	80003cc <getKeyInput+0x1f0>
 8000298:	4952      	ldr	r1, [pc, #328]	; (80003e4 <getKeyInput+0x208>)
 800029a:	687a      	ldr	r2, [r7, #4]
 800029c:	4613      	mov	r3, r2
 800029e:	009b      	lsls	r3, r3, #2
 80002a0:	4413      	add	r3, r2
 80002a2:	00db      	lsls	r3, r3, #3
 80002a4:	440b      	add	r3, r1
 80002a6:	330c      	adds	r3, #12
 80002a8:	6819      	ldr	r1, [r3, #0]
 80002aa:	484e      	ldr	r0, [pc, #312]	; (80003e4 <getKeyInput+0x208>)
 80002ac:	687a      	ldr	r2, [r7, #4]
 80002ae:	4613      	mov	r3, r2
 80002b0:	009b      	lsls	r3, r3, #2
 80002b2:	4413      	add	r3, r2
 80002b4:	00db      	lsls	r3, r3, #3
 80002b6:	4403      	add	r3, r0
 80002b8:	3310      	adds	r3, #16
 80002ba:	681b      	ldr	r3, [r3, #0]
 80002bc:	4299      	cmp	r1, r3
 80002be:	f040 8085 	bne.w	80003cc <getKeyInput+0x1f0>
            if (buttons[index].KeyReg2 != buttons[index].KeyReg3) {
 80002c2:	4948      	ldr	r1, [pc, #288]	; (80003e4 <getKeyInput+0x208>)
 80002c4:	687a      	ldr	r2, [r7, #4]
 80002c6:	4613      	mov	r3, r2
 80002c8:	009b      	lsls	r3, r3, #2
 80002ca:	4413      	add	r3, r2
 80002cc:	00db      	lsls	r3, r3, #3
 80002ce:	440b      	add	r3, r1
 80002d0:	3310      	adds	r3, #16
 80002d2:	6819      	ldr	r1, [r3, #0]
 80002d4:	4843      	ldr	r0, [pc, #268]	; (80003e4 <getKeyInput+0x208>)
 80002d6:	687a      	ldr	r2, [r7, #4]
 80002d8:	4613      	mov	r3, r2
 80002da:	009b      	lsls	r3, r3, #2
 80002dc:	4413      	add	r3, r2
 80002de:	00db      	lsls	r3, r3, #3
 80002e0:	4403      	add	r3, r0
 80002e2:	3314      	adds	r3, #20
 80002e4:	681b      	ldr	r3, [r3, #0]
 80002e6:	4299      	cmp	r1, r3
 80002e8:	d032      	beq.n	8000350 <getKeyInput+0x174>
                buttons[index].KeyReg3 = buttons[index].KeyReg2;
 80002ea:	493e      	ldr	r1, [pc, #248]	; (80003e4 <getKeyInput+0x208>)
 80002ec:	687a      	ldr	r2, [r7, #4]
 80002ee:	4613      	mov	r3, r2
 80002f0:	009b      	lsls	r3, r3, #2
 80002f2:	4413      	add	r3, r2
 80002f4:	00db      	lsls	r3, r3, #3
 80002f6:	440b      	add	r3, r1
 80002f8:	3310      	adds	r3, #16
 80002fa:	6819      	ldr	r1, [r3, #0]
 80002fc:	4839      	ldr	r0, [pc, #228]	; (80003e4 <getKeyInput+0x208>)
 80002fe:	687a      	ldr	r2, [r7, #4]
 8000300:	4613      	mov	r3, r2
 8000302:	009b      	lsls	r3, r3, #2
 8000304:	4413      	add	r3, r2
 8000306:	00db      	lsls	r3, r3, #3
 8000308:	4403      	add	r3, r0
 800030a:	3314      	adds	r3, #20
 800030c:	6019      	str	r1, [r3, #0]

                // Check if button is in pressed state
                if (buttons[index].KeyReg3 == PRESSED_STATE) {
 800030e:	4935      	ldr	r1, [pc, #212]	; (80003e4 <getKeyInput+0x208>)
 8000310:	687a      	ldr	r2, [r7, #4]
 8000312:	4613      	mov	r3, r2
 8000314:	009b      	lsls	r3, r3, #2
 8000316:	4413      	add	r3, r2
 8000318:	00db      	lsls	r3, r3, #3
 800031a:	440b      	add	r3, r1
 800031c:	3314      	adds	r3, #20
 800031e:	681b      	ldr	r3, [r3, #0]
 8000320:	2b00      	cmp	r3, #0
 8000322:	d153      	bne.n	80003cc <getKeyInput+0x1f0>
                    buttons[index].TimeOutForKeyPress = 500;
 8000324:	492f      	ldr	r1, [pc, #188]	; (80003e4 <getKeyInput+0x208>)
 8000326:	687a      	ldr	r2, [r7, #4]
 8000328:	4613      	mov	r3, r2
 800032a:	009b      	lsls	r3, r3, #2
 800032c:	4413      	add	r3, r2
 800032e:	00db      	lsls	r3, r3, #3
 8000330:	440b      	add	r3, r1
 8000332:	3318      	adds	r3, #24
 8000334:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000338:	601a      	str	r2, [r3, #0]
                    buttons[index].flag = 1;
 800033a:	492a      	ldr	r1, [pc, #168]	; (80003e4 <getKeyInput+0x208>)
 800033c:	687a      	ldr	r2, [r7, #4]
 800033e:	4613      	mov	r3, r2
 8000340:	009b      	lsls	r3, r3, #2
 8000342:	4413      	add	r3, r2
 8000344:	00db      	lsls	r3, r3, #3
 8000346:	440b      	add	r3, r1
 8000348:	331c      	adds	r3, #28
 800034a:	2201      	movs	r2, #1
 800034c:	601a      	str	r2, [r3, #0]
 800034e:	e03d      	b.n	80003cc <getKeyInput+0x1f0>
                }

            } else {
                // Decrease timeout if button is held down
                buttons[index].TimeOutForKeyPress--;
 8000350:	4924      	ldr	r1, [pc, #144]	; (80003e4 <getKeyInput+0x208>)
 8000352:	687a      	ldr	r2, [r7, #4]
 8000354:	4613      	mov	r3, r2
 8000356:	009b      	lsls	r3, r3, #2
 8000358:	4413      	add	r3, r2
 800035a:	00db      	lsls	r3, r3, #3
 800035c:	440b      	add	r3, r1
 800035e:	3318      	adds	r3, #24
 8000360:	681b      	ldr	r3, [r3, #0]
 8000362:	1e59      	subs	r1, r3, #1
 8000364:	481f      	ldr	r0, [pc, #124]	; (80003e4 <getKeyInput+0x208>)
 8000366:	687a      	ldr	r2, [r7, #4]
 8000368:	4613      	mov	r3, r2
 800036a:	009b      	lsls	r3, r3, #2
 800036c:	4413      	add	r3, r2
 800036e:	00db      	lsls	r3, r3, #3
 8000370:	4403      	add	r3, r0
 8000372:	3318      	adds	r3, #24
 8000374:	6019      	str	r1, [r3, #0]
                if (buttons[index].TimeOutForKeyPress == 0) {
 8000376:	491b      	ldr	r1, [pc, #108]	; (80003e4 <getKeyInput+0x208>)
 8000378:	687a      	ldr	r2, [r7, #4]
 800037a:	4613      	mov	r3, r2
 800037c:	009b      	lsls	r3, r3, #2
 800037e:	4413      	add	r3, r2
 8000380:	00db      	lsls	r3, r3, #3
 8000382:	440b      	add	r3, r1
 8000384:	3318      	adds	r3, #24
 8000386:	681b      	ldr	r3, [r3, #0]
 8000388:	2b00      	cmp	r3, #0
 800038a:	d11f      	bne.n	80003cc <getKeyInput+0x1f0>
                    buttons[index].TimeOutForKeyPress = 500;
 800038c:	4915      	ldr	r1, [pc, #84]	; (80003e4 <getKeyInput+0x208>)
 800038e:	687a      	ldr	r2, [r7, #4]
 8000390:	4613      	mov	r3, r2
 8000392:	009b      	lsls	r3, r3, #2
 8000394:	4413      	add	r3, r2
 8000396:	00db      	lsls	r3, r3, #3
 8000398:	440b      	add	r3, r1
 800039a:	3318      	adds	r3, #24
 800039c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80003a0:	601a      	str	r2, [r3, #0]
                    if (buttons[index].KeyReg3 == PRESSED_STATE) {
 80003a2:	4910      	ldr	r1, [pc, #64]	; (80003e4 <getKeyInput+0x208>)
 80003a4:	687a      	ldr	r2, [r7, #4]
 80003a6:	4613      	mov	r3, r2
 80003a8:	009b      	lsls	r3, r3, #2
 80003aa:	4413      	add	r3, r2
 80003ac:	00db      	lsls	r3, r3, #3
 80003ae:	440b      	add	r3, r1
 80003b0:	3314      	adds	r3, #20
 80003b2:	681b      	ldr	r3, [r3, #0]
 80003b4:	2b00      	cmp	r3, #0
 80003b6:	d109      	bne.n	80003cc <getKeyInput+0x1f0>
                        buttons[index].long_pressed = 1;
 80003b8:	490a      	ldr	r1, [pc, #40]	; (80003e4 <getKeyInput+0x208>)
 80003ba:	687a      	ldr	r2, [r7, #4]
 80003bc:	4613      	mov	r3, r2
 80003be:	009b      	lsls	r3, r3, #2
 80003c0:	4413      	add	r3, r2
 80003c2:	00db      	lsls	r3, r3, #3
 80003c4:	440b      	add	r3, r1
 80003c6:	3320      	adds	r3, #32
 80003c8:	2201      	movs	r2, #1
 80003ca:	601a      	str	r2, [r3, #0]
    for (int index = 0; index < NUM_BUTTONS; index++) {
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	3301      	adds	r3, #1
 80003d0:	607b      	str	r3, [r7, #4]
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	2b02      	cmp	r3, #2
 80003d6:	f77f af07 	ble.w	80001e8 <getKeyInput+0xc>
                    }
                }
            }
        }
    }
}
 80003da:	bf00      	nop
 80003dc:	bf00      	nop
 80003de:	3708      	adds	r7, #8
 80003e0:	46bd      	mov	sp, r7
 80003e2:	bd80      	pop	{r7, pc}
 80003e4:	20000000 	.word	0x20000000

080003e8 <fsm_auto_run>:
extern int TIME_FOR_RED;
extern int TIME_FOR_AMBER;
extern int time_green;
extern int time_red;
extern int time_amber;
void fsm_auto_run(){
 80003e8:	b580      	push	{r7, lr}
 80003ea:	af00      	add	r7, sp, #0
	switch(status){
 80003ec:	4ba4      	ldr	r3, [pc, #656]	; (8000680 <fsm_auto_run+0x298>)
 80003ee:	681b      	ldr	r3, [r3, #0]
 80003f0:	3b01      	subs	r3, #1
 80003f2:	2b04      	cmp	r3, #4
 80003f4:	f200 8226 	bhi.w	8000844 <fsm_auto_run+0x45c>
 80003f8:	a201      	add	r2, pc, #4	; (adr r2, 8000400 <fsm_auto_run+0x18>)
 80003fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003fe:	bf00      	nop
 8000400:	08000415 	.word	0x08000415
 8000404:	080004d9 	.word	0x080004d9
 8000408:	080005b1 	.word	0x080005b1
 800040c:	080006a1 	.word	0x080006a1
 8000410:	08000777 	.word	0x08000777
	case INIT:
		init();
 8000414:	f000 fc70 	bl	8000cf8 <init>
		if(1){

			setTimer(0, (time_green+1)*1000);
 8000418:	4b9a      	ldr	r3, [pc, #616]	; (8000684 <fsm_auto_run+0x29c>)
 800041a:	681b      	ldr	r3, [r3, #0]
 800041c:	3301      	adds	r3, #1
 800041e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000422:	fb02 f303 	mul.w	r3, r2, r3
 8000426:	4619      	mov	r1, r3
 8000428:	2000      	movs	r0, #0
 800042a:	f000 fff9 	bl	8001420 <setTimer>
		    setTimer(9, 100); // for scan led
 800042e:	2164      	movs	r1, #100	; 0x64
 8000430:	2009      	movs	r0, #9
 8000432:	f000 fff5 	bl	8001420 <setTimer>
		    setTimer(1, 1000); // for display 7 seg
 8000436:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800043a:	2001      	movs	r0, #1
 800043c:	f000 fff0 	bl	8001420 <setTimer>
		    setTimer(8, 1000); // signal timer
 8000440:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000444:	2008      	movs	r0, #8
 8000446:	f000 ffeb 	bl	8001420 <setTimer>
		    status = AUTO_GREEN_RED;
 800044a:	4b8d      	ldr	r3, [pc, #564]	; (8000680 <fsm_auto_run+0x298>)
 800044c:	2202      	movs	r2, #2
 800044e:	601a      	str	r2, [r3, #0]
		   // snprintf(buffer, sizeof(buffer), "     MANUAL       ");

		}
		if(isButtonPressed(0) || isButtonLongPressed(0)){
 8000450:	2000      	movs	r0, #0
 8000452:	f7ff fe7b 	bl	800014c <isButtonPressed>
 8000456:	4603      	mov	r3, r0
 8000458:	2b00      	cmp	r3, #0
 800045a:	d105      	bne.n	8000468 <fsm_auto_run+0x80>
 800045c:	2000      	movs	r0, #0
 800045e:	f7ff fe99 	bl	8000194 <isButtonLongPressed>
 8000462:	4603      	mov	r3, r0
 8000464:	2b00      	cmp	r3, #0
 8000466:	d00e      	beq.n	8000486 <fsm_auto_run+0x9e>
			HAL_GPIO_TogglePin(SIGNAL_BUTTON_GPIO_Port, SIGNAL_BUTTON_Pin);
 8000468:	f44f 7100 	mov.w	r1, #512	; 0x200
 800046c:	4886      	ldr	r0, [pc, #536]	; (8000688 <fsm_auto_run+0x2a0>)
 800046e:	f001 fd56 	bl	8001f1e <HAL_GPIO_TogglePin>
			status = MODIFY_RED;
 8000472:	4b83      	ldr	r3, [pc, #524]	; (8000680 <fsm_auto_run+0x298>)
 8000474:	2216      	movs	r2, #22
 8000476:	601a      	str	r2, [r3, #0]
			clear_all_led();
 8000478:	f000 fde6 	bl	8001048 <clear_all_led>
			setTimer(3, 500); // timer for bliking led 2hz on mode modify
 800047c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000480:	2003      	movs	r0, #3
 8000482:	f000 ffcd 	bl	8001420 <setTimer>
		}
		if(isButtonPressed(1) || isButtonLongPressed(1)){
 8000486:	2001      	movs	r0, #1
 8000488:	f7ff fe60 	bl	800014c <isButtonPressed>
 800048c:	4603      	mov	r3, r0
 800048e:	2b00      	cmp	r3, #0
 8000490:	d105      	bne.n	800049e <fsm_auto_run+0xb6>
 8000492:	2001      	movs	r0, #1
 8000494:	f7ff fe7e 	bl	8000194 <isButtonLongPressed>
 8000498:	4603      	mov	r3, r0
 800049a:	2b00      	cmp	r3, #0
 800049c:	d009      	beq.n	80004b2 <fsm_auto_run+0xca>
			HAL_GPIO_TogglePin(SIGNAL_BUTTON_GPIO_Port, SIGNAL_BUTTON_Pin);
 800049e:	f44f 7100 	mov.w	r1, #512	; 0x200
 80004a2:	4879      	ldr	r0, [pc, #484]	; (8000688 <fsm_auto_run+0x2a0>)
 80004a4:	f001 fd3b 	bl	8001f1e <HAL_GPIO_TogglePin>
			clear_all_led();
 80004a8:	f000 fdce 	bl	8001048 <clear_all_led>
			status = MANUAL_GREEN_RED;
 80004ac:	4b74      	ldr	r3, [pc, #464]	; (8000680 <fsm_auto_run+0x298>)
 80004ae:	2220      	movs	r2, #32
 80004b0:	601a      	str	r2, [r3, #0]
		}
		if(isButtonPressed(2) || isButtonLongPressed(2)){
 80004b2:	2002      	movs	r0, #2
 80004b4:	f7ff fe4a 	bl	800014c <isButtonPressed>
 80004b8:	4603      	mov	r3, r0
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	d106      	bne.n	80004cc <fsm_auto_run+0xe4>
 80004be:	2002      	movs	r0, #2
 80004c0:	f7ff fe68 	bl	8000194 <isButtonLongPressed>
 80004c4:	4603      	mov	r3, r0
 80004c6:	2b00      	cmp	r3, #0
 80004c8:	f000 81be 	beq.w	8000848 <fsm_auto_run+0x460>
			HAL_GPIO_TogglePin(SIGNAL_BUTTON_GPIO_Port, SIGNAL_BUTTON_Pin);
 80004cc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80004d0:	486d      	ldr	r0, [pc, #436]	; (8000688 <fsm_auto_run+0x2a0>)
 80004d2:	f001 fd24 	bl	8001f1e <HAL_GPIO_TogglePin>
		}
		break;
 80004d6:	e1b7      	b.n	8000848 <fsm_auto_run+0x460>
	case AUTO_GREEN_RED:
		auto_green_red();
 80004d8:	f000 fc3e 	bl	8000d58 <auto_green_red>
		if(timers[0].flag == 1) // flag for transition
 80004dc:	4b6b      	ldr	r3, [pc, #428]	; (800068c <fsm_auto_run+0x2a4>)
 80004de:	685b      	ldr	r3, [r3, #4]
 80004e0:	2b01      	cmp	r3, #1
 80004e2:	d121      	bne.n	8000528 <fsm_auto_run+0x140>
		{
			time_green = TIME_FOR_GREEN;
 80004e4:	4b6a      	ldr	r3, [pc, #424]	; (8000690 <fsm_auto_run+0x2a8>)
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	4a66      	ldr	r2, [pc, #408]	; (8000684 <fsm_auto_run+0x29c>)
 80004ea:	6013      	str	r3, [r2, #0]
			time_amber = TIME_FOR_RED - TIME_FOR_GREEN - 1 ;
 80004ec:	4b69      	ldr	r3, [pc, #420]	; (8000694 <fsm_auto_run+0x2ac>)
 80004ee:	681a      	ldr	r2, [r3, #0]
 80004f0:	4b67      	ldr	r3, [pc, #412]	; (8000690 <fsm_auto_run+0x2a8>)
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	1ad3      	subs	r3, r2, r3
 80004f6:	3b01      	subs	r3, #1
 80004f8:	4a67      	ldr	r2, [pc, #412]	; (8000698 <fsm_auto_run+0x2b0>)
 80004fa:	6013      	str	r3, [r2, #0]
			time_red = TIME_FOR_RED - TIME_FOR_GREEN - 1;
 80004fc:	4b65      	ldr	r3, [pc, #404]	; (8000694 <fsm_auto_run+0x2ac>)
 80004fe:	681a      	ldr	r2, [r3, #0]
 8000500:	4b63      	ldr	r3, [pc, #396]	; (8000690 <fsm_auto_run+0x2a8>)
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	1ad3      	subs	r3, r2, r3
 8000506:	3b01      	subs	r3, #1
 8000508:	4a64      	ldr	r2, [pc, #400]	; (800069c <fsm_auto_run+0x2b4>)
 800050a:	6013      	str	r3, [r2, #0]
			setTimer(0, (time_amber+1)*1000);
 800050c:	4b62      	ldr	r3, [pc, #392]	; (8000698 <fsm_auto_run+0x2b0>)
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	3301      	adds	r3, #1
 8000512:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000516:	fb02 f303 	mul.w	r3, r2, r3
 800051a:	4619      	mov	r1, r3
 800051c:	2000      	movs	r0, #0
 800051e:	f000 ff7f 	bl	8001420 <setTimer>
			status = AUTO_AMBER_RED;
 8000522:	4b57      	ldr	r3, [pc, #348]	; (8000680 <fsm_auto_run+0x298>)
 8000524:	2203      	movs	r2, #3
 8000526:	601a      	str	r2, [r3, #0]
		}
		if(isButtonPressed(0) || isButtonLongPressed(0)){
 8000528:	2000      	movs	r0, #0
 800052a:	f7ff fe0f 	bl	800014c <isButtonPressed>
 800052e:	4603      	mov	r3, r0
 8000530:	2b00      	cmp	r3, #0
 8000532:	d105      	bne.n	8000540 <fsm_auto_run+0x158>
 8000534:	2000      	movs	r0, #0
 8000536:	f7ff fe2d 	bl	8000194 <isButtonLongPressed>
 800053a:	4603      	mov	r3, r0
 800053c:	2b00      	cmp	r3, #0
 800053e:	d00e      	beq.n	800055e <fsm_auto_run+0x176>
			HAL_GPIO_TogglePin(SIGNAL_BUTTON_GPIO_Port, SIGNAL_BUTTON_Pin);
 8000540:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000544:	4850      	ldr	r0, [pc, #320]	; (8000688 <fsm_auto_run+0x2a0>)
 8000546:	f001 fcea 	bl	8001f1e <HAL_GPIO_TogglePin>
			status = MODIFY_RED;
 800054a:	4b4d      	ldr	r3, [pc, #308]	; (8000680 <fsm_auto_run+0x298>)
 800054c:	2216      	movs	r2, #22
 800054e:	601a      	str	r2, [r3, #0]
			clear_all_led();
 8000550:	f000 fd7a 	bl	8001048 <clear_all_led>
			setTimer(3, 500); // timer for bliking led 2hz on mode modify
 8000554:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000558:	2003      	movs	r0, #3
 800055a:	f000 ff61 	bl	8001420 <setTimer>
		}
		if(isButtonPressed(1) || isButtonLongPressed(1)){
 800055e:	2001      	movs	r0, #1
 8000560:	f7ff fdf4 	bl	800014c <isButtonPressed>
 8000564:	4603      	mov	r3, r0
 8000566:	2b00      	cmp	r3, #0
 8000568:	d105      	bne.n	8000576 <fsm_auto_run+0x18e>
 800056a:	2001      	movs	r0, #1
 800056c:	f7ff fe12 	bl	8000194 <isButtonLongPressed>
 8000570:	4603      	mov	r3, r0
 8000572:	2b00      	cmp	r3, #0
 8000574:	d009      	beq.n	800058a <fsm_auto_run+0x1a2>
			HAL_GPIO_TogglePin(SIGNAL_BUTTON_GPIO_Port, SIGNAL_BUTTON_Pin);
 8000576:	f44f 7100 	mov.w	r1, #512	; 0x200
 800057a:	4843      	ldr	r0, [pc, #268]	; (8000688 <fsm_auto_run+0x2a0>)
 800057c:	f001 fccf 	bl	8001f1e <HAL_GPIO_TogglePin>
			clear_all_led();
 8000580:	f000 fd62 	bl	8001048 <clear_all_led>
			status = MANUAL_GREEN_RED;
 8000584:	4b3e      	ldr	r3, [pc, #248]	; (8000680 <fsm_auto_run+0x298>)
 8000586:	2220      	movs	r2, #32
 8000588:	601a      	str	r2, [r3, #0]
		}
		if(isButtonPressed(2) || isButtonLongPressed(2)){
 800058a:	2002      	movs	r0, #2
 800058c:	f7ff fdde 	bl	800014c <isButtonPressed>
 8000590:	4603      	mov	r3, r0
 8000592:	2b00      	cmp	r3, #0
 8000594:	d106      	bne.n	80005a4 <fsm_auto_run+0x1bc>
 8000596:	2002      	movs	r0, #2
 8000598:	f7ff fdfc 	bl	8000194 <isButtonLongPressed>
 800059c:	4603      	mov	r3, r0
 800059e:	2b00      	cmp	r3, #0
 80005a0:	f000 8154 	beq.w	800084c <fsm_auto_run+0x464>
			HAL_GPIO_TogglePin(SIGNAL_BUTTON_GPIO_Port, SIGNAL_BUTTON_Pin);
 80005a4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005a8:	4837      	ldr	r0, [pc, #220]	; (8000688 <fsm_auto_run+0x2a0>)
 80005aa:	f001 fcb8 	bl	8001f1e <HAL_GPIO_TogglePin>
		}
		break;
 80005ae:	e14d      	b.n	800084c <fsm_auto_run+0x464>
	case AUTO_AMBER_RED:
		auto_amber_red();
 80005b0:	f000 fc0e 	bl	8000dd0 <auto_amber_red>
		if(timers[0].flag == 1){
 80005b4:	4b35      	ldr	r3, [pc, #212]	; (800068c <fsm_auto_run+0x2a4>)
 80005b6:	685b      	ldr	r3, [r3, #4]
 80005b8:	2b01      	cmp	r3, #1
 80005ba:	d11d      	bne.n	80005f8 <fsm_auto_run+0x210>
			time_red = TIME_FOR_RED;
 80005bc:	4b35      	ldr	r3, [pc, #212]	; (8000694 <fsm_auto_run+0x2ac>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	4a36      	ldr	r2, [pc, #216]	; (800069c <fsm_auto_run+0x2b4>)
 80005c2:	6013      	str	r3, [r2, #0]
			time_amber = TIME_FOR_RED - TIME_FOR_GREEN - 1;
 80005c4:	4b33      	ldr	r3, [pc, #204]	; (8000694 <fsm_auto_run+0x2ac>)
 80005c6:	681a      	ldr	r2, [r3, #0]
 80005c8:	4b31      	ldr	r3, [pc, #196]	; (8000690 <fsm_auto_run+0x2a8>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	1ad3      	subs	r3, r2, r3
 80005ce:	3b01      	subs	r3, #1
 80005d0:	4a31      	ldr	r2, [pc, #196]	; (8000698 <fsm_auto_run+0x2b0>)
 80005d2:	6013      	str	r3, [r2, #0]
			time_green = TIME_FOR_GREEN;
 80005d4:	4b2e      	ldr	r3, [pc, #184]	; (8000690 <fsm_auto_run+0x2a8>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	4a2a      	ldr	r2, [pc, #168]	; (8000684 <fsm_auto_run+0x29c>)
 80005da:	6013      	str	r3, [r2, #0]
			setTimer(0, (time_green+1)*1000);
 80005dc:	4b29      	ldr	r3, [pc, #164]	; (8000684 <fsm_auto_run+0x29c>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	3301      	adds	r3, #1
 80005e2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80005e6:	fb02 f303 	mul.w	r3, r2, r3
 80005ea:	4619      	mov	r1, r3
 80005ec:	2000      	movs	r0, #0
 80005ee:	f000 ff17 	bl	8001420 <setTimer>
			status = AUTO_RED_GREEN;
 80005f2:	4b23      	ldr	r3, [pc, #140]	; (8000680 <fsm_auto_run+0x298>)
 80005f4:	2204      	movs	r2, #4
 80005f6:	601a      	str	r2, [r3, #0]
		}
		if(isButtonPressed(0) || isButtonLongPressed(0)){
 80005f8:	2000      	movs	r0, #0
 80005fa:	f7ff fda7 	bl	800014c <isButtonPressed>
 80005fe:	4603      	mov	r3, r0
 8000600:	2b00      	cmp	r3, #0
 8000602:	d105      	bne.n	8000610 <fsm_auto_run+0x228>
 8000604:	2000      	movs	r0, #0
 8000606:	f7ff fdc5 	bl	8000194 <isButtonLongPressed>
 800060a:	4603      	mov	r3, r0
 800060c:	2b00      	cmp	r3, #0
 800060e:	d00e      	beq.n	800062e <fsm_auto_run+0x246>
			HAL_GPIO_TogglePin(SIGNAL_BUTTON_GPIO_Port, SIGNAL_BUTTON_Pin);
 8000610:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000614:	481c      	ldr	r0, [pc, #112]	; (8000688 <fsm_auto_run+0x2a0>)
 8000616:	f001 fc82 	bl	8001f1e <HAL_GPIO_TogglePin>
			status = MODIFY_RED;
 800061a:	4b19      	ldr	r3, [pc, #100]	; (8000680 <fsm_auto_run+0x298>)
 800061c:	2216      	movs	r2, #22
 800061e:	601a      	str	r2, [r3, #0]
			clear_all_led();
 8000620:	f000 fd12 	bl	8001048 <clear_all_led>
			setTimer(3, 500); // timer for bliking led 2hz on mode modify
 8000624:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000628:	2003      	movs	r0, #3
 800062a:	f000 fef9 	bl	8001420 <setTimer>
		}
		if(isButtonPressed(1) || isButtonLongPressed(1)){
 800062e:	2001      	movs	r0, #1
 8000630:	f7ff fd8c 	bl	800014c <isButtonPressed>
 8000634:	4603      	mov	r3, r0
 8000636:	2b00      	cmp	r3, #0
 8000638:	d105      	bne.n	8000646 <fsm_auto_run+0x25e>
 800063a:	2001      	movs	r0, #1
 800063c:	f7ff fdaa 	bl	8000194 <isButtonLongPressed>
 8000640:	4603      	mov	r3, r0
 8000642:	2b00      	cmp	r3, #0
 8000644:	d009      	beq.n	800065a <fsm_auto_run+0x272>
			HAL_GPIO_TogglePin(SIGNAL_BUTTON_GPIO_Port, SIGNAL_BUTTON_Pin);
 8000646:	f44f 7100 	mov.w	r1, #512	; 0x200
 800064a:	480f      	ldr	r0, [pc, #60]	; (8000688 <fsm_auto_run+0x2a0>)
 800064c:	f001 fc67 	bl	8001f1e <HAL_GPIO_TogglePin>
			clear_all_led();
 8000650:	f000 fcfa 	bl	8001048 <clear_all_led>
			status = MANUAL_GREEN_RED;
 8000654:	4b0a      	ldr	r3, [pc, #40]	; (8000680 <fsm_auto_run+0x298>)
 8000656:	2220      	movs	r2, #32
 8000658:	601a      	str	r2, [r3, #0]
		}
		if(isButtonPressed(2) || isButtonLongPressed(2)){
 800065a:	2002      	movs	r0, #2
 800065c:	f7ff fd76 	bl	800014c <isButtonPressed>
 8000660:	4603      	mov	r3, r0
 8000662:	2b00      	cmp	r3, #0
 8000664:	d106      	bne.n	8000674 <fsm_auto_run+0x28c>
 8000666:	2002      	movs	r0, #2
 8000668:	f7ff fd94 	bl	8000194 <isButtonLongPressed>
 800066c:	4603      	mov	r3, r0
 800066e:	2b00      	cmp	r3, #0
 8000670:	f000 80ee 	beq.w	8000850 <fsm_auto_run+0x468>
			HAL_GPIO_TogglePin(SIGNAL_BUTTON_GPIO_Port, SIGNAL_BUTTON_Pin);
 8000674:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000678:	4803      	ldr	r0, [pc, #12]	; (8000688 <fsm_auto_run+0x2a0>)
 800067a:	f001 fc50 	bl	8001f1e <HAL_GPIO_TogglePin>
		}
		break;
 800067e:	e0e7      	b.n	8000850 <fsm_auto_run+0x468>
 8000680:	20000140 	.word	0x20000140
 8000684:	20000144 	.word	0x20000144
 8000688:	40011000 	.word	0x40011000
 800068c:	200001ec 	.word	0x200001ec
 8000690:	20000078 	.word	0x20000078
 8000694:	2000007c 	.word	0x2000007c
 8000698:	2000014c 	.word	0x2000014c
 800069c:	20000148 	.word	0x20000148
	case AUTO_RED_GREEN:
		auto_red_green();
 80006a0:	f000 fbd2 	bl	8000e48 <auto_red_green>
		if(timers[0].flag == 1){
 80006a4:	4b6e      	ldr	r3, [pc, #440]	; (8000860 <fsm_auto_run+0x478>)
 80006a6:	685b      	ldr	r3, [r3, #4]
 80006a8:	2b01      	cmp	r3, #1
 80006aa:	d121      	bne.n	80006f0 <fsm_auto_run+0x308>
			time_amber = TIME_FOR_RED - TIME_FOR_GREEN - 1;
 80006ac:	4b6d      	ldr	r3, [pc, #436]	; (8000864 <fsm_auto_run+0x47c>)
 80006ae:	681a      	ldr	r2, [r3, #0]
 80006b0:	4b6d      	ldr	r3, [pc, #436]	; (8000868 <fsm_auto_run+0x480>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	1ad3      	subs	r3, r2, r3
 80006b6:	3b01      	subs	r3, #1
 80006b8:	4a6c      	ldr	r2, [pc, #432]	; (800086c <fsm_auto_run+0x484>)
 80006ba:	6013      	str	r3, [r2, #0]
			time_red = TIME_FOR_RED-TIME_FOR_GREEN - 1;
 80006bc:	4b69      	ldr	r3, [pc, #420]	; (8000864 <fsm_auto_run+0x47c>)
 80006be:	681a      	ldr	r2, [r3, #0]
 80006c0:	4b69      	ldr	r3, [pc, #420]	; (8000868 <fsm_auto_run+0x480>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	1ad3      	subs	r3, r2, r3
 80006c6:	3b01      	subs	r3, #1
 80006c8:	4a69      	ldr	r2, [pc, #420]	; (8000870 <fsm_auto_run+0x488>)
 80006ca:	6013      	str	r3, [r2, #0]
			time_green = TIME_FOR_GREEN;
 80006cc:	4b66      	ldr	r3, [pc, #408]	; (8000868 <fsm_auto_run+0x480>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	4a68      	ldr	r2, [pc, #416]	; (8000874 <fsm_auto_run+0x48c>)
 80006d2:	6013      	str	r3, [r2, #0]
			setTimer(0, (time_amber+1)*1000);
 80006d4:	4b65      	ldr	r3, [pc, #404]	; (800086c <fsm_auto_run+0x484>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	3301      	adds	r3, #1
 80006da:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80006de:	fb02 f303 	mul.w	r3, r2, r3
 80006e2:	4619      	mov	r1, r3
 80006e4:	2000      	movs	r0, #0
 80006e6:	f000 fe9b 	bl	8001420 <setTimer>
			status = AUTO_RED_AMBER;
 80006ea:	4b63      	ldr	r3, [pc, #396]	; (8000878 <fsm_auto_run+0x490>)
 80006ec:	2205      	movs	r2, #5
 80006ee:	601a      	str	r2, [r3, #0]
		}
		if(isButtonPressed(0) || isButtonLongPressed(0)){
 80006f0:	2000      	movs	r0, #0
 80006f2:	f7ff fd2b 	bl	800014c <isButtonPressed>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d105      	bne.n	8000708 <fsm_auto_run+0x320>
 80006fc:	2000      	movs	r0, #0
 80006fe:	f7ff fd49 	bl	8000194 <isButtonLongPressed>
 8000702:	4603      	mov	r3, r0
 8000704:	2b00      	cmp	r3, #0
 8000706:	d00e      	beq.n	8000726 <fsm_auto_run+0x33e>
			HAL_GPIO_TogglePin(SIGNAL_BUTTON_GPIO_Port, SIGNAL_BUTTON_Pin);
 8000708:	f44f 7100 	mov.w	r1, #512	; 0x200
 800070c:	485b      	ldr	r0, [pc, #364]	; (800087c <fsm_auto_run+0x494>)
 800070e:	f001 fc06 	bl	8001f1e <HAL_GPIO_TogglePin>
			status = MODIFY_RED;
 8000712:	4b59      	ldr	r3, [pc, #356]	; (8000878 <fsm_auto_run+0x490>)
 8000714:	2216      	movs	r2, #22
 8000716:	601a      	str	r2, [r3, #0]
			clear_all_led();
 8000718:	f000 fc96 	bl	8001048 <clear_all_led>
			setTimer(3, 500); // timer for bliking led 2hz on mode modify
 800071c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000720:	2003      	movs	r0, #3
 8000722:	f000 fe7d 	bl	8001420 <setTimer>
		}
		if(isButtonPressed(1) || isButtonLongPressed(1)){
 8000726:	2001      	movs	r0, #1
 8000728:	f7ff fd10 	bl	800014c <isButtonPressed>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d105      	bne.n	800073e <fsm_auto_run+0x356>
 8000732:	2001      	movs	r0, #1
 8000734:	f7ff fd2e 	bl	8000194 <isButtonLongPressed>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d009      	beq.n	8000752 <fsm_auto_run+0x36a>
			HAL_GPIO_TogglePin(SIGNAL_BUTTON_GPIO_Port, SIGNAL_BUTTON_Pin);
 800073e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000742:	484e      	ldr	r0, [pc, #312]	; (800087c <fsm_auto_run+0x494>)
 8000744:	f001 fbeb 	bl	8001f1e <HAL_GPIO_TogglePin>
			clear_all_led();
 8000748:	f000 fc7e 	bl	8001048 <clear_all_led>
			status = MANUAL_GREEN_RED;
 800074c:	4b4a      	ldr	r3, [pc, #296]	; (8000878 <fsm_auto_run+0x490>)
 800074e:	2220      	movs	r2, #32
 8000750:	601a      	str	r2, [r3, #0]
		}
		if(isButtonPressed(2) || isButtonLongPressed(2)){
 8000752:	2002      	movs	r0, #2
 8000754:	f7ff fcfa 	bl	800014c <isButtonPressed>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d105      	bne.n	800076a <fsm_auto_run+0x382>
 800075e:	2002      	movs	r0, #2
 8000760:	f7ff fd18 	bl	8000194 <isButtonLongPressed>
 8000764:	4603      	mov	r3, r0
 8000766:	2b00      	cmp	r3, #0
 8000768:	d074      	beq.n	8000854 <fsm_auto_run+0x46c>
			HAL_GPIO_TogglePin(SIGNAL_BUTTON_GPIO_Port, SIGNAL_BUTTON_Pin);
 800076a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800076e:	4843      	ldr	r0, [pc, #268]	; (800087c <fsm_auto_run+0x494>)
 8000770:	f001 fbd5 	bl	8001f1e <HAL_GPIO_TogglePin>
		}
		break;
 8000774:	e06e      	b.n	8000854 <fsm_auto_run+0x46c>
	case AUTO_RED_AMBER:
		auto_red_amber();
 8000776:	f000 fba3 	bl	8000ec0 <auto_red_amber>
		if(timers[0].flag == 1){
 800077a:	4b39      	ldr	r3, [pc, #228]	; (8000860 <fsm_auto_run+0x478>)
 800077c:	685b      	ldr	r3, [r3, #4]
 800077e:	2b01      	cmp	r3, #1
 8000780:	d11d      	bne.n	80007be <fsm_auto_run+0x3d6>
			time_green = TIME_FOR_GREEN;
 8000782:	4b39      	ldr	r3, [pc, #228]	; (8000868 <fsm_auto_run+0x480>)
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	4a3b      	ldr	r2, [pc, #236]	; (8000874 <fsm_auto_run+0x48c>)
 8000788:	6013      	str	r3, [r2, #0]
			time_amber = TIME_FOR_RED - TIME_FOR_GREEN - 1;
 800078a:	4b36      	ldr	r3, [pc, #216]	; (8000864 <fsm_auto_run+0x47c>)
 800078c:	681a      	ldr	r2, [r3, #0]
 800078e:	4b36      	ldr	r3, [pc, #216]	; (8000868 <fsm_auto_run+0x480>)
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	1ad3      	subs	r3, r2, r3
 8000794:	3b01      	subs	r3, #1
 8000796:	4a35      	ldr	r2, [pc, #212]	; (800086c <fsm_auto_run+0x484>)
 8000798:	6013      	str	r3, [r2, #0]
			time_red = TIME_FOR_RED;
 800079a:	4b32      	ldr	r3, [pc, #200]	; (8000864 <fsm_auto_run+0x47c>)
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	4a34      	ldr	r2, [pc, #208]	; (8000870 <fsm_auto_run+0x488>)
 80007a0:	6013      	str	r3, [r2, #0]
			setTimer(0, (time_green+1)*1000);
 80007a2:	4b34      	ldr	r3, [pc, #208]	; (8000874 <fsm_auto_run+0x48c>)
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	3301      	adds	r3, #1
 80007a8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80007ac:	fb02 f303 	mul.w	r3, r2, r3
 80007b0:	4619      	mov	r1, r3
 80007b2:	2000      	movs	r0, #0
 80007b4:	f000 fe34 	bl	8001420 <setTimer>
			status = AUTO_GREEN_RED;
 80007b8:	4b2f      	ldr	r3, [pc, #188]	; (8000878 <fsm_auto_run+0x490>)
 80007ba:	2202      	movs	r2, #2
 80007bc:	601a      	str	r2, [r3, #0]
		}
		if(isButtonPressed(0) || isButtonLongPressed(0)){
 80007be:	2000      	movs	r0, #0
 80007c0:	f7ff fcc4 	bl	800014c <isButtonPressed>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d105      	bne.n	80007d6 <fsm_auto_run+0x3ee>
 80007ca:	2000      	movs	r0, #0
 80007cc:	f7ff fce2 	bl	8000194 <isButtonLongPressed>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d00e      	beq.n	80007f4 <fsm_auto_run+0x40c>
			HAL_GPIO_TogglePin(SIGNAL_BUTTON_GPIO_Port, SIGNAL_BUTTON_Pin);
 80007d6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007da:	4828      	ldr	r0, [pc, #160]	; (800087c <fsm_auto_run+0x494>)
 80007dc:	f001 fb9f 	bl	8001f1e <HAL_GPIO_TogglePin>
			status = MODIFY_RED;
 80007e0:	4b25      	ldr	r3, [pc, #148]	; (8000878 <fsm_auto_run+0x490>)
 80007e2:	2216      	movs	r2, #22
 80007e4:	601a      	str	r2, [r3, #0]
			clear_all_led();
 80007e6:	f000 fc2f 	bl	8001048 <clear_all_led>
			setTimer(3, 500); // timer for bliking led 2hz on mode modify
 80007ea:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80007ee:	2003      	movs	r0, #3
 80007f0:	f000 fe16 	bl	8001420 <setTimer>
		}
		if(isButtonPressed(1) || isButtonLongPressed(1)){
 80007f4:	2001      	movs	r0, #1
 80007f6:	f7ff fca9 	bl	800014c <isButtonPressed>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d105      	bne.n	800080c <fsm_auto_run+0x424>
 8000800:	2001      	movs	r0, #1
 8000802:	f7ff fcc7 	bl	8000194 <isButtonLongPressed>
 8000806:	4603      	mov	r3, r0
 8000808:	2b00      	cmp	r3, #0
 800080a:	d009      	beq.n	8000820 <fsm_auto_run+0x438>
			HAL_GPIO_TogglePin(SIGNAL_BUTTON_GPIO_Port, SIGNAL_BUTTON_Pin);
 800080c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000810:	481a      	ldr	r0, [pc, #104]	; (800087c <fsm_auto_run+0x494>)
 8000812:	f001 fb84 	bl	8001f1e <HAL_GPIO_TogglePin>
			clear_all_led();
 8000816:	f000 fc17 	bl	8001048 <clear_all_led>
			status = MANUAL_GREEN_RED;
 800081a:	4b17      	ldr	r3, [pc, #92]	; (8000878 <fsm_auto_run+0x490>)
 800081c:	2220      	movs	r2, #32
 800081e:	601a      	str	r2, [r3, #0]
		}
		if(isButtonPressed(2) || isButtonLongPressed(2)){
 8000820:	2002      	movs	r0, #2
 8000822:	f7ff fc93 	bl	800014c <isButtonPressed>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d105      	bne.n	8000838 <fsm_auto_run+0x450>
 800082c:	2002      	movs	r0, #2
 800082e:	f7ff fcb1 	bl	8000194 <isButtonLongPressed>
 8000832:	4603      	mov	r3, r0
 8000834:	2b00      	cmp	r3, #0
 8000836:	d00f      	beq.n	8000858 <fsm_auto_run+0x470>
			HAL_GPIO_TogglePin(SIGNAL_BUTTON_GPIO_Port, SIGNAL_BUTTON_Pin);
 8000838:	f44f 7100 	mov.w	r1, #512	; 0x200
 800083c:	480f      	ldr	r0, [pc, #60]	; (800087c <fsm_auto_run+0x494>)
 800083e:	f001 fb6e 	bl	8001f1e <HAL_GPIO_TogglePin>
		}
		break;
 8000842:	e009      	b.n	8000858 <fsm_auto_run+0x470>
	default:
		break;
 8000844:	bf00      	nop
 8000846:	e008      	b.n	800085a <fsm_auto_run+0x472>
		break;
 8000848:	bf00      	nop
 800084a:	e006      	b.n	800085a <fsm_auto_run+0x472>
		break;
 800084c:	bf00      	nop
 800084e:	e004      	b.n	800085a <fsm_auto_run+0x472>
		break;
 8000850:	bf00      	nop
 8000852:	e002      	b.n	800085a <fsm_auto_run+0x472>
		break;
 8000854:	bf00      	nop
 8000856:	e000      	b.n	800085a <fsm_auto_run+0x472>
		break;
 8000858:	bf00      	nop
	}
}
 800085a:	bf00      	nop
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	200001ec 	.word	0x200001ec
 8000864:	2000007c 	.word	0x2000007c
 8000868:	20000078 	.word	0x20000078
 800086c:	2000014c 	.word	0x2000014c
 8000870:	20000148 	.word	0x20000148
 8000874:	20000144 	.word	0x20000144
 8000878:	20000140 	.word	0x20000140
 800087c:	40011000 	.word	0x40011000

08000880 <fsm_manual_run>:
 *      Author: USER
 */

#include "fsm_manual.h"

void fsm_manual_run(){
 8000880:	b580      	push	{r7, lr}
 8000882:	af00      	add	r7, sp, #0
	switch(status){
 8000884:	4b41      	ldr	r3, [pc, #260]	; (800098c <fsm_manual_run+0x10c>)
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	2b20      	cmp	r3, #32
 800088a:	d002      	beq.n	8000892 <fsm_manual_run+0x12>
 800088c:	2b21      	cmp	r3, #33	; 0x21
 800088e:	d03c      	beq.n	800090a <fsm_manual_run+0x8a>
//	    //lcd_clear_display();
//	    	lcd_goto_XY(1, 0);
//	    	lcd_send_string("    MANUAL       ");
		break;
	default:
		break;
 8000890:	e07a      	b.n	8000988 <fsm_manual_run+0x108>
		manual_green_red();
 8000892:	f000 fbf5 	bl	8001080 <manual_green_red>
		if(isButtonPressed(0) || isButtonLongPressed(0)){
 8000896:	2000      	movs	r0, #0
 8000898:	f7ff fc58 	bl	800014c <isButtonPressed>
 800089c:	4603      	mov	r3, r0
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d105      	bne.n	80008ae <fsm_manual_run+0x2e>
 80008a2:	2000      	movs	r0, #0
 80008a4:	f7ff fc76 	bl	8000194 <isButtonLongPressed>
 80008a8:	4603      	mov	r3, r0
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d004      	beq.n	80008b8 <fsm_manual_run+0x38>
			HAL_GPIO_TogglePin(SIGNAL_BUTTON_GPIO_Port, SIGNAL_BUTTON_Pin);
 80008ae:	f44f 7100 	mov.w	r1, #512	; 0x200
 80008b2:	4837      	ldr	r0, [pc, #220]	; (8000990 <fsm_manual_run+0x110>)
 80008b4:	f001 fb33 	bl	8001f1e <HAL_GPIO_TogglePin>
		if(isButtonPressed(1) || isButtonLongPressed(1)){
 80008b8:	2001      	movs	r0, #1
 80008ba:	f7ff fc47 	bl	800014c <isButtonPressed>
 80008be:	4603      	mov	r3, r0
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d105      	bne.n	80008d0 <fsm_manual_run+0x50>
 80008c4:	2001      	movs	r0, #1
 80008c6:	f7ff fc65 	bl	8000194 <isButtonLongPressed>
 80008ca:	4603      	mov	r3, r0
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d007      	beq.n	80008e0 <fsm_manual_run+0x60>
			HAL_GPIO_TogglePin(SIGNAL_BUTTON_GPIO_Port, SIGNAL_BUTTON_Pin);
 80008d0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80008d4:	482e      	ldr	r0, [pc, #184]	; (8000990 <fsm_manual_run+0x110>)
 80008d6:	f001 fb22 	bl	8001f1e <HAL_GPIO_TogglePin>
			status = MANUAL_RED_GREEN;
 80008da:	4b2c      	ldr	r3, [pc, #176]	; (800098c <fsm_manual_run+0x10c>)
 80008dc:	2221      	movs	r2, #33	; 0x21
 80008de:	601a      	str	r2, [r3, #0]
		if(isButtonPressed(2) || isButtonLongPressed(2)){
 80008e0:	2002      	movs	r0, #2
 80008e2:	f7ff fc33 	bl	800014c <isButtonPressed>
 80008e6:	4603      	mov	r3, r0
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d105      	bne.n	80008f8 <fsm_manual_run+0x78>
 80008ec:	2002      	movs	r0, #2
 80008ee:	f7ff fc51 	bl	8000194 <isButtonLongPressed>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d044      	beq.n	8000982 <fsm_manual_run+0x102>
			HAL_GPIO_TogglePin(SIGNAL_BUTTON_GPIO_Port, SIGNAL_BUTTON_Pin);
 80008f8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80008fc:	4824      	ldr	r0, [pc, #144]	; (8000990 <fsm_manual_run+0x110>)
 80008fe:	f001 fb0e 	bl	8001f1e <HAL_GPIO_TogglePin>
			status = INIT;
 8000902:	4b22      	ldr	r3, [pc, #136]	; (800098c <fsm_manual_run+0x10c>)
 8000904:	2201      	movs	r2, #1
 8000906:	601a      	str	r2, [r3, #0]
		break;
 8000908:	e03b      	b.n	8000982 <fsm_manual_run+0x102>
		manual_red_green();
 800090a:	f000 fbdd 	bl	80010c8 <manual_red_green>
		if(isButtonPressed(0) || isButtonLongPressed(0)){
 800090e:	2000      	movs	r0, #0
 8000910:	f7ff fc1c 	bl	800014c <isButtonPressed>
 8000914:	4603      	mov	r3, r0
 8000916:	2b00      	cmp	r3, #0
 8000918:	d105      	bne.n	8000926 <fsm_manual_run+0xa6>
 800091a:	2000      	movs	r0, #0
 800091c:	f7ff fc3a 	bl	8000194 <isButtonLongPressed>
 8000920:	4603      	mov	r3, r0
 8000922:	2b00      	cmp	r3, #0
 8000924:	d004      	beq.n	8000930 <fsm_manual_run+0xb0>
			HAL_GPIO_TogglePin(SIGNAL_BUTTON_GPIO_Port, SIGNAL_BUTTON_Pin);
 8000926:	f44f 7100 	mov.w	r1, #512	; 0x200
 800092a:	4819      	ldr	r0, [pc, #100]	; (8000990 <fsm_manual_run+0x110>)
 800092c:	f001 faf7 	bl	8001f1e <HAL_GPIO_TogglePin>
		if(isButtonPressed(1) || isButtonLongPressed(1)){
 8000930:	2001      	movs	r0, #1
 8000932:	f7ff fc0b 	bl	800014c <isButtonPressed>
 8000936:	4603      	mov	r3, r0
 8000938:	2b00      	cmp	r3, #0
 800093a:	d105      	bne.n	8000948 <fsm_manual_run+0xc8>
 800093c:	2001      	movs	r0, #1
 800093e:	f7ff fc29 	bl	8000194 <isButtonLongPressed>
 8000942:	4603      	mov	r3, r0
 8000944:	2b00      	cmp	r3, #0
 8000946:	d007      	beq.n	8000958 <fsm_manual_run+0xd8>
			HAL_GPIO_TogglePin(SIGNAL_BUTTON_GPIO_Port, SIGNAL_BUTTON_Pin);
 8000948:	f44f 7100 	mov.w	r1, #512	; 0x200
 800094c:	4810      	ldr	r0, [pc, #64]	; (8000990 <fsm_manual_run+0x110>)
 800094e:	f001 fae6 	bl	8001f1e <HAL_GPIO_TogglePin>
			status = MANUAL_GREEN_RED;
 8000952:	4b0e      	ldr	r3, [pc, #56]	; (800098c <fsm_manual_run+0x10c>)
 8000954:	2220      	movs	r2, #32
 8000956:	601a      	str	r2, [r3, #0]
		if(isButtonPressed(2) || isButtonLongPressed(2)){
 8000958:	2002      	movs	r0, #2
 800095a:	f7ff fbf7 	bl	800014c <isButtonPressed>
 800095e:	4603      	mov	r3, r0
 8000960:	2b00      	cmp	r3, #0
 8000962:	d105      	bne.n	8000970 <fsm_manual_run+0xf0>
 8000964:	2002      	movs	r0, #2
 8000966:	f7ff fc15 	bl	8000194 <isButtonLongPressed>
 800096a:	4603      	mov	r3, r0
 800096c:	2b00      	cmp	r3, #0
 800096e:	d00a      	beq.n	8000986 <fsm_manual_run+0x106>
			HAL_GPIO_TogglePin(SIGNAL_BUTTON_GPIO_Port, SIGNAL_BUTTON_Pin);
 8000970:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000974:	4806      	ldr	r0, [pc, #24]	; (8000990 <fsm_manual_run+0x110>)
 8000976:	f001 fad2 	bl	8001f1e <HAL_GPIO_TogglePin>
			status = INIT;
 800097a:	4b04      	ldr	r3, [pc, #16]	; (800098c <fsm_manual_run+0x10c>)
 800097c:	2201      	movs	r2, #1
 800097e:	601a      	str	r2, [r3, #0]
		break;
 8000980:	e001      	b.n	8000986 <fsm_manual_run+0x106>
		break;
 8000982:	bf00      	nop
 8000984:	e000      	b.n	8000988 <fsm_manual_run+0x108>
		break;
 8000986:	bf00      	nop

	}
}
 8000988:	bf00      	nop
 800098a:	bd80      	pop	{r7, pc}
 800098c:	20000140 	.word	0x20000140
 8000990:	40011000 	.word	0x40011000

08000994 <fsm_modify_run>:
extern int TIME_FOR_RED;
extern int TIME_FOR_AMBER;
extern int time_green;
extern int time_red;
extern int time_amber;
void fsm_modify_run(){
 8000994:	b580      	push	{r7, lr}
 8000996:	af00      	add	r7, sp, #0
	switch(status){
 8000998:	4b5c      	ldr	r3, [pc, #368]	; (8000b0c <fsm_modify_run+0x178>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	2b16      	cmp	r3, #22
 800099e:	d002      	beq.n	80009a6 <fsm_modify_run+0x12>
 80009a0:	2b17      	cmp	r3, #23
 80009a2:	d057      	beq.n	8000a54 <fsm_modify_run+0xc0>
//			newTime = 0;
//			status = INIT;
//		}
//		break;
	default:
		break;
 80009a4:	e0b0      	b.n	8000b08 <fsm_modify_run+0x174>
		modify_red_led();
 80009a6:	f000 fac7 	bl	8000f38 <modify_red_led>
		if(isButtonPressed(0) || isButtonLongPressed(0)){
 80009aa:	2000      	movs	r0, #0
 80009ac:	f7ff fbce 	bl	800014c <isButtonPressed>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d105      	bne.n	80009c2 <fsm_modify_run+0x2e>
 80009b6:	2000      	movs	r0, #0
 80009b8:	f7ff fbec 	bl	8000194 <isButtonLongPressed>
 80009bc:	4603      	mov	r3, r0
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d00f      	beq.n	80009e2 <fsm_modify_run+0x4e>
			HAL_GPIO_TogglePin(SIGNAL_BUTTON_GPIO_Port, SIGNAL_BUTTON_Pin);
 80009c2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009c6:	4852      	ldr	r0, [pc, #328]	; (8000b10 <fsm_modify_run+0x17c>)
 80009c8:	f001 faa9 	bl	8001f1e <HAL_GPIO_TogglePin>
			status = MODIFY_GREEN;
 80009cc:	4b4f      	ldr	r3, [pc, #316]	; (8000b0c <fsm_modify_run+0x178>)
 80009ce:	2217      	movs	r2, #23
 80009d0:	601a      	str	r2, [r3, #0]
			setTimer(3, 500); // timer for bliking led 2hz on mode modify
 80009d2:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80009d6:	2003      	movs	r0, #3
 80009d8:	f000 fd22 	bl	8001420 <setTimer>
			newTime = 0;
 80009dc:	4b4d      	ldr	r3, [pc, #308]	; (8000b14 <fsm_modify_run+0x180>)
 80009de:	2200      	movs	r2, #0
 80009e0:	601a      	str	r2, [r3, #0]
		if(isButtonPressed(1) || isButtonLongPressed(1)){
 80009e2:	2001      	movs	r0, #1
 80009e4:	f7ff fbb2 	bl	800014c <isButtonPressed>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d105      	bne.n	80009fa <fsm_modify_run+0x66>
 80009ee:	2001      	movs	r0, #1
 80009f0:	f7ff fbd0 	bl	8000194 <isButtonLongPressed>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d010      	beq.n	8000a1c <fsm_modify_run+0x88>
			HAL_GPIO_TogglePin(SIGNAL_BUTTON_GPIO_Port, SIGNAL_BUTTON_Pin);
 80009fa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009fe:	4844      	ldr	r0, [pc, #272]	; (8000b10 <fsm_modify_run+0x17c>)
 8000a00:	f001 fa8d 	bl	8001f1e <HAL_GPIO_TogglePin>
			newTime++;
 8000a04:	4b43      	ldr	r3, [pc, #268]	; (8000b14 <fsm_modify_run+0x180>)
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	3301      	adds	r3, #1
 8000a0a:	4a42      	ldr	r2, [pc, #264]	; (8000b14 <fsm_modify_run+0x180>)
 8000a0c:	6013      	str	r3, [r2, #0]
			if(newTime > 99){
 8000a0e:	4b41      	ldr	r3, [pc, #260]	; (8000b14 <fsm_modify_run+0x180>)
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	2b63      	cmp	r3, #99	; 0x63
 8000a14:	dd02      	ble.n	8000a1c <fsm_modify_run+0x88>
				newTime = 0;
 8000a16:	4b3f      	ldr	r3, [pc, #252]	; (8000b14 <fsm_modify_run+0x180>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	601a      	str	r2, [r3, #0]
		if(isButtonPressed(2) || isButtonLongPressed(2)){
 8000a1c:	2002      	movs	r0, #2
 8000a1e:	f7ff fb95 	bl	800014c <isButtonPressed>
 8000a22:	4603      	mov	r3, r0
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d105      	bne.n	8000a34 <fsm_modify_run+0xa0>
 8000a28:	2002      	movs	r0, #2
 8000a2a:	f7ff fbb3 	bl	8000194 <isButtonLongPressed>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d066      	beq.n	8000b02 <fsm_modify_run+0x16e>
			HAL_GPIO_TogglePin(SIGNAL_BUTTON_GPIO_Port, SIGNAL_BUTTON_Pin);
 8000a34:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a38:	4835      	ldr	r0, [pc, #212]	; (8000b10 <fsm_modify_run+0x17c>)
 8000a3a:	f001 fa70 	bl	8001f1e <HAL_GPIO_TogglePin>
			TIME_FOR_RED = newTime;
 8000a3e:	4b35      	ldr	r3, [pc, #212]	; (8000b14 <fsm_modify_run+0x180>)
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	4a35      	ldr	r2, [pc, #212]	; (8000b18 <fsm_modify_run+0x184>)
 8000a44:	6013      	str	r3, [r2, #0]
			newTime = 0;
 8000a46:	4b33      	ldr	r3, [pc, #204]	; (8000b14 <fsm_modify_run+0x180>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	601a      	str	r2, [r3, #0]
			status = MODIFY_GREEN;
 8000a4c:	4b2f      	ldr	r3, [pc, #188]	; (8000b0c <fsm_modify_run+0x178>)
 8000a4e:	2217      	movs	r2, #23
 8000a50:	601a      	str	r2, [r3, #0]
		break;
 8000a52:	e056      	b.n	8000b02 <fsm_modify_run+0x16e>
		modify_green_led();
 8000a54:	f000 fab4 	bl	8000fc0 <modify_green_led>
		if(isButtonPressed(0) || isButtonLongPressed(0)){
 8000a58:	2000      	movs	r0, #0
 8000a5a:	f7ff fb77 	bl	800014c <isButtonPressed>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d105      	bne.n	8000a70 <fsm_modify_run+0xdc>
 8000a64:	2000      	movs	r0, #0
 8000a66:	f7ff fb95 	bl	8000194 <isButtonLongPressed>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d00f      	beq.n	8000a90 <fsm_modify_run+0xfc>
			HAL_GPIO_TogglePin(SIGNAL_BUTTON_GPIO_Port, SIGNAL_BUTTON_Pin);
 8000a70:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a74:	4826      	ldr	r0, [pc, #152]	; (8000b10 <fsm_modify_run+0x17c>)
 8000a76:	f001 fa52 	bl	8001f1e <HAL_GPIO_TogglePin>
			status = MODIFY_AMBER;
 8000a7a:	4b24      	ldr	r3, [pc, #144]	; (8000b0c <fsm_modify_run+0x178>)
 8000a7c:	2218      	movs	r2, #24
 8000a7e:	601a      	str	r2, [r3, #0]
			setTimer(3, 500); // timer for bliking led 2hz on mode modify
 8000a80:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000a84:	2003      	movs	r0, #3
 8000a86:	f000 fccb 	bl	8001420 <setTimer>
			newTime = 0;
 8000a8a:	4b22      	ldr	r3, [pc, #136]	; (8000b14 <fsm_modify_run+0x180>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	601a      	str	r2, [r3, #0]
		if(isButtonPressed(1) || isButtonLongPressed(1)){
 8000a90:	2001      	movs	r0, #1
 8000a92:	f7ff fb5b 	bl	800014c <isButtonPressed>
 8000a96:	4603      	mov	r3, r0
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d105      	bne.n	8000aa8 <fsm_modify_run+0x114>
 8000a9c:	2001      	movs	r0, #1
 8000a9e:	f7ff fb79 	bl	8000194 <isButtonLongPressed>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d010      	beq.n	8000aca <fsm_modify_run+0x136>
			HAL_GPIO_TogglePin(SIGNAL_BUTTON_GPIO_Port, SIGNAL_BUTTON_Pin);
 8000aa8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000aac:	4818      	ldr	r0, [pc, #96]	; (8000b10 <fsm_modify_run+0x17c>)
 8000aae:	f001 fa36 	bl	8001f1e <HAL_GPIO_TogglePin>
			newTime++;
 8000ab2:	4b18      	ldr	r3, [pc, #96]	; (8000b14 <fsm_modify_run+0x180>)
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	3301      	adds	r3, #1
 8000ab8:	4a16      	ldr	r2, [pc, #88]	; (8000b14 <fsm_modify_run+0x180>)
 8000aba:	6013      	str	r3, [r2, #0]
			if(newTime > 99){
 8000abc:	4b15      	ldr	r3, [pc, #84]	; (8000b14 <fsm_modify_run+0x180>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	2b63      	cmp	r3, #99	; 0x63
 8000ac2:	dd02      	ble.n	8000aca <fsm_modify_run+0x136>
				newTime = 0;
 8000ac4:	4b13      	ldr	r3, [pc, #76]	; (8000b14 <fsm_modify_run+0x180>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	601a      	str	r2, [r3, #0]
		if(isButtonPressed(2) || isButtonLongPressed(2)){
 8000aca:	2002      	movs	r0, #2
 8000acc:	f7ff fb3e 	bl	800014c <isButtonPressed>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d105      	bne.n	8000ae2 <fsm_modify_run+0x14e>
 8000ad6:	2002      	movs	r0, #2
 8000ad8:	f7ff fb5c 	bl	8000194 <isButtonLongPressed>
 8000adc:	4603      	mov	r3, r0
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d011      	beq.n	8000b06 <fsm_modify_run+0x172>
			HAL_GPIO_TogglePin(SIGNAL_BUTTON_GPIO_Port, SIGNAL_BUTTON_Pin);
 8000ae2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ae6:	480a      	ldr	r0, [pc, #40]	; (8000b10 <fsm_modify_run+0x17c>)
 8000ae8:	f001 fa19 	bl	8001f1e <HAL_GPIO_TogglePin>
			TIME_FOR_GREEN = newTime;
 8000aec:	4b09      	ldr	r3, [pc, #36]	; (8000b14 <fsm_modify_run+0x180>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	4a0a      	ldr	r2, [pc, #40]	; (8000b1c <fsm_modify_run+0x188>)
 8000af2:	6013      	str	r3, [r2, #0]
			newTime = 0;
 8000af4:	4b07      	ldr	r3, [pc, #28]	; (8000b14 <fsm_modify_run+0x180>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	601a      	str	r2, [r3, #0]
			status = INIT;
 8000afa:	4b04      	ldr	r3, [pc, #16]	; (8000b0c <fsm_modify_run+0x178>)
 8000afc:	2201      	movs	r2, #1
 8000afe:	601a      	str	r2, [r3, #0]
		break;
 8000b00:	e001      	b.n	8000b06 <fsm_modify_run+0x172>
		break;
 8000b02:	bf00      	nop
 8000b04:	e000      	b.n	8000b08 <fsm_modify_run+0x174>
		break;
 8000b06:	bf00      	nop
	}
}
 8000b08:	bf00      	nop
 8000b0a:	bd80      	pop	{r7, pc}
 8000b0c:	20000140 	.word	0x20000140
 8000b10:	40011000 	.word	0x40011000
 8000b14:	20000120 	.word	0x20000120
 8000b18:	2000007c 	.word	0x2000007c
 8000b1c:	20000078 	.word	0x20000078

08000b20 <display_lcd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD ( 0x21 << 1 ) // change this according to your setup

char buffer[16] = {0};
void display_lcd(int time1, int time2){
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b084      	sub	sp, #16
 8000b24:	af02      	add	r7, sp, #8
 8000b26:	6078      	str	r0, [r7, #4]
 8000b28:	6039      	str	r1, [r7, #0]
//	snprintf(buffer, sizeof(buffer), "mode:%02d",s);
//	lcd_goto_XY(0, 0);
//	lcd_send_string(buffer);
	snprintf(buffer, sizeof(buffer), "1:%02d, 2:%02d    ",time1, time2);
 8000b2a:	683b      	ldr	r3, [r7, #0]
 8000b2c:	9300      	str	r3, [sp, #0]
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	4a0b      	ldr	r2, [pc, #44]	; (8000b60 <display_lcd+0x40>)
 8000b32:	2110      	movs	r1, #16
 8000b34:	480b      	ldr	r0, [pc, #44]	; (8000b64 <display_lcd+0x44>)
 8000b36:	f004 fbd3 	bl	80052e0 <sniprintf>
	lcd_goto_XY(1, 0);
 8000b3a:	2100      	movs	r1, #0
 8000b3c:	2001      	movs	r0, #1
 8000b3e:	f000 f8b8 	bl	8000cb2 <lcd_goto_XY>
	lcd_send_string(buffer);
 8000b42:	4808      	ldr	r0, [pc, #32]	; (8000b64 <display_lcd+0x44>)
 8000b44:	f000 f8a0 	bl	8000c88 <lcd_send_string>
	lcd_goto_XY(0, 0);
 8000b48:	2100      	movs	r1, #0
 8000b4a:	2000      	movs	r0, #0
 8000b4c:	f000 f8b1 	bl	8000cb2 <lcd_goto_XY>
	lcd_send_string("                   ");
 8000b50:	4805      	ldr	r0, [pc, #20]	; (8000b68 <display_lcd+0x48>)
 8000b52:	f000 f899 	bl	8000c88 <lcd_send_string>
}
 8000b56:	bf00      	nop
 8000b58:	3708      	adds	r7, #8
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	08005b94 	.word	0x08005b94
 8000b64:	20000110 	.word	0x20000110
 8000b68:	08005ba8 	.word	0x08005ba8

08000b6c <lcd_send_cmd>:

void lcd_send_cmd (char cmd)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b086      	sub	sp, #24
 8000b70:	af02      	add	r7, sp, #8
 8000b72:	4603      	mov	r3, r0
 8000b74:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000b76:	79fb      	ldrb	r3, [r7, #7]
 8000b78:	f023 030f 	bic.w	r3, r3, #15
 8000b7c:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8000b7e:	79fb      	ldrb	r3, [r7, #7]
 8000b80:	011b      	lsls	r3, r3, #4
 8000b82:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000b84:	7bfb      	ldrb	r3, [r7, #15]
 8000b86:	f043 030c 	orr.w	r3, r3, #12
 8000b8a:	b2db      	uxtb	r3, r3
 8000b8c:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8000b8e:	7bfb      	ldrb	r3, [r7, #15]
 8000b90:	f043 0308 	orr.w	r3, r3, #8
 8000b94:	b2db      	uxtb	r3, r3
 8000b96:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000b98:	7bbb      	ldrb	r3, [r7, #14]
 8000b9a:	f043 030c 	orr.w	r3, r3, #12
 8000b9e:	b2db      	uxtb	r3, r3
 8000ba0:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8000ba2:	7bbb      	ldrb	r3, [r7, #14]
 8000ba4:	f043 0308 	orr.w	r3, r3, #8
 8000ba8:	b2db      	uxtb	r3, r3
 8000baa:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000bac:	f107 0208 	add.w	r2, r7, #8
 8000bb0:	2364      	movs	r3, #100	; 0x64
 8000bb2:	9300      	str	r3, [sp, #0]
 8000bb4:	2304      	movs	r3, #4
 8000bb6:	2142      	movs	r1, #66	; 0x42
 8000bb8:	4803      	ldr	r0, [pc, #12]	; (8000bc8 <lcd_send_cmd+0x5c>)
 8000bba:	f001 fb21 	bl	8002200 <HAL_I2C_Master_Transmit>
}
 8000bbe:	bf00      	nop
 8000bc0:	3710      	adds	r7, #16
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	20000150 	.word	0x20000150

08000bcc <lcd_send_data>:

void lcd_send_data (char data)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b086      	sub	sp, #24
 8000bd0:	af02      	add	r7, sp, #8
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8000bd6:	79fb      	ldrb	r3, [r7, #7]
 8000bd8:	f023 030f 	bic.w	r3, r3, #15
 8000bdc:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8000bde:	79fb      	ldrb	r3, [r7, #7]
 8000be0:	011b      	lsls	r3, r3, #4
 8000be2:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8000be4:	7bfb      	ldrb	r3, [r7, #15]
 8000be6:	f043 030d 	orr.w	r3, r3, #13
 8000bea:	b2db      	uxtb	r3, r3
 8000bec:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8000bee:	7bfb      	ldrb	r3, [r7, #15]
 8000bf0:	f043 0309 	orr.w	r3, r3, #9
 8000bf4:	b2db      	uxtb	r3, r3
 8000bf6:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8000bf8:	7bbb      	ldrb	r3, [r7, #14]
 8000bfa:	f043 030d 	orr.w	r3, r3, #13
 8000bfe:	b2db      	uxtb	r3, r3
 8000c00:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8000c02:	7bbb      	ldrb	r3, [r7, #14]
 8000c04:	f043 0309 	orr.w	r3, r3, #9
 8000c08:	b2db      	uxtb	r3, r3
 8000c0a:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000c0c:	f107 0208 	add.w	r2, r7, #8
 8000c10:	2364      	movs	r3, #100	; 0x64
 8000c12:	9300      	str	r3, [sp, #0]
 8000c14:	2304      	movs	r3, #4
 8000c16:	2142      	movs	r1, #66	; 0x42
 8000c18:	4803      	ldr	r0, [pc, #12]	; (8000c28 <lcd_send_data+0x5c>)
 8000c1a:	f001 faf1 	bl	8002200 <HAL_I2C_Master_Transmit>
}
 8000c1e:	bf00      	nop
 8000c20:	3710      	adds	r7, #16
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	20000150 	.word	0x20000150

08000c2c <lcd_init>:

void lcd_init (void) {
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x33); /* set 4-bits interface */
 8000c30:	2033      	movs	r0, #51	; 0x33
 8000c32:	f7ff ff9b 	bl	8000b6c <lcd_send_cmd>
	lcd_send_cmd (0x32);
 8000c36:	2032      	movs	r0, #50	; 0x32
 8000c38:	f7ff ff98 	bl	8000b6c <lcd_send_cmd>
	HAL_Delay(50);
 8000c3c:	2032      	movs	r0, #50	; 0x32
 8000c3e:	f000 fe03 	bl	8001848 <HAL_Delay>
	lcd_send_cmd (0x28); /* start to set LCD function */
 8000c42:	2028      	movs	r0, #40	; 0x28
 8000c44:	f7ff ff92 	bl	8000b6c <lcd_send_cmd>
	HAL_Delay(50);
 8000c48:	2032      	movs	r0, #50	; 0x32
 8000c4a:	f000 fdfd 	bl	8001848 <HAL_Delay>
	lcd_send_cmd (0x01); /* clear display */
 8000c4e:	2001      	movs	r0, #1
 8000c50:	f7ff ff8c 	bl	8000b6c <lcd_send_cmd>
	HAL_Delay(50);
 8000c54:	2032      	movs	r0, #50	; 0x32
 8000c56:	f000 fdf7 	bl	8001848 <HAL_Delay>
	lcd_send_cmd (0x06); /* set entry mode */
 8000c5a:	2006      	movs	r0, #6
 8000c5c:	f7ff ff86 	bl	8000b6c <lcd_send_cmd>
	HAL_Delay(50);
 8000c60:	2032      	movs	r0, #50	; 0x32
 8000c62:	f000 fdf1 	bl	8001848 <HAL_Delay>
	lcd_send_cmd (0x0c); /* set display to on */
 8000c66:	200c      	movs	r0, #12
 8000c68:	f7ff ff80 	bl	8000b6c <lcd_send_cmd>
	HAL_Delay(50);
 8000c6c:	2032      	movs	r0, #50	; 0x32
 8000c6e:	f000 fdeb 	bl	8001848 <HAL_Delay>
	lcd_send_cmd (0x02); /* move cursor to home and set data address to 0 */
 8000c72:	2002      	movs	r0, #2
 8000c74:	f7ff ff7a 	bl	8000b6c <lcd_send_cmd>
	HAL_Delay(50);
 8000c78:	2032      	movs	r0, #50	; 0x32
 8000c7a:	f000 fde5 	bl	8001848 <HAL_Delay>
	lcd_send_cmd (0x80);
 8000c7e:	2080      	movs	r0, #128	; 0x80
 8000c80:	f7ff ff74 	bl	8000b6c <lcd_send_cmd>
}
 8000c84:	bf00      	nop
 8000c86:	bd80      	pop	{r7, pc}

08000c88 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b082      	sub	sp, #8
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8000c90:	e006      	b.n	8000ca0 <lcd_send_string+0x18>
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	1c5a      	adds	r2, r3, #1
 8000c96:	607a      	str	r2, [r7, #4]
 8000c98:	781b      	ldrb	r3, [r3, #0]
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	f7ff ff96 	bl	8000bcc <lcd_send_data>
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	781b      	ldrb	r3, [r3, #0]
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d1f4      	bne.n	8000c92 <lcd_send_string+0xa>
}
 8000ca8:	bf00      	nop
 8000caa:	bf00      	nop
 8000cac:	3708      	adds	r7, #8
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}

08000cb2 <lcd_goto_XY>:
{
	lcd_send_cmd (0x01); //clear display
}

void lcd_goto_XY (int row, int col)
{
 8000cb2:	b580      	push	{r7, lr}
 8000cb4:	b084      	sub	sp, #16
 8000cb6:	af00      	add	r7, sp, #0
 8000cb8:	6078      	str	r0, [r7, #4]
 8000cba:	6039      	str	r1, [r7, #0]
	uint8_t pos_Addr;
	if(row == 1)
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	2b01      	cmp	r3, #1
 8000cc0:	d108      	bne.n	8000cd4 <lcd_goto_XY+0x22>
	{
		pos_Addr = 0x80 + row - 1 + col;
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	b2da      	uxtb	r2, r3
 8000cc6:	683b      	ldr	r3, [r7, #0]
 8000cc8:	b2db      	uxtb	r3, r3
 8000cca:	4413      	add	r3, r2
 8000ccc:	b2db      	uxtb	r3, r3
 8000cce:	337f      	adds	r3, #127	; 0x7f
 8000cd0:	73fb      	strb	r3, [r7, #15]
 8000cd2:	e008      	b.n	8000ce6 <lcd_goto_XY+0x34>
	}
	else
	{
		pos_Addr = 0x80 | (0x40 + col);
 8000cd4:	683b      	ldr	r3, [r7, #0]
 8000cd6:	b2db      	uxtb	r3, r3
 8000cd8:	3340      	adds	r3, #64	; 0x40
 8000cda:	b2db      	uxtb	r3, r3
 8000cdc:	b25b      	sxtb	r3, r3
 8000cde:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000ce2:	b25b      	sxtb	r3, r3
 8000ce4:	73fb      	strb	r3, [r7, #15]
	}
	lcd_send_cmd(pos_Addr);
 8000ce6:	7bfb      	ldrb	r3, [r7, #15]
 8000ce8:	4618      	mov	r0, r3
 8000cea:	f7ff ff3f 	bl	8000b6c <lcd_send_cmd>
}
 8000cee:	bf00      	nop
 8000cf0:	3710      	adds	r7, #16
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}
	...

08000cf8 <init>:
int time_red;
int time_green;
int time_amber;
int newTime = 0;

void init(){
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0
	// HAL_GPIO_TogglePin(GPIOA, SIGNAL_Pin);
	if(TIME_FOR_GREEN < TIME_FOR_RED){
 8000cfc:	4b11      	ldr	r3, [pc, #68]	; (8000d44 <init+0x4c>)
 8000cfe:	681a      	ldr	r2, [r3, #0]
 8000d00:	4b11      	ldr	r3, [pc, #68]	; (8000d48 <init+0x50>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	429a      	cmp	r2, r3
 8000d06:	da10      	bge.n	8000d2a <init+0x32>
		 time_red = TIME_FOR_RED;
 8000d08:	4b0f      	ldr	r3, [pc, #60]	; (8000d48 <init+0x50>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	4a0f      	ldr	r2, [pc, #60]	; (8000d4c <init+0x54>)
 8000d0e:	6013      	str	r3, [r2, #0]
		 time_green = TIME_FOR_GREEN;
 8000d10:	4b0c      	ldr	r3, [pc, #48]	; (8000d44 <init+0x4c>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	4a0e      	ldr	r2, [pc, #56]	; (8000d50 <init+0x58>)
 8000d16:	6013      	str	r3, [r2, #0]
		 time_amber = TIME_FOR_RED - TIME_FOR_GREEN - 1;
 8000d18:	4b0b      	ldr	r3, [pc, #44]	; (8000d48 <init+0x50>)
 8000d1a:	681a      	ldr	r2, [r3, #0]
 8000d1c:	4b09      	ldr	r3, [pc, #36]	; (8000d44 <init+0x4c>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	1ad3      	subs	r3, r2, r3
 8000d22:	3b01      	subs	r3, #1
 8000d24:	4a0b      	ldr	r2, [pc, #44]	; (8000d54 <init+0x5c>)
 8000d26:	6013      	str	r3, [r2, #0]
	else {
	 time_red = 5;
	 time_green = 3;
	 time_amber = 2;
	}
}
 8000d28:	e008      	b.n	8000d3c <init+0x44>
	 time_red = 5;
 8000d2a:	4b08      	ldr	r3, [pc, #32]	; (8000d4c <init+0x54>)
 8000d2c:	2205      	movs	r2, #5
 8000d2e:	601a      	str	r2, [r3, #0]
	 time_green = 3;
 8000d30:	4b07      	ldr	r3, [pc, #28]	; (8000d50 <init+0x58>)
 8000d32:	2203      	movs	r2, #3
 8000d34:	601a      	str	r2, [r3, #0]
	 time_amber = 2;
 8000d36:	4b07      	ldr	r3, [pc, #28]	; (8000d54 <init+0x5c>)
 8000d38:	2202      	movs	r2, #2
 8000d3a:	601a      	str	r2, [r3, #0]
}
 8000d3c:	bf00      	nop
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bc80      	pop	{r7}
 8000d42:	4770      	bx	lr
 8000d44:	20000078 	.word	0x20000078
 8000d48:	2000007c 	.word	0x2000007c
 8000d4c:	20000148 	.word	0x20000148
 8000d50:	20000144 	.word	0x20000144
 8000d54:	2000014c 	.word	0x2000014c

08000d58 <auto_green_red>:
void auto_green_red(){
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(LED0_A_GPIO_Port, LED0_A_Pin, RESET);
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	2120      	movs	r1, #32
 8000d60:	4817      	ldr	r0, [pc, #92]	; (8000dc0 <auto_green_red+0x68>)
 8000d62:	f001 f8c4 	bl	8001eee <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED0_B_GPIO_Port, LED0_B_Pin, SET);
 8000d66:	2201      	movs	r2, #1
 8000d68:	2108      	movs	r1, #8
 8000d6a:	4815      	ldr	r0, [pc, #84]	; (8000dc0 <auto_green_red+0x68>)
 8000d6c:	f001 f8bf 	bl	8001eee <HAL_GPIO_WritePin>


	HAL_GPIO_WritePin(LED1_A_GPIO_Port, LED1_A_Pin, SET);
 8000d70:	2201      	movs	r2, #1
 8000d72:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d76:	4812      	ldr	r0, [pc, #72]	; (8000dc0 <auto_green_red+0x68>)
 8000d78:	f001 f8b9 	bl	8001eee <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED1_B_GPIO_Port, LED1_B_Pin, SET);
 8000d7c:	2201      	movs	r2, #1
 8000d7e:	2110      	movs	r1, #16
 8000d80:	480f      	ldr	r0, [pc, #60]	; (8000dc0 <auto_green_red+0x68>)
 8000d82:	f001 f8b4 	bl	8001eee <HAL_GPIO_WritePin>



//	update_led_buffer_A(time_green);
//	update_led_buffer_B(time_red);
	display_lcd(time_green, time_red);
 8000d86:	4b0f      	ldr	r3, [pc, #60]	; (8000dc4 <auto_green_red+0x6c>)
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	4a0f      	ldr	r2, [pc, #60]	; (8000dc8 <auto_green_red+0x70>)
 8000d8c:	6812      	ldr	r2, [r2, #0]
 8000d8e:	4611      	mov	r1, r2
 8000d90:	4618      	mov	r0, r3
 8000d92:	f7ff fec5 	bl	8000b20 <display_lcd>
	if(timers[1].flag == 1) // flag for display 7
 8000d96:	4b0d      	ldr	r3, [pc, #52]	; (8000dcc <auto_green_red+0x74>)
 8000d98:	68db      	ldr	r3, [r3, #12]
 8000d9a:	2b01      	cmp	r3, #1
 8000d9c:	d10e      	bne.n	8000dbc <auto_green_red+0x64>
		{
			time_green--;
 8000d9e:	4b09      	ldr	r3, [pc, #36]	; (8000dc4 <auto_green_red+0x6c>)
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	3b01      	subs	r3, #1
 8000da4:	4a07      	ldr	r2, [pc, #28]	; (8000dc4 <auto_green_red+0x6c>)
 8000da6:	6013      	str	r3, [r2, #0]
			time_red--;
 8000da8:	4b07      	ldr	r3, [pc, #28]	; (8000dc8 <auto_green_red+0x70>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	3b01      	subs	r3, #1
 8000dae:	4a06      	ldr	r2, [pc, #24]	; (8000dc8 <auto_green_red+0x70>)
 8000db0:	6013      	str	r3, [r2, #0]
			setTimer(1, 1000);
 8000db2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000db6:	2001      	movs	r0, #1
 8000db8:	f000 fb32 	bl	8001420 <setTimer>
		}
}
 8000dbc:	bf00      	nop
 8000dbe:	bd80      	pop	{r7, pc}
 8000dc0:	40010c00 	.word	0x40010c00
 8000dc4:	20000144 	.word	0x20000144
 8000dc8:	20000148 	.word	0x20000148
 8000dcc:	200001ec 	.word	0x200001ec

08000dd0 <auto_amber_red>:
void auto_amber_red(){
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(LED0_A_GPIO_Port, LED0_A_Pin, SET);
 8000dd4:	2201      	movs	r2, #1
 8000dd6:	2120      	movs	r1, #32
 8000dd8:	4817      	ldr	r0, [pc, #92]	; (8000e38 <auto_amber_red+0x68>)
 8000dda:	f001 f888 	bl	8001eee <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED0_B_GPIO_Port, LED0_B_Pin, RESET);
 8000dde:	2200      	movs	r2, #0
 8000de0:	2108      	movs	r1, #8
 8000de2:	4815      	ldr	r0, [pc, #84]	; (8000e38 <auto_amber_red+0x68>)
 8000de4:	f001 f883 	bl	8001eee <HAL_GPIO_WritePin>


	HAL_GPIO_WritePin(LED1_A_GPIO_Port, LED1_A_Pin, SET);
 8000de8:	2201      	movs	r2, #1
 8000dea:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000dee:	4812      	ldr	r0, [pc, #72]	; (8000e38 <auto_amber_red+0x68>)
 8000df0:	f001 f87d 	bl	8001eee <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED1_B_GPIO_Port, LED1_B_Pin, SET);
 8000df4:	2201      	movs	r2, #1
 8000df6:	2110      	movs	r1, #16
 8000df8:	480f      	ldr	r0, [pc, #60]	; (8000e38 <auto_amber_red+0x68>)
 8000dfa:	f001 f878 	bl	8001eee <HAL_GPIO_WritePin>


//	update_led_buffer_A(time_amber);
//	update_led_buffer_B(time_red);
	display_lcd(time_amber, time_red);
 8000dfe:	4b0f      	ldr	r3, [pc, #60]	; (8000e3c <auto_amber_red+0x6c>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	4a0f      	ldr	r2, [pc, #60]	; (8000e40 <auto_amber_red+0x70>)
 8000e04:	6812      	ldr	r2, [r2, #0]
 8000e06:	4611      	mov	r1, r2
 8000e08:	4618      	mov	r0, r3
 8000e0a:	f7ff fe89 	bl	8000b20 <display_lcd>
	if(timers[1].flag == 1) // flag for display 7
 8000e0e:	4b0d      	ldr	r3, [pc, #52]	; (8000e44 <auto_amber_red+0x74>)
 8000e10:	68db      	ldr	r3, [r3, #12]
 8000e12:	2b01      	cmp	r3, #1
 8000e14:	d10e      	bne.n	8000e34 <auto_amber_red+0x64>
		{
			time_amber--;
 8000e16:	4b09      	ldr	r3, [pc, #36]	; (8000e3c <auto_amber_red+0x6c>)
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	3b01      	subs	r3, #1
 8000e1c:	4a07      	ldr	r2, [pc, #28]	; (8000e3c <auto_amber_red+0x6c>)
 8000e1e:	6013      	str	r3, [r2, #0]
			time_red--;
 8000e20:	4b07      	ldr	r3, [pc, #28]	; (8000e40 <auto_amber_red+0x70>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	3b01      	subs	r3, #1
 8000e26:	4a06      	ldr	r2, [pc, #24]	; (8000e40 <auto_amber_red+0x70>)
 8000e28:	6013      	str	r3, [r2, #0]
			setTimer(1, 1000);
 8000e2a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000e2e:	2001      	movs	r0, #1
 8000e30:	f000 faf6 	bl	8001420 <setTimer>
		}
}
 8000e34:	bf00      	nop
 8000e36:	bd80      	pop	{r7, pc}
 8000e38:	40010c00 	.word	0x40010c00
 8000e3c:	2000014c 	.word	0x2000014c
 8000e40:	20000148 	.word	0x20000148
 8000e44:	200001ec 	.word	0x200001ec

08000e48 <auto_red_green>:
void auto_red_green(){
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(LED0_A_GPIO_Port, LED0_A_Pin, SET);
 8000e4c:	2201      	movs	r2, #1
 8000e4e:	2120      	movs	r1, #32
 8000e50:	4817      	ldr	r0, [pc, #92]	; (8000eb0 <auto_red_green+0x68>)
 8000e52:	f001 f84c 	bl	8001eee <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED0_B_GPIO_Port, LED0_B_Pin, SET);
 8000e56:	2201      	movs	r2, #1
 8000e58:	2108      	movs	r1, #8
 8000e5a:	4815      	ldr	r0, [pc, #84]	; (8000eb0 <auto_red_green+0x68>)
 8000e5c:	f001 f847 	bl	8001eee <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LED1_A_GPIO_Port, LED1_A_Pin, RESET);
 8000e60:	2200      	movs	r2, #0
 8000e62:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e66:	4812      	ldr	r0, [pc, #72]	; (8000eb0 <auto_red_green+0x68>)
 8000e68:	f001 f841 	bl	8001eee <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED1_B_GPIO_Port, LED1_B_Pin, SET);
 8000e6c:	2201      	movs	r2, #1
 8000e6e:	2110      	movs	r1, #16
 8000e70:	480f      	ldr	r0, [pc, #60]	; (8000eb0 <auto_red_green+0x68>)
 8000e72:	f001 f83c 	bl	8001eee <HAL_GPIO_WritePin>


//	update_led_buffer_A(time_red);
//	update_led_buffer_B(time_green);
	display_lcd(time_red, time_green);
 8000e76:	4b0f      	ldr	r3, [pc, #60]	; (8000eb4 <auto_red_green+0x6c>)
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	4a0f      	ldr	r2, [pc, #60]	; (8000eb8 <auto_red_green+0x70>)
 8000e7c:	6812      	ldr	r2, [r2, #0]
 8000e7e:	4611      	mov	r1, r2
 8000e80:	4618      	mov	r0, r3
 8000e82:	f7ff fe4d 	bl	8000b20 <display_lcd>
	if(timers[1].flag == 1) // flag for display 7
 8000e86:	4b0d      	ldr	r3, [pc, #52]	; (8000ebc <auto_red_green+0x74>)
 8000e88:	68db      	ldr	r3, [r3, #12]
 8000e8a:	2b01      	cmp	r3, #1
 8000e8c:	d10e      	bne.n	8000eac <auto_red_green+0x64>
		{
			time_red--;
 8000e8e:	4b09      	ldr	r3, [pc, #36]	; (8000eb4 <auto_red_green+0x6c>)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	3b01      	subs	r3, #1
 8000e94:	4a07      	ldr	r2, [pc, #28]	; (8000eb4 <auto_red_green+0x6c>)
 8000e96:	6013      	str	r3, [r2, #0]
			time_green--;
 8000e98:	4b07      	ldr	r3, [pc, #28]	; (8000eb8 <auto_red_green+0x70>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	3b01      	subs	r3, #1
 8000e9e:	4a06      	ldr	r2, [pc, #24]	; (8000eb8 <auto_red_green+0x70>)
 8000ea0:	6013      	str	r3, [r2, #0]
			setTimer(1, 1000);
 8000ea2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000ea6:	2001      	movs	r0, #1
 8000ea8:	f000 faba 	bl	8001420 <setTimer>
		}
}
 8000eac:	bf00      	nop
 8000eae:	bd80      	pop	{r7, pc}
 8000eb0:	40010c00 	.word	0x40010c00
 8000eb4:	20000148 	.word	0x20000148
 8000eb8:	20000144 	.word	0x20000144
 8000ebc:	200001ec 	.word	0x200001ec

08000ec0 <auto_red_amber>:
void auto_red_amber(){
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(LED0_A_GPIO_Port, LED0_A_Pin, SET);
 8000ec4:	2201      	movs	r2, #1
 8000ec6:	2120      	movs	r1, #32
 8000ec8:	4817      	ldr	r0, [pc, #92]	; (8000f28 <auto_red_amber+0x68>)
 8000eca:	f001 f810 	bl	8001eee <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED0_B_GPIO_Port, LED0_B_Pin, SET);
 8000ece:	2201      	movs	r2, #1
 8000ed0:	2108      	movs	r1, #8
 8000ed2:	4815      	ldr	r0, [pc, #84]	; (8000f28 <auto_red_amber+0x68>)
 8000ed4:	f001 f80b 	bl	8001eee <HAL_GPIO_WritePin>


	HAL_GPIO_WritePin(LED1_A_GPIO_Port, LED1_A_Pin, SET);
 8000ed8:	2201      	movs	r2, #1
 8000eda:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ede:	4812      	ldr	r0, [pc, #72]	; (8000f28 <auto_red_amber+0x68>)
 8000ee0:	f001 f805 	bl	8001eee <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED1_B_GPIO_Port, LED1_B_Pin, RESET);
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	2110      	movs	r1, #16
 8000ee8:	480f      	ldr	r0, [pc, #60]	; (8000f28 <auto_red_amber+0x68>)
 8000eea:	f001 f800 	bl	8001eee <HAL_GPIO_WritePin>


//	update_led_buffer_A(time_red);
//	update_led_buffer_B(time_amber);
	display_lcd(time_red, time_amber);
 8000eee:	4b0f      	ldr	r3, [pc, #60]	; (8000f2c <auto_red_amber+0x6c>)
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	4a0f      	ldr	r2, [pc, #60]	; (8000f30 <auto_red_amber+0x70>)
 8000ef4:	6812      	ldr	r2, [r2, #0]
 8000ef6:	4611      	mov	r1, r2
 8000ef8:	4618      	mov	r0, r3
 8000efa:	f7ff fe11 	bl	8000b20 <display_lcd>
	if(timers[1].flag == 1) // flag for display 7
 8000efe:	4b0d      	ldr	r3, [pc, #52]	; (8000f34 <auto_red_amber+0x74>)
 8000f00:	68db      	ldr	r3, [r3, #12]
 8000f02:	2b01      	cmp	r3, #1
 8000f04:	d10e      	bne.n	8000f24 <auto_red_amber+0x64>
		{
			time_red--;
 8000f06:	4b09      	ldr	r3, [pc, #36]	; (8000f2c <auto_red_amber+0x6c>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	3b01      	subs	r3, #1
 8000f0c:	4a07      	ldr	r2, [pc, #28]	; (8000f2c <auto_red_amber+0x6c>)
 8000f0e:	6013      	str	r3, [r2, #0]
			time_amber--;
 8000f10:	4b07      	ldr	r3, [pc, #28]	; (8000f30 <auto_red_amber+0x70>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	3b01      	subs	r3, #1
 8000f16:	4a06      	ldr	r2, [pc, #24]	; (8000f30 <auto_red_amber+0x70>)
 8000f18:	6013      	str	r3, [r2, #0]
			setTimer(1, 1000);
 8000f1a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000f1e:	2001      	movs	r0, #1
 8000f20:	f000 fa7e 	bl	8001420 <setTimer>
		}
}
 8000f24:	bf00      	nop
 8000f26:	bd80      	pop	{r7, pc}
 8000f28:	40010c00 	.word	0x40010c00
 8000f2c:	20000148 	.word	0x20000148
 8000f30:	2000014c 	.word	0x2000014c
 8000f34:	200001ec 	.word	0x200001ec

08000f38 <modify_red_led>:

// use timer 3
char buf[16] = {0};
void modify_red_led(){
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	af00      	add	r7, sp, #0

	if(timers[3].flag == 1){
 8000f3c:	4b1a      	ldr	r3, [pc, #104]	; (8000fa8 <modify_red_led+0x70>)
 8000f3e:	69db      	ldr	r3, [r3, #28]
 8000f40:	2b01      	cmp	r3, #1
 8000f42:	d119      	bne.n	8000f78 <modify_red_led+0x40>

		HAL_GPIO_WritePin(LED0_A_GPIO_Port, LED0_A_Pin, SET);
 8000f44:	2201      	movs	r2, #1
 8000f46:	2120      	movs	r1, #32
 8000f48:	4818      	ldr	r0, [pc, #96]	; (8000fac <modify_red_led+0x74>)
 8000f4a:	f000 ffd0 	bl	8001eee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED0_B_GPIO_Port, LED0_B_Pin, SET);
 8000f4e:	2201      	movs	r2, #1
 8000f50:	2108      	movs	r1, #8
 8000f52:	4816      	ldr	r0, [pc, #88]	; (8000fac <modify_red_led+0x74>)
 8000f54:	f000 ffcb 	bl	8001eee <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(LED1_A_GPIO_Port, LED1_A_Pin, SET);
 8000f58:	2201      	movs	r2, #1
 8000f5a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f5e:	4813      	ldr	r0, [pc, #76]	; (8000fac <modify_red_led+0x74>)
 8000f60:	f000 ffc5 	bl	8001eee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED1_B_GPIO_Port, LED1_B_Pin, SET);
 8000f64:	2201      	movs	r2, #1
 8000f66:	2110      	movs	r1, #16
 8000f68:	4810      	ldr	r0, [pc, #64]	; (8000fac <modify_red_led+0x74>)
 8000f6a:	f000 ffc0 	bl	8001eee <HAL_GPIO_WritePin>

		setTimer(3, 500);
 8000f6e:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000f72:	2003      	movs	r0, #3
 8000f74:	f000 fa54 	bl	8001420 <setTimer>
	}
//	update_led_buffer_B(2); // mode name
//	update_led_buffer_A(newTime); //new time
	lcd_goto_XY(1, 0);
 8000f78:	2100      	movs	r1, #0
 8000f7a:	2001      	movs	r0, #1
 8000f7c:	f7ff fe99 	bl	8000cb2 <lcd_goto_XY>
	   lcd_send_string("    MODIFY        ");
 8000f80:	480b      	ldr	r0, [pc, #44]	; (8000fb0 <modify_red_led+0x78>)
 8000f82:	f7ff fe81 	bl	8000c88 <lcd_send_string>
	snprintf(buf, sizeof(buf), "red:%02d",newTime);
 8000f86:	4b0b      	ldr	r3, [pc, #44]	; (8000fb4 <modify_red_led+0x7c>)
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	4a0b      	ldr	r2, [pc, #44]	; (8000fb8 <modify_red_led+0x80>)
 8000f8c:	2110      	movs	r1, #16
 8000f8e:	480b      	ldr	r0, [pc, #44]	; (8000fbc <modify_red_led+0x84>)
 8000f90:	f004 f9a6 	bl	80052e0 <sniprintf>
	lcd_goto_XY(0, 0);
 8000f94:	2100      	movs	r1, #0
 8000f96:	2000      	movs	r0, #0
 8000f98:	f7ff fe8b 	bl	8000cb2 <lcd_goto_XY>
	lcd_send_string(buf);
 8000f9c:	4807      	ldr	r0, [pc, #28]	; (8000fbc <modify_red_led+0x84>)
 8000f9e:	f7ff fe73 	bl	8000c88 <lcd_send_string>
}
 8000fa2:	bf00      	nop
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	200001ec 	.word	0x200001ec
 8000fac:	40010c00 	.word	0x40010c00
 8000fb0:	08005bbc 	.word	0x08005bbc
 8000fb4:	20000120 	.word	0x20000120
 8000fb8:	08005bd0 	.word	0x08005bd0
 8000fbc:	20000124 	.word	0x20000124

08000fc0 <modify_green_led>:
void modify_green_led(){
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	af00      	add	r7, sp, #0
	if(timers[3].flag == 1){
 8000fc4:	4b1a      	ldr	r3, [pc, #104]	; (8001030 <modify_green_led+0x70>)
 8000fc6:	69db      	ldr	r3, [r3, #28]
 8000fc8:	2b01      	cmp	r3, #1
 8000fca:	d119      	bne.n	8001000 <modify_green_led+0x40>

		HAL_GPIO_WritePin(LED0_A_GPIO_Port, LED0_A_Pin, RESET);
 8000fcc:	2200      	movs	r2, #0
 8000fce:	2120      	movs	r1, #32
 8000fd0:	4818      	ldr	r0, [pc, #96]	; (8001034 <modify_green_led+0x74>)
 8000fd2:	f000 ff8c 	bl	8001eee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED0_B_GPIO_Port, LED0_B_Pin, SET);
 8000fd6:	2201      	movs	r2, #1
 8000fd8:	2108      	movs	r1, #8
 8000fda:	4816      	ldr	r0, [pc, #88]	; (8001034 <modify_green_led+0x74>)
 8000fdc:	f000 ff87 	bl	8001eee <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(LED1_A_GPIO_Port, LED1_A_Pin, RESET);
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000fe6:	4813      	ldr	r0, [pc, #76]	; (8001034 <modify_green_led+0x74>)
 8000fe8:	f000 ff81 	bl	8001eee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED1_B_GPIO_Port, LED1_B_Pin, SET);
 8000fec:	2201      	movs	r2, #1
 8000fee:	2110      	movs	r1, #16
 8000ff0:	4810      	ldr	r0, [pc, #64]	; (8001034 <modify_green_led+0x74>)
 8000ff2:	f000 ff7c 	bl	8001eee <HAL_GPIO_WritePin>

		setTimer(3, 500);
 8000ff6:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000ffa:	2003      	movs	r0, #3
 8000ffc:	f000 fa10 	bl	8001420 <setTimer>
	}
//	update_led_buffer_B(3); // mode name
//	update_led_buffer_A(newTime); // new time
	lcd_goto_XY(1, 0);
 8001000:	2100      	movs	r1, #0
 8001002:	2001      	movs	r0, #1
 8001004:	f7ff fe55 	bl	8000cb2 <lcd_goto_XY>
	   lcd_send_string("    MODIFY        ");
 8001008:	480b      	ldr	r0, [pc, #44]	; (8001038 <modify_green_led+0x78>)
 800100a:	f7ff fe3d 	bl	8000c88 <lcd_send_string>
	snprintf(buf, sizeof(buf), "green:%02d",newTime);
 800100e:	4b0b      	ldr	r3, [pc, #44]	; (800103c <modify_green_led+0x7c>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	4a0b      	ldr	r2, [pc, #44]	; (8001040 <modify_green_led+0x80>)
 8001014:	2110      	movs	r1, #16
 8001016:	480b      	ldr	r0, [pc, #44]	; (8001044 <modify_green_led+0x84>)
 8001018:	f004 f962 	bl	80052e0 <sniprintf>
	lcd_goto_XY(0, 0);
 800101c:	2100      	movs	r1, #0
 800101e:	2000      	movs	r0, #0
 8001020:	f7ff fe47 	bl	8000cb2 <lcd_goto_XY>
	lcd_send_string(buf);
 8001024:	4807      	ldr	r0, [pc, #28]	; (8001044 <modify_green_led+0x84>)
 8001026:	f7ff fe2f 	bl	8000c88 <lcd_send_string>
}
 800102a:	bf00      	nop
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	200001ec 	.word	0x200001ec
 8001034:	40010c00 	.word	0x40010c00
 8001038:	08005bbc 	.word	0x08005bbc
 800103c:	20000120 	.word	0x20000120
 8001040:	08005bdc 	.word	0x08005bdc
 8001044:	20000124 	.word	0x20000124

08001048 <clear_all_led>:
	   lcd_send_string("    MODIFY        ");
	snprintf(buf, sizeof(buf), "amber:%02d",newTime);
	lcd_goto_XY(0, 0);
	lcd_send_string(buf);
}
void clear_all_led(){
 8001048:	b580      	push	{r7, lr}
 800104a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED0_A_GPIO_Port, LED0_A_Pin, RESET);
 800104c:	2200      	movs	r2, #0
 800104e:	2120      	movs	r1, #32
 8001050:	480a      	ldr	r0, [pc, #40]	; (800107c <clear_all_led+0x34>)
 8001052:	f000 ff4c 	bl	8001eee <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED0_B_GPIO_Port, LED0_B_Pin, RESET);
 8001056:	2200      	movs	r2, #0
 8001058:	2108      	movs	r1, #8
 800105a:	4808      	ldr	r0, [pc, #32]	; (800107c <clear_all_led+0x34>)
 800105c:	f000 ff47 	bl	8001eee <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LED1_A_GPIO_Port, LED1_A_Pin, RESET);
 8001060:	2200      	movs	r2, #0
 8001062:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001066:	4805      	ldr	r0, [pc, #20]	; (800107c <clear_all_led+0x34>)
 8001068:	f000 ff41 	bl	8001eee <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED1_B_GPIO_Port, LED1_B_Pin, RESET);
 800106c:	2200      	movs	r2, #0
 800106e:	2110      	movs	r1, #16
 8001070:	4802      	ldr	r0, [pc, #8]	; (800107c <clear_all_led+0x34>)
 8001072:	f000 ff3c 	bl	8001eee <HAL_GPIO_WritePin>


}
 8001076:	bf00      	nop
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	40010c00 	.word	0x40010c00

08001080 <manual_green_red>:
void manual_green_red(){
 8001080:	b580      	push	{r7, lr}
 8001082:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(LED0_A_GPIO_Port, LED0_A_Pin, RESET);
 8001084:	2200      	movs	r2, #0
 8001086:	2120      	movs	r1, #32
 8001088:	480d      	ldr	r0, [pc, #52]	; (80010c0 <manual_green_red+0x40>)
 800108a:	f000 ff30 	bl	8001eee <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED0_B_GPIO_Port, LED0_B_Pin, SET);
 800108e:	2201      	movs	r2, #1
 8001090:	2108      	movs	r1, #8
 8001092:	480b      	ldr	r0, [pc, #44]	; (80010c0 <manual_green_red+0x40>)
 8001094:	f000 ff2b 	bl	8001eee <HAL_GPIO_WritePin>


	HAL_GPIO_WritePin(LED1_A_GPIO_Port, LED1_A_Pin, SET);
 8001098:	2201      	movs	r2, #1
 800109a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800109e:	4808      	ldr	r0, [pc, #32]	; (80010c0 <manual_green_red+0x40>)
 80010a0:	f000 ff25 	bl	8001eee <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED1_B_GPIO_Port, LED1_B_Pin, SET);
 80010a4:	2201      	movs	r2, #1
 80010a6:	2110      	movs	r1, #16
 80010a8:	4805      	ldr	r0, [pc, #20]	; (80010c0 <manual_green_red+0x40>)
 80010aa:	f000 ff20 	bl	8001eee <HAL_GPIO_WritePin>


//	update_led_buffer_B(1); //  mode name
//	update_led_buffer_A(0); //00
//	display();
    	lcd_goto_XY(1, 0);
 80010ae:	2100      	movs	r1, #0
 80010b0:	2001      	movs	r0, #1
 80010b2:	f7ff fdfe 	bl	8000cb2 <lcd_goto_XY>
    	lcd_send_string("    MANUAL1       ");
 80010b6:	4803      	ldr	r0, [pc, #12]	; (80010c4 <manual_green_red+0x44>)
 80010b8:	f7ff fde6 	bl	8000c88 <lcd_send_string>
}
 80010bc:	bf00      	nop
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	40010c00 	.word	0x40010c00
 80010c4:	08005bf4 	.word	0x08005bf4

080010c8 <manual_red_green>:
void manual_red_green(){
 80010c8:	b580      	push	{r7, lr}
 80010ca:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(LED0_A_GPIO_Port, LED0_A_Pin, SET);
 80010cc:	2201      	movs	r2, #1
 80010ce:	2120      	movs	r1, #32
 80010d0:	480d      	ldr	r0, [pc, #52]	; (8001108 <manual_red_green+0x40>)
 80010d2:	f000 ff0c 	bl	8001eee <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED0_B_GPIO_Port, LED0_B_Pin, SET);
 80010d6:	2201      	movs	r2, #1
 80010d8:	2108      	movs	r1, #8
 80010da:	480b      	ldr	r0, [pc, #44]	; (8001108 <manual_red_green+0x40>)
 80010dc:	f000 ff07 	bl	8001eee <HAL_GPIO_WritePin>


	HAL_GPIO_WritePin(LED1_A_GPIO_Port, LED1_A_Pin, RESET);
 80010e0:	2200      	movs	r2, #0
 80010e2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010e6:	4808      	ldr	r0, [pc, #32]	; (8001108 <manual_red_green+0x40>)
 80010e8:	f000 ff01 	bl	8001eee <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED1_B_GPIO_Port, LED1_B_Pin, SET);
 80010ec:	2201      	movs	r2, #1
 80010ee:	2110      	movs	r1, #16
 80010f0:	4805      	ldr	r0, [pc, #20]	; (8001108 <manual_red_green+0x40>)
 80010f2:	f000 fefc 	bl	8001eee <HAL_GPIO_WritePin>


	//update_led_buffer_B(1); //  mode name
	//update_led_buffer_A(0); //00
//	display();
    	lcd_goto_XY(1, 0);
 80010f6:	2100      	movs	r1, #0
 80010f8:	2001      	movs	r0, #1
 80010fa:	f7ff fdda 	bl	8000cb2 <lcd_goto_XY>
    	lcd_send_string("    MANUAL2       ");}
 80010fe:	4803      	ldr	r0, [pc, #12]	; (800110c <manual_red_green+0x44>)
 8001100:	f7ff fdc2 	bl	8000c88 <lcd_send_string>
 8001104:	bf00      	nop
 8001106:	bd80      	pop	{r7, pc}
 8001108:	40010c00 	.word	0x40010c00
 800110c:	08005c08 	.word	0x08005c08

08001110 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001114:	f000 fb36 	bl	8001784 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001118:	f000 f81a 	bl	8001150 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800111c:	f000 f8ce 	bl	80012bc <MX_GPIO_Init>
  MX_TIM2_Init();
 8001120:	f000 f880 	bl	8001224 <MX_TIM2_Init>
  MX_I2C1_Init();
 8001124:	f000 f850 	bl	80011c8 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8001128:	4807      	ldr	r0, [pc, #28]	; (8001148 <main+0x38>)
 800112a:	f003 fd05 	bl	8004b38 <HAL_TIM_Base_Start_IT>
    status = INIT;
 800112e:	4b07      	ldr	r3, [pc, #28]	; (800114c <main+0x3c>)
 8001130:	2201      	movs	r2, #1
 8001132:	601a      	str	r2, [r3, #0]
    lcd_init();
 8001134:	f7ff fd7a 	bl	8000c2c <lcd_init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	fsm_auto_run();
 8001138:	f7ff f956 	bl	80003e8 <fsm_auto_run>
	fsm_modify_run();
 800113c:	f7ff fc2a 	bl	8000994 <fsm_modify_run>
	fsm_manual_run();
 8001140:	f7ff fb9e 	bl	8000880 <fsm_manual_run>
	fsm_auto_run();
 8001144:	e7f8      	b.n	8001138 <main+0x28>
 8001146:	bf00      	nop
 8001148:	200001a4 	.word	0x200001a4
 800114c:	20000140 	.word	0x20000140

08001150 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b090      	sub	sp, #64	; 0x40
 8001154:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001156:	f107 0318 	add.w	r3, r7, #24
 800115a:	2228      	movs	r2, #40	; 0x28
 800115c:	2100      	movs	r1, #0
 800115e:	4618      	mov	r0, r3
 8001160:	f004 f8b6 	bl	80052d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001164:	1d3b      	adds	r3, r7, #4
 8001166:	2200      	movs	r2, #0
 8001168:	601a      	str	r2, [r3, #0]
 800116a:	605a      	str	r2, [r3, #4]
 800116c:	609a      	str	r2, [r3, #8]
 800116e:	60da      	str	r2, [r3, #12]
 8001170:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001172:	2302      	movs	r3, #2
 8001174:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001176:	2301      	movs	r3, #1
 8001178:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800117a:	2310      	movs	r3, #16
 800117c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800117e:	2300      	movs	r3, #0
 8001180:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001182:	f107 0318 	add.w	r3, r7, #24
 8001186:	4618      	mov	r0, r3
 8001188:	f003 f88c 	bl	80042a4 <HAL_RCC_OscConfig>
 800118c:	4603      	mov	r3, r0
 800118e:	2b00      	cmp	r3, #0
 8001190:	d001      	beq.n	8001196 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8001192:	f000 f93f 	bl	8001414 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001196:	230f      	movs	r3, #15
 8001198:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800119a:	2300      	movs	r3, #0
 800119c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800119e:	2300      	movs	r3, #0
 80011a0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80011a2:	2300      	movs	r3, #0
 80011a4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011a6:	2300      	movs	r3, #0
 80011a8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80011aa:	1d3b      	adds	r3, r7, #4
 80011ac:	2100      	movs	r1, #0
 80011ae:	4618      	mov	r0, r3
 80011b0:	f003 faf8 	bl	80047a4 <HAL_RCC_ClockConfig>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d001      	beq.n	80011be <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80011ba:	f000 f92b 	bl	8001414 <Error_Handler>
  }
}
 80011be:	bf00      	nop
 80011c0:	3740      	adds	r7, #64	; 0x40
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
	...

080011c8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80011cc:	4b12      	ldr	r3, [pc, #72]	; (8001218 <MX_I2C1_Init+0x50>)
 80011ce:	4a13      	ldr	r2, [pc, #76]	; (800121c <MX_I2C1_Init+0x54>)
 80011d0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80011d2:	4b11      	ldr	r3, [pc, #68]	; (8001218 <MX_I2C1_Init+0x50>)
 80011d4:	4a12      	ldr	r2, [pc, #72]	; (8001220 <MX_I2C1_Init+0x58>)
 80011d6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80011d8:	4b0f      	ldr	r3, [pc, #60]	; (8001218 <MX_I2C1_Init+0x50>)
 80011da:	2200      	movs	r2, #0
 80011dc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80011de:	4b0e      	ldr	r3, [pc, #56]	; (8001218 <MX_I2C1_Init+0x50>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011e4:	4b0c      	ldr	r3, [pc, #48]	; (8001218 <MX_I2C1_Init+0x50>)
 80011e6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80011ea:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011ec:	4b0a      	ldr	r3, [pc, #40]	; (8001218 <MX_I2C1_Init+0x50>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80011f2:	4b09      	ldr	r3, [pc, #36]	; (8001218 <MX_I2C1_Init+0x50>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011f8:	4b07      	ldr	r3, [pc, #28]	; (8001218 <MX_I2C1_Init+0x50>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011fe:	4b06      	ldr	r3, [pc, #24]	; (8001218 <MX_I2C1_Init+0x50>)
 8001200:	2200      	movs	r2, #0
 8001202:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001204:	4804      	ldr	r0, [pc, #16]	; (8001218 <MX_I2C1_Init+0x50>)
 8001206:	f000 fea3 	bl	8001f50 <HAL_I2C_Init>
 800120a:	4603      	mov	r3, r0
 800120c:	2b00      	cmp	r3, #0
 800120e:	d001      	beq.n	8001214 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001210:	f000 f900 	bl	8001414 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001214:	bf00      	nop
 8001216:	bd80      	pop	{r7, pc}
 8001218:	20000150 	.word	0x20000150
 800121c:	40005400 	.word	0x40005400
 8001220:	000186a0 	.word	0x000186a0

08001224 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b086      	sub	sp, #24
 8001228:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800122a:	f107 0308 	add.w	r3, r7, #8
 800122e:	2200      	movs	r2, #0
 8001230:	601a      	str	r2, [r3, #0]
 8001232:	605a      	str	r2, [r3, #4]
 8001234:	609a      	str	r2, [r3, #8]
 8001236:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001238:	463b      	mov	r3, r7
 800123a:	2200      	movs	r2, #0
 800123c:	601a      	str	r2, [r3, #0]
 800123e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001240:	4b1d      	ldr	r3, [pc, #116]	; (80012b8 <MX_TIM2_Init+0x94>)
 8001242:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001246:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 63999;
 8001248:	4b1b      	ldr	r3, [pc, #108]	; (80012b8 <MX_TIM2_Init+0x94>)
 800124a:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 800124e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001250:	4b19      	ldr	r3, [pc, #100]	; (80012b8 <MX_TIM2_Init+0x94>)
 8001252:	2200      	movs	r2, #0
 8001254:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8001256:	4b18      	ldr	r3, [pc, #96]	; (80012b8 <MX_TIM2_Init+0x94>)
 8001258:	2209      	movs	r2, #9
 800125a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800125c:	4b16      	ldr	r3, [pc, #88]	; (80012b8 <MX_TIM2_Init+0x94>)
 800125e:	2200      	movs	r2, #0
 8001260:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001262:	4b15      	ldr	r3, [pc, #84]	; (80012b8 <MX_TIM2_Init+0x94>)
 8001264:	2200      	movs	r2, #0
 8001266:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001268:	4813      	ldr	r0, [pc, #76]	; (80012b8 <MX_TIM2_Init+0x94>)
 800126a:	f003 fc15 	bl	8004a98 <HAL_TIM_Base_Init>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d001      	beq.n	8001278 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001274:	f000 f8ce 	bl	8001414 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001278:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800127c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800127e:	f107 0308 	add.w	r3, r7, #8
 8001282:	4619      	mov	r1, r3
 8001284:	480c      	ldr	r0, [pc, #48]	; (80012b8 <MX_TIM2_Init+0x94>)
 8001286:	f003 fd99 	bl	8004dbc <HAL_TIM_ConfigClockSource>
 800128a:	4603      	mov	r3, r0
 800128c:	2b00      	cmp	r3, #0
 800128e:	d001      	beq.n	8001294 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001290:	f000 f8c0 	bl	8001414 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001294:	2300      	movs	r3, #0
 8001296:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001298:	2300      	movs	r3, #0
 800129a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800129c:	463b      	mov	r3, r7
 800129e:	4619      	mov	r1, r3
 80012a0:	4805      	ldr	r0, [pc, #20]	; (80012b8 <MX_TIM2_Init+0x94>)
 80012a2:	f003 ff7b 	bl	800519c <HAL_TIMEx_MasterConfigSynchronization>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d001      	beq.n	80012b0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80012ac:	f000 f8b2 	bl	8001414 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80012b0:	bf00      	nop
 80012b2:	3718      	adds	r7, #24
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	200001a4 	.word	0x200001a4

080012bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b088      	sub	sp, #32
 80012c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012c2:	f107 0310 	add.w	r3, r7, #16
 80012c6:	2200      	movs	r2, #0
 80012c8:	601a      	str	r2, [r3, #0]
 80012ca:	605a      	str	r2, [r3, #4]
 80012cc:	609a      	str	r2, [r3, #8]
 80012ce:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012d0:	4b45      	ldr	r3, [pc, #276]	; (80013e8 <MX_GPIO_Init+0x12c>)
 80012d2:	699b      	ldr	r3, [r3, #24]
 80012d4:	4a44      	ldr	r2, [pc, #272]	; (80013e8 <MX_GPIO_Init+0x12c>)
 80012d6:	f043 0310 	orr.w	r3, r3, #16
 80012da:	6193      	str	r3, [r2, #24]
 80012dc:	4b42      	ldr	r3, [pc, #264]	; (80013e8 <MX_GPIO_Init+0x12c>)
 80012de:	699b      	ldr	r3, [r3, #24]
 80012e0:	f003 0310 	and.w	r3, r3, #16
 80012e4:	60fb      	str	r3, [r7, #12]
 80012e6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012e8:	4b3f      	ldr	r3, [pc, #252]	; (80013e8 <MX_GPIO_Init+0x12c>)
 80012ea:	699b      	ldr	r3, [r3, #24]
 80012ec:	4a3e      	ldr	r2, [pc, #248]	; (80013e8 <MX_GPIO_Init+0x12c>)
 80012ee:	f043 0320 	orr.w	r3, r3, #32
 80012f2:	6193      	str	r3, [r2, #24]
 80012f4:	4b3c      	ldr	r3, [pc, #240]	; (80013e8 <MX_GPIO_Init+0x12c>)
 80012f6:	699b      	ldr	r3, [r3, #24]
 80012f8:	f003 0320 	and.w	r3, r3, #32
 80012fc:	60bb      	str	r3, [r7, #8]
 80012fe:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001300:	4b39      	ldr	r3, [pc, #228]	; (80013e8 <MX_GPIO_Init+0x12c>)
 8001302:	699b      	ldr	r3, [r3, #24]
 8001304:	4a38      	ldr	r2, [pc, #224]	; (80013e8 <MX_GPIO_Init+0x12c>)
 8001306:	f043 0304 	orr.w	r3, r3, #4
 800130a:	6193      	str	r3, [r2, #24]
 800130c:	4b36      	ldr	r3, [pc, #216]	; (80013e8 <MX_GPIO_Init+0x12c>)
 800130e:	699b      	ldr	r3, [r3, #24]
 8001310:	f003 0304 	and.w	r3, r3, #4
 8001314:	607b      	str	r3, [r7, #4]
 8001316:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001318:	4b33      	ldr	r3, [pc, #204]	; (80013e8 <MX_GPIO_Init+0x12c>)
 800131a:	699b      	ldr	r3, [r3, #24]
 800131c:	4a32      	ldr	r2, [pc, #200]	; (80013e8 <MX_GPIO_Init+0x12c>)
 800131e:	f043 0308 	orr.w	r3, r3, #8
 8001322:	6193      	str	r3, [r2, #24]
 8001324:	4b30      	ldr	r3, [pc, #192]	; (80013e8 <MX_GPIO_Init+0x12c>)
 8001326:	699b      	ldr	r3, [r3, #24]
 8001328:	f003 0308 	and.w	r3, r3, #8
 800132c:	603b      	str	r3, [r7, #0]
 800132e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|LED2_B_Pin|LED2_A_Pin, GPIO_PIN_RESET);
 8001330:	2200      	movs	r2, #0
 8001332:	f44f 7148 	mov.w	r1, #800	; 0x320
 8001336:	482d      	ldr	r0, [pc, #180]	; (80013ec <MX_GPIO_Init+0x130>)
 8001338:	f000 fdd9 	bl	8001eee <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_A_Pin|LED0_B_Pin|LED1_B_Pin|LED0_A_Pin
 800133c:	2200      	movs	r2, #0
 800133e:	f44f 618f 	mov.w	r1, #1144	; 0x478
 8001342:	482b      	ldr	r0, [pc, #172]	; (80013f0 <MX_GPIO_Init+0x134>)
 8001344:	f000 fdd3 	bl	8001eee <HAL_GPIO_WritePin>
                          |LED3_A_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED3_B_Pin|SIGNAL_BUTTON_Pin, GPIO_PIN_RESET);
 8001348:	2200      	movs	r2, #0
 800134a:	f44f 7120 	mov.w	r1, #640	; 0x280
 800134e:	4829      	ldr	r0, [pc, #164]	; (80013f4 <MX_GPIO_Init+0x138>)
 8001350:	f000 fdcd 	bl	8001eee <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001354:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001358:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800135a:	4b27      	ldr	r3, [pc, #156]	; (80013f8 <MX_GPIO_Init+0x13c>)
 800135c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135e:	2300      	movs	r3, #0
 8001360:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001362:	f107 0310 	add.w	r3, r7, #16
 8001366:	4619      	mov	r1, r3
 8001368:	4822      	ldr	r0, [pc, #136]	; (80013f4 <MX_GPIO_Init+0x138>)
 800136a:	f000 fc25 	bl	8001bb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON0_Pin BUTTON1_Pin BUTTON2_Pin */
  GPIO_InitStruct.Pin = BUTTON0_Pin|BUTTON1_Pin|BUTTON2_Pin;
 800136e:	2313      	movs	r3, #19
 8001370:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001372:	2300      	movs	r3, #0
 8001374:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001376:	2300      	movs	r3, #0
 8001378:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800137a:	f107 0310 	add.w	r3, r7, #16
 800137e:	4619      	mov	r1, r3
 8001380:	481a      	ldr	r0, [pc, #104]	; (80013ec <MX_GPIO_Init+0x130>)
 8001382:	f000 fc19 	bl	8001bb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LED2_B_Pin LED2_A_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LED2_B_Pin|LED2_A_Pin;
 8001386:	f44f 7348 	mov.w	r3, #800	; 0x320
 800138a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800138c:	2301      	movs	r3, #1
 800138e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001390:	2300      	movs	r3, #0
 8001392:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001394:	2302      	movs	r3, #2
 8001396:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001398:	f107 0310 	add.w	r3, r7, #16
 800139c:	4619      	mov	r1, r3
 800139e:	4813      	ldr	r0, [pc, #76]	; (80013ec <MX_GPIO_Init+0x130>)
 80013a0:	f000 fc0a 	bl	8001bb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_A_Pin LED0_B_Pin LED1_B_Pin LED0_A_Pin
                           LED3_A_Pin */
  GPIO_InitStruct.Pin = LED1_A_Pin|LED0_B_Pin|LED1_B_Pin|LED0_A_Pin
 80013a4:	f44f 638f 	mov.w	r3, #1144	; 0x478
 80013a8:	613b      	str	r3, [r7, #16]
                          |LED3_A_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013aa:	2301      	movs	r3, #1
 80013ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ae:	2300      	movs	r3, #0
 80013b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013b2:	2302      	movs	r3, #2
 80013b4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013b6:	f107 0310 	add.w	r3, r7, #16
 80013ba:	4619      	mov	r1, r3
 80013bc:	480c      	ldr	r0, [pc, #48]	; (80013f0 <MX_GPIO_Init+0x134>)
 80013be:	f000 fbfb 	bl	8001bb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED3_B_Pin SIGNAL_BUTTON_Pin */
  GPIO_InitStruct.Pin = LED3_B_Pin|SIGNAL_BUTTON_Pin;
 80013c2:	f44f 7320 	mov.w	r3, #640	; 0x280
 80013c6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013c8:	2301      	movs	r3, #1
 80013ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013cc:	2300      	movs	r3, #0
 80013ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013d0:	2302      	movs	r3, #2
 80013d2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013d4:	f107 0310 	add.w	r3, r7, #16
 80013d8:	4619      	mov	r1, r3
 80013da:	4806      	ldr	r0, [pc, #24]	; (80013f4 <MX_GPIO_Init+0x138>)
 80013dc:	f000 fbec 	bl	8001bb8 <HAL_GPIO_Init>

}
 80013e0:	bf00      	nop
 80013e2:	3720      	adds	r7, #32
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd80      	pop	{r7, pc}
 80013e8:	40021000 	.word	0x40021000
 80013ec:	40010800 	.word	0x40010800
 80013f0:	40010c00 	.word	0x40010c00
 80013f4:	40011000 	.word	0x40011000
 80013f8:	10110000 	.word	0x10110000

080013fc <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b082      	sub	sp, #8
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
	timerRun();
 8001404:	f000 f830 	bl	8001468 <timerRun>
	getKeyInput();
 8001408:	f7fe fee8 	bl	80001dc <getKeyInput>
}
 800140c:	bf00      	nop
 800140e:	3708      	adds	r7, #8
 8001410:	46bd      	mov	sp, r7
 8001412:	bd80      	pop	{r7, pc}

08001414 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001414:	b480      	push	{r7}
 8001416:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001418:	b672      	cpsid	i
}
 800141a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800141c:	e7fe      	b.n	800141c <Error_Handler+0x8>
	...

08001420 <setTimer>:

#define NUM_TIMERS 10// Define the number of timers
Timer timers[NUM_TIMERS];
int timer_cycle = 100;

void setTimer(int index, int duration) {
 8001420:	b480      	push	{r7}
 8001422:	b083      	sub	sp, #12
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
 8001428:	6039      	str	r1, [r7, #0]
    if (index >= 0 && index < NUM_TIMERS) {
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	2b00      	cmp	r3, #0
 800142e:	db11      	blt.n	8001454 <setTimer+0x34>
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	2b09      	cmp	r3, #9
 8001434:	dc0e      	bgt.n	8001454 <setTimer+0x34>
        timers[index].counter = duration / timer_cycle;
 8001436:	4b0a      	ldr	r3, [pc, #40]	; (8001460 <setTimer+0x40>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	683a      	ldr	r2, [r7, #0]
 800143c:	fb92 f2f3 	sdiv	r2, r2, r3
 8001440:	4908      	ldr	r1, [pc, #32]	; (8001464 <setTimer+0x44>)
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
        timers[index].flag = 0;
 8001448:	4a06      	ldr	r2, [pc, #24]	; (8001464 <setTimer+0x44>)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	00db      	lsls	r3, r3, #3
 800144e:	4413      	add	r3, r2
 8001450:	2200      	movs	r2, #0
 8001452:	605a      	str	r2, [r3, #4]
    }
}
 8001454:	bf00      	nop
 8001456:	370c      	adds	r7, #12
 8001458:	46bd      	mov	sp, r7
 800145a:	bc80      	pop	{r7}
 800145c:	4770      	bx	lr
 800145e:	bf00      	nop
 8001460:	20000080 	.word	0x20000080
 8001464:	200001ec 	.word	0x200001ec

08001468 <timerRun>:

void timerRun() {
 8001468:	b480      	push	{r7}
 800146a:	b083      	sub	sp, #12
 800146c:	af00      	add	r7, sp, #0
    for (int i = 0; i < NUM_TIMERS; i++) {
 800146e:	2300      	movs	r3, #0
 8001470:	607b      	str	r3, [r7, #4]
 8001472:	e01d      	b.n	80014b0 <timerRun+0x48>
        if (timers[i].counter > 0) {
 8001474:	4a13      	ldr	r2, [pc, #76]	; (80014c4 <timerRun+0x5c>)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800147c:	2b00      	cmp	r3, #0
 800147e:	dd14      	ble.n	80014aa <timerRun+0x42>
            timers[i].counter--;
 8001480:	4a10      	ldr	r2, [pc, #64]	; (80014c4 <timerRun+0x5c>)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001488:	1e5a      	subs	r2, r3, #1
 800148a:	490e      	ldr	r1, [pc, #56]	; (80014c4 <timerRun+0x5c>)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
            if (timers[i].counter <= 0) {
 8001492:	4a0c      	ldr	r2, [pc, #48]	; (80014c4 <timerRun+0x5c>)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800149a:	2b00      	cmp	r3, #0
 800149c:	dc05      	bgt.n	80014aa <timerRun+0x42>
                timers[i].flag = 1;
 800149e:	4a09      	ldr	r2, [pc, #36]	; (80014c4 <timerRun+0x5c>)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	00db      	lsls	r3, r3, #3
 80014a4:	4413      	add	r3, r2
 80014a6:	2201      	movs	r2, #1
 80014a8:	605a      	str	r2, [r3, #4]
    for (int i = 0; i < NUM_TIMERS; i++) {
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	3301      	adds	r3, #1
 80014ae:	607b      	str	r3, [r7, #4]
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	2b09      	cmp	r3, #9
 80014b4:	ddde      	ble.n	8001474 <timerRun+0xc>
            }
        }
    }
}
 80014b6:	bf00      	nop
 80014b8:	bf00      	nop
 80014ba:	370c      	adds	r7, #12
 80014bc:	46bd      	mov	sp, r7
 80014be:	bc80      	pop	{r7}
 80014c0:	4770      	bx	lr
 80014c2:	bf00      	nop
 80014c4:	200001ec 	.word	0x200001ec

080014c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014c8:	b480      	push	{r7}
 80014ca:	b085      	sub	sp, #20
 80014cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80014ce:	4b15      	ldr	r3, [pc, #84]	; (8001524 <HAL_MspInit+0x5c>)
 80014d0:	699b      	ldr	r3, [r3, #24]
 80014d2:	4a14      	ldr	r2, [pc, #80]	; (8001524 <HAL_MspInit+0x5c>)
 80014d4:	f043 0301 	orr.w	r3, r3, #1
 80014d8:	6193      	str	r3, [r2, #24]
 80014da:	4b12      	ldr	r3, [pc, #72]	; (8001524 <HAL_MspInit+0x5c>)
 80014dc:	699b      	ldr	r3, [r3, #24]
 80014de:	f003 0301 	and.w	r3, r3, #1
 80014e2:	60bb      	str	r3, [r7, #8]
 80014e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014e6:	4b0f      	ldr	r3, [pc, #60]	; (8001524 <HAL_MspInit+0x5c>)
 80014e8:	69db      	ldr	r3, [r3, #28]
 80014ea:	4a0e      	ldr	r2, [pc, #56]	; (8001524 <HAL_MspInit+0x5c>)
 80014ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014f0:	61d3      	str	r3, [r2, #28]
 80014f2:	4b0c      	ldr	r3, [pc, #48]	; (8001524 <HAL_MspInit+0x5c>)
 80014f4:	69db      	ldr	r3, [r3, #28]
 80014f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014fa:	607b      	str	r3, [r7, #4]
 80014fc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80014fe:	4b0a      	ldr	r3, [pc, #40]	; (8001528 <HAL_MspInit+0x60>)
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	60fb      	str	r3, [r7, #12]
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800150a:	60fb      	str	r3, [r7, #12]
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001512:	60fb      	str	r3, [r7, #12]
 8001514:	4a04      	ldr	r2, [pc, #16]	; (8001528 <HAL_MspInit+0x60>)
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800151a:	bf00      	nop
 800151c:	3714      	adds	r7, #20
 800151e:	46bd      	mov	sp, r7
 8001520:	bc80      	pop	{r7}
 8001522:	4770      	bx	lr
 8001524:	40021000 	.word	0x40021000
 8001528:	40010000 	.word	0x40010000

0800152c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b08a      	sub	sp, #40	; 0x28
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001534:	f107 0314 	add.w	r3, r7, #20
 8001538:	2200      	movs	r2, #0
 800153a:	601a      	str	r2, [r3, #0]
 800153c:	605a      	str	r2, [r3, #4]
 800153e:	609a      	str	r2, [r3, #8]
 8001540:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	4a25      	ldr	r2, [pc, #148]	; (80015dc <HAL_I2C_MspInit+0xb0>)
 8001548:	4293      	cmp	r3, r2
 800154a:	d142      	bne.n	80015d2 <HAL_I2C_MspInit+0xa6>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800154c:	4b24      	ldr	r3, [pc, #144]	; (80015e0 <HAL_I2C_MspInit+0xb4>)
 800154e:	699b      	ldr	r3, [r3, #24]
 8001550:	4a23      	ldr	r2, [pc, #140]	; (80015e0 <HAL_I2C_MspInit+0xb4>)
 8001552:	f043 0308 	orr.w	r3, r3, #8
 8001556:	6193      	str	r3, [r2, #24]
 8001558:	4b21      	ldr	r3, [pc, #132]	; (80015e0 <HAL_I2C_MspInit+0xb4>)
 800155a:	699b      	ldr	r3, [r3, #24]
 800155c:	f003 0308 	and.w	r3, r3, #8
 8001560:	613b      	str	r3, [r7, #16]
 8001562:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001564:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001568:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800156a:	2312      	movs	r3, #18
 800156c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800156e:	2303      	movs	r3, #3
 8001570:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001572:	f107 0314 	add.w	r3, r7, #20
 8001576:	4619      	mov	r1, r3
 8001578:	481a      	ldr	r0, [pc, #104]	; (80015e4 <HAL_I2C_MspInit+0xb8>)
 800157a:	f000 fb1d 	bl	8001bb8 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 800157e:	4b1a      	ldr	r3, [pc, #104]	; (80015e8 <HAL_I2C_MspInit+0xbc>)
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	627b      	str	r3, [r7, #36]	; 0x24
 8001584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001586:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800158a:	627b      	str	r3, [r7, #36]	; 0x24
 800158c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800158e:	f043 0302 	orr.w	r3, r3, #2
 8001592:	627b      	str	r3, [r7, #36]	; 0x24
 8001594:	4a14      	ldr	r2, [pc, #80]	; (80015e8 <HAL_I2C_MspInit+0xbc>)
 8001596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001598:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800159a:	4b11      	ldr	r3, [pc, #68]	; (80015e0 <HAL_I2C_MspInit+0xb4>)
 800159c:	69db      	ldr	r3, [r3, #28]
 800159e:	4a10      	ldr	r2, [pc, #64]	; (80015e0 <HAL_I2C_MspInit+0xb4>)
 80015a0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80015a4:	61d3      	str	r3, [r2, #28]
 80015a6:	4b0e      	ldr	r3, [pc, #56]	; (80015e0 <HAL_I2C_MspInit+0xb4>)
 80015a8:	69db      	ldr	r3, [r3, #28]
 80015aa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015ae:	60fb      	str	r3, [r7, #12]
 80015b0:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80015b2:	2200      	movs	r2, #0
 80015b4:	2100      	movs	r1, #0
 80015b6:	201f      	movs	r0, #31
 80015b8:	f000 fa41 	bl	8001a3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80015bc:	201f      	movs	r0, #31
 80015be:	f000 fa5a 	bl	8001a76 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80015c2:	2200      	movs	r2, #0
 80015c4:	2100      	movs	r1, #0
 80015c6:	2020      	movs	r0, #32
 80015c8:	f000 fa39 	bl	8001a3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80015cc:	2020      	movs	r0, #32
 80015ce:	f000 fa52 	bl	8001a76 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80015d2:	bf00      	nop
 80015d4:	3728      	adds	r7, #40	; 0x28
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	40005400 	.word	0x40005400
 80015e0:	40021000 	.word	0x40021000
 80015e4:	40010c00 	.word	0x40010c00
 80015e8:	40010000 	.word	0x40010000

080015ec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b084      	sub	sp, #16
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80015fc:	d113      	bne.n	8001626 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80015fe:	4b0c      	ldr	r3, [pc, #48]	; (8001630 <HAL_TIM_Base_MspInit+0x44>)
 8001600:	69db      	ldr	r3, [r3, #28]
 8001602:	4a0b      	ldr	r2, [pc, #44]	; (8001630 <HAL_TIM_Base_MspInit+0x44>)
 8001604:	f043 0301 	orr.w	r3, r3, #1
 8001608:	61d3      	str	r3, [r2, #28]
 800160a:	4b09      	ldr	r3, [pc, #36]	; (8001630 <HAL_TIM_Base_MspInit+0x44>)
 800160c:	69db      	ldr	r3, [r3, #28]
 800160e:	f003 0301 	and.w	r3, r3, #1
 8001612:	60fb      	str	r3, [r7, #12]
 8001614:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001616:	2200      	movs	r2, #0
 8001618:	2100      	movs	r1, #0
 800161a:	201c      	movs	r0, #28
 800161c:	f000 fa0f 	bl	8001a3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001620:	201c      	movs	r0, #28
 8001622:	f000 fa28 	bl	8001a76 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001626:	bf00      	nop
 8001628:	3710      	adds	r7, #16
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	40021000 	.word	0x40021000

08001634 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001634:	b480      	push	{r7}
 8001636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001638:	e7fe      	b.n	8001638 <NMI_Handler+0x4>

0800163a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800163a:	b480      	push	{r7}
 800163c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800163e:	e7fe      	b.n	800163e <HardFault_Handler+0x4>

08001640 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001640:	b480      	push	{r7}
 8001642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001644:	e7fe      	b.n	8001644 <MemManage_Handler+0x4>

08001646 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001646:	b480      	push	{r7}
 8001648:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800164a:	e7fe      	b.n	800164a <BusFault_Handler+0x4>

0800164c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800164c:	b480      	push	{r7}
 800164e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001650:	e7fe      	b.n	8001650 <UsageFault_Handler+0x4>

08001652 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001652:	b480      	push	{r7}
 8001654:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001656:	bf00      	nop
 8001658:	46bd      	mov	sp, r7
 800165a:	bc80      	pop	{r7}
 800165c:	4770      	bx	lr

0800165e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800165e:	b480      	push	{r7}
 8001660:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001662:	bf00      	nop
 8001664:	46bd      	mov	sp, r7
 8001666:	bc80      	pop	{r7}
 8001668:	4770      	bx	lr

0800166a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800166a:	b480      	push	{r7}
 800166c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800166e:	bf00      	nop
 8001670:	46bd      	mov	sp, r7
 8001672:	bc80      	pop	{r7}
 8001674:	4770      	bx	lr

08001676 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001676:	b580      	push	{r7, lr}
 8001678:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800167a:	f000 f8c9 	bl	8001810 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800167e:	bf00      	nop
 8001680:	bd80      	pop	{r7, pc}
	...

08001684 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001688:	4802      	ldr	r0, [pc, #8]	; (8001694 <TIM2_IRQHandler+0x10>)
 800168a:	f003 faa7 	bl	8004bdc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800168e:	bf00      	nop
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	200001a4 	.word	0x200001a4

08001698 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 800169c:	4802      	ldr	r0, [pc, #8]	; (80016a8 <I2C1_EV_IRQHandler+0x10>)
 800169e:	f000 fead 	bl	80023fc <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80016a2:	bf00      	nop
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	20000150 	.word	0x20000150

080016ac <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80016b0:	4802      	ldr	r0, [pc, #8]	; (80016bc <I2C1_ER_IRQHandler+0x10>)
 80016b2:	f001 f814 	bl	80026de <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80016b6:	bf00      	nop
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	20000150 	.word	0x20000150

080016c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b086      	sub	sp, #24
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016c8:	4a14      	ldr	r2, [pc, #80]	; (800171c <_sbrk+0x5c>)
 80016ca:	4b15      	ldr	r3, [pc, #84]	; (8001720 <_sbrk+0x60>)
 80016cc:	1ad3      	subs	r3, r2, r3
 80016ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016d0:	697b      	ldr	r3, [r7, #20]
 80016d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016d4:	4b13      	ldr	r3, [pc, #76]	; (8001724 <_sbrk+0x64>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d102      	bne.n	80016e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80016dc:	4b11      	ldr	r3, [pc, #68]	; (8001724 <_sbrk+0x64>)
 80016de:	4a12      	ldr	r2, [pc, #72]	; (8001728 <_sbrk+0x68>)
 80016e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016e2:	4b10      	ldr	r3, [pc, #64]	; (8001724 <_sbrk+0x64>)
 80016e4:	681a      	ldr	r2, [r3, #0]
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	4413      	add	r3, r2
 80016ea:	693a      	ldr	r2, [r7, #16]
 80016ec:	429a      	cmp	r2, r3
 80016ee:	d207      	bcs.n	8001700 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016f0:	f003 fdc4 	bl	800527c <__errno>
 80016f4:	4603      	mov	r3, r0
 80016f6:	220c      	movs	r2, #12
 80016f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80016fa:	f04f 33ff 	mov.w	r3, #4294967295
 80016fe:	e009      	b.n	8001714 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001700:	4b08      	ldr	r3, [pc, #32]	; (8001724 <_sbrk+0x64>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001706:	4b07      	ldr	r3, [pc, #28]	; (8001724 <_sbrk+0x64>)
 8001708:	681a      	ldr	r2, [r3, #0]
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	4413      	add	r3, r2
 800170e:	4a05      	ldr	r2, [pc, #20]	; (8001724 <_sbrk+0x64>)
 8001710:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001712:	68fb      	ldr	r3, [r7, #12]
}
 8001714:	4618      	mov	r0, r3
 8001716:	3718      	adds	r7, #24
 8001718:	46bd      	mov	sp, r7
 800171a:	bd80      	pop	{r7, pc}
 800171c:	20005000 	.word	0x20005000
 8001720:	00000400 	.word	0x00000400
 8001724:	20000134 	.word	0x20000134
 8001728:	20000250 	.word	0x20000250

0800172c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800172c:	b480      	push	{r7}
 800172e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001730:	bf00      	nop
 8001732:	46bd      	mov	sp, r7
 8001734:	bc80      	pop	{r7}
 8001736:	4770      	bx	lr

08001738 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001738:	f7ff fff8 	bl	800172c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800173c:	480b      	ldr	r0, [pc, #44]	; (800176c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800173e:	490c      	ldr	r1, [pc, #48]	; (8001770 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001740:	4a0c      	ldr	r2, [pc, #48]	; (8001774 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001742:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001744:	e002      	b.n	800174c <LoopCopyDataInit>

08001746 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001746:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001748:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800174a:	3304      	adds	r3, #4

0800174c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800174c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800174e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001750:	d3f9      	bcc.n	8001746 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001752:	4a09      	ldr	r2, [pc, #36]	; (8001778 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001754:	4c09      	ldr	r4, [pc, #36]	; (800177c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001756:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001758:	e001      	b.n	800175e <LoopFillZerobss>

0800175a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800175a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800175c:	3204      	adds	r2, #4

0800175e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800175e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001760:	d3fb      	bcc.n	800175a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001762:	f003 fd91 	bl	8005288 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001766:	f7ff fcd3 	bl	8001110 <main>
  bx lr
 800176a:	4770      	bx	lr
  ldr r0, =_sdata
 800176c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001770:	200000f4 	.word	0x200000f4
  ldr r2, =_sidata
 8001774:	08005c84 	.word	0x08005c84
  ldr r2, =_sbss
 8001778:	200000f4 	.word	0x200000f4
  ldr r4, =_ebss
 800177c:	20000250 	.word	0x20000250

08001780 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001780:	e7fe      	b.n	8001780 <ADC1_2_IRQHandler>
	...

08001784 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001788:	4b08      	ldr	r3, [pc, #32]	; (80017ac <HAL_Init+0x28>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4a07      	ldr	r2, [pc, #28]	; (80017ac <HAL_Init+0x28>)
 800178e:	f043 0310 	orr.w	r3, r3, #16
 8001792:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001794:	2003      	movs	r0, #3
 8001796:	f000 f947 	bl	8001a28 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800179a:	200f      	movs	r0, #15
 800179c:	f000 f808 	bl	80017b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017a0:	f7ff fe92 	bl	80014c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017a4:	2300      	movs	r3, #0
}
 80017a6:	4618      	mov	r0, r3
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	40022000 	.word	0x40022000

080017b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b082      	sub	sp, #8
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80017b8:	4b12      	ldr	r3, [pc, #72]	; (8001804 <HAL_InitTick+0x54>)
 80017ba:	681a      	ldr	r2, [r3, #0]
 80017bc:	4b12      	ldr	r3, [pc, #72]	; (8001808 <HAL_InitTick+0x58>)
 80017be:	781b      	ldrb	r3, [r3, #0]
 80017c0:	4619      	mov	r1, r3
 80017c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80017ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80017ce:	4618      	mov	r0, r3
 80017d0:	f000 f95f 	bl	8001a92 <HAL_SYSTICK_Config>
 80017d4:	4603      	mov	r3, r0
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d001      	beq.n	80017de <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80017da:	2301      	movs	r3, #1
 80017dc:	e00e      	b.n	80017fc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	2b0f      	cmp	r3, #15
 80017e2:	d80a      	bhi.n	80017fa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017e4:	2200      	movs	r2, #0
 80017e6:	6879      	ldr	r1, [r7, #4]
 80017e8:	f04f 30ff 	mov.w	r0, #4294967295
 80017ec:	f000 f927 	bl	8001a3e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017f0:	4a06      	ldr	r2, [pc, #24]	; (800180c <HAL_InitTick+0x5c>)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80017f6:	2300      	movs	r3, #0
 80017f8:	e000      	b.n	80017fc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80017fa:	2301      	movs	r3, #1
}
 80017fc:	4618      	mov	r0, r3
 80017fe:	3708      	adds	r7, #8
 8001800:	46bd      	mov	sp, r7
 8001802:	bd80      	pop	{r7, pc}
 8001804:	20000084 	.word	0x20000084
 8001808:	2000008c 	.word	0x2000008c
 800180c:	20000088 	.word	0x20000088

08001810 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001810:	b480      	push	{r7}
 8001812:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001814:	4b05      	ldr	r3, [pc, #20]	; (800182c <HAL_IncTick+0x1c>)
 8001816:	781b      	ldrb	r3, [r3, #0]
 8001818:	461a      	mov	r2, r3
 800181a:	4b05      	ldr	r3, [pc, #20]	; (8001830 <HAL_IncTick+0x20>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	4413      	add	r3, r2
 8001820:	4a03      	ldr	r2, [pc, #12]	; (8001830 <HAL_IncTick+0x20>)
 8001822:	6013      	str	r3, [r2, #0]
}
 8001824:	bf00      	nop
 8001826:	46bd      	mov	sp, r7
 8001828:	bc80      	pop	{r7}
 800182a:	4770      	bx	lr
 800182c:	2000008c 	.word	0x2000008c
 8001830:	2000023c 	.word	0x2000023c

08001834 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001834:	b480      	push	{r7}
 8001836:	af00      	add	r7, sp, #0
  return uwTick;
 8001838:	4b02      	ldr	r3, [pc, #8]	; (8001844 <HAL_GetTick+0x10>)
 800183a:	681b      	ldr	r3, [r3, #0]
}
 800183c:	4618      	mov	r0, r3
 800183e:	46bd      	mov	sp, r7
 8001840:	bc80      	pop	{r7}
 8001842:	4770      	bx	lr
 8001844:	2000023c 	.word	0x2000023c

08001848 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b084      	sub	sp, #16
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001850:	f7ff fff0 	bl	8001834 <HAL_GetTick>
 8001854:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001860:	d005      	beq.n	800186e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001862:	4b0a      	ldr	r3, [pc, #40]	; (800188c <HAL_Delay+0x44>)
 8001864:	781b      	ldrb	r3, [r3, #0]
 8001866:	461a      	mov	r2, r3
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	4413      	add	r3, r2
 800186c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800186e:	bf00      	nop
 8001870:	f7ff ffe0 	bl	8001834 <HAL_GetTick>
 8001874:	4602      	mov	r2, r0
 8001876:	68bb      	ldr	r3, [r7, #8]
 8001878:	1ad3      	subs	r3, r2, r3
 800187a:	68fa      	ldr	r2, [r7, #12]
 800187c:	429a      	cmp	r2, r3
 800187e:	d8f7      	bhi.n	8001870 <HAL_Delay+0x28>
  {
  }
}
 8001880:	bf00      	nop
 8001882:	bf00      	nop
 8001884:	3710      	adds	r7, #16
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	2000008c 	.word	0x2000008c

08001890 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001890:	b480      	push	{r7}
 8001892:	b085      	sub	sp, #20
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	f003 0307 	and.w	r3, r3, #7
 800189e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018a0:	4b0c      	ldr	r3, [pc, #48]	; (80018d4 <__NVIC_SetPriorityGrouping+0x44>)
 80018a2:	68db      	ldr	r3, [r3, #12]
 80018a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018a6:	68ba      	ldr	r2, [r7, #8]
 80018a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80018ac:	4013      	ands	r3, r2
 80018ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018b4:	68bb      	ldr	r3, [r7, #8]
 80018b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80018bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018c2:	4a04      	ldr	r2, [pc, #16]	; (80018d4 <__NVIC_SetPriorityGrouping+0x44>)
 80018c4:	68bb      	ldr	r3, [r7, #8]
 80018c6:	60d3      	str	r3, [r2, #12]
}
 80018c8:	bf00      	nop
 80018ca:	3714      	adds	r7, #20
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bc80      	pop	{r7}
 80018d0:	4770      	bx	lr
 80018d2:	bf00      	nop
 80018d4:	e000ed00 	.word	0xe000ed00

080018d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018d8:	b480      	push	{r7}
 80018da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018dc:	4b04      	ldr	r3, [pc, #16]	; (80018f0 <__NVIC_GetPriorityGrouping+0x18>)
 80018de:	68db      	ldr	r3, [r3, #12]
 80018e0:	0a1b      	lsrs	r3, r3, #8
 80018e2:	f003 0307 	and.w	r3, r3, #7
}
 80018e6:	4618      	mov	r0, r3
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bc80      	pop	{r7}
 80018ec:	4770      	bx	lr
 80018ee:	bf00      	nop
 80018f0:	e000ed00 	.word	0xe000ed00

080018f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018f4:	b480      	push	{r7}
 80018f6:	b083      	sub	sp, #12
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	4603      	mov	r3, r0
 80018fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001902:	2b00      	cmp	r3, #0
 8001904:	db0b      	blt.n	800191e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001906:	79fb      	ldrb	r3, [r7, #7]
 8001908:	f003 021f 	and.w	r2, r3, #31
 800190c:	4906      	ldr	r1, [pc, #24]	; (8001928 <__NVIC_EnableIRQ+0x34>)
 800190e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001912:	095b      	lsrs	r3, r3, #5
 8001914:	2001      	movs	r0, #1
 8001916:	fa00 f202 	lsl.w	r2, r0, r2
 800191a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800191e:	bf00      	nop
 8001920:	370c      	adds	r7, #12
 8001922:	46bd      	mov	sp, r7
 8001924:	bc80      	pop	{r7}
 8001926:	4770      	bx	lr
 8001928:	e000e100 	.word	0xe000e100

0800192c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800192c:	b480      	push	{r7}
 800192e:	b083      	sub	sp, #12
 8001930:	af00      	add	r7, sp, #0
 8001932:	4603      	mov	r3, r0
 8001934:	6039      	str	r1, [r7, #0]
 8001936:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001938:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800193c:	2b00      	cmp	r3, #0
 800193e:	db0a      	blt.n	8001956 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	b2da      	uxtb	r2, r3
 8001944:	490c      	ldr	r1, [pc, #48]	; (8001978 <__NVIC_SetPriority+0x4c>)
 8001946:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800194a:	0112      	lsls	r2, r2, #4
 800194c:	b2d2      	uxtb	r2, r2
 800194e:	440b      	add	r3, r1
 8001950:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001954:	e00a      	b.n	800196c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	b2da      	uxtb	r2, r3
 800195a:	4908      	ldr	r1, [pc, #32]	; (800197c <__NVIC_SetPriority+0x50>)
 800195c:	79fb      	ldrb	r3, [r7, #7]
 800195e:	f003 030f 	and.w	r3, r3, #15
 8001962:	3b04      	subs	r3, #4
 8001964:	0112      	lsls	r2, r2, #4
 8001966:	b2d2      	uxtb	r2, r2
 8001968:	440b      	add	r3, r1
 800196a:	761a      	strb	r2, [r3, #24]
}
 800196c:	bf00      	nop
 800196e:	370c      	adds	r7, #12
 8001970:	46bd      	mov	sp, r7
 8001972:	bc80      	pop	{r7}
 8001974:	4770      	bx	lr
 8001976:	bf00      	nop
 8001978:	e000e100 	.word	0xe000e100
 800197c:	e000ed00 	.word	0xe000ed00

08001980 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001980:	b480      	push	{r7}
 8001982:	b089      	sub	sp, #36	; 0x24
 8001984:	af00      	add	r7, sp, #0
 8001986:	60f8      	str	r0, [r7, #12]
 8001988:	60b9      	str	r1, [r7, #8]
 800198a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	f003 0307 	and.w	r3, r3, #7
 8001992:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001994:	69fb      	ldr	r3, [r7, #28]
 8001996:	f1c3 0307 	rsb	r3, r3, #7
 800199a:	2b04      	cmp	r3, #4
 800199c:	bf28      	it	cs
 800199e:	2304      	movcs	r3, #4
 80019a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019a2:	69fb      	ldr	r3, [r7, #28]
 80019a4:	3304      	adds	r3, #4
 80019a6:	2b06      	cmp	r3, #6
 80019a8:	d902      	bls.n	80019b0 <NVIC_EncodePriority+0x30>
 80019aa:	69fb      	ldr	r3, [r7, #28]
 80019ac:	3b03      	subs	r3, #3
 80019ae:	e000      	b.n	80019b2 <NVIC_EncodePriority+0x32>
 80019b0:	2300      	movs	r3, #0
 80019b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019b4:	f04f 32ff 	mov.w	r2, #4294967295
 80019b8:	69bb      	ldr	r3, [r7, #24]
 80019ba:	fa02 f303 	lsl.w	r3, r2, r3
 80019be:	43da      	mvns	r2, r3
 80019c0:	68bb      	ldr	r3, [r7, #8]
 80019c2:	401a      	ands	r2, r3
 80019c4:	697b      	ldr	r3, [r7, #20]
 80019c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019c8:	f04f 31ff 	mov.w	r1, #4294967295
 80019cc:	697b      	ldr	r3, [r7, #20]
 80019ce:	fa01 f303 	lsl.w	r3, r1, r3
 80019d2:	43d9      	mvns	r1, r3
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019d8:	4313      	orrs	r3, r2
         );
}
 80019da:	4618      	mov	r0, r3
 80019dc:	3724      	adds	r7, #36	; 0x24
 80019de:	46bd      	mov	sp, r7
 80019e0:	bc80      	pop	{r7}
 80019e2:	4770      	bx	lr

080019e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b082      	sub	sp, #8
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	3b01      	subs	r3, #1
 80019f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019f4:	d301      	bcc.n	80019fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019f6:	2301      	movs	r3, #1
 80019f8:	e00f      	b.n	8001a1a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019fa:	4a0a      	ldr	r2, [pc, #40]	; (8001a24 <SysTick_Config+0x40>)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	3b01      	subs	r3, #1
 8001a00:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a02:	210f      	movs	r1, #15
 8001a04:	f04f 30ff 	mov.w	r0, #4294967295
 8001a08:	f7ff ff90 	bl	800192c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a0c:	4b05      	ldr	r3, [pc, #20]	; (8001a24 <SysTick_Config+0x40>)
 8001a0e:	2200      	movs	r2, #0
 8001a10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a12:	4b04      	ldr	r3, [pc, #16]	; (8001a24 <SysTick_Config+0x40>)
 8001a14:	2207      	movs	r2, #7
 8001a16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a18:	2300      	movs	r3, #0
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	3708      	adds	r7, #8
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	bf00      	nop
 8001a24:	e000e010 	.word	0xe000e010

08001a28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b082      	sub	sp, #8
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a30:	6878      	ldr	r0, [r7, #4]
 8001a32:	f7ff ff2d 	bl	8001890 <__NVIC_SetPriorityGrouping>
}
 8001a36:	bf00      	nop
 8001a38:	3708      	adds	r7, #8
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}

08001a3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a3e:	b580      	push	{r7, lr}
 8001a40:	b086      	sub	sp, #24
 8001a42:	af00      	add	r7, sp, #0
 8001a44:	4603      	mov	r3, r0
 8001a46:	60b9      	str	r1, [r7, #8]
 8001a48:	607a      	str	r2, [r7, #4]
 8001a4a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a50:	f7ff ff42 	bl	80018d8 <__NVIC_GetPriorityGrouping>
 8001a54:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a56:	687a      	ldr	r2, [r7, #4]
 8001a58:	68b9      	ldr	r1, [r7, #8]
 8001a5a:	6978      	ldr	r0, [r7, #20]
 8001a5c:	f7ff ff90 	bl	8001980 <NVIC_EncodePriority>
 8001a60:	4602      	mov	r2, r0
 8001a62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a66:	4611      	mov	r1, r2
 8001a68:	4618      	mov	r0, r3
 8001a6a:	f7ff ff5f 	bl	800192c <__NVIC_SetPriority>
}
 8001a6e:	bf00      	nop
 8001a70:	3718      	adds	r7, #24
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}

08001a76 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a76:	b580      	push	{r7, lr}
 8001a78:	b082      	sub	sp, #8
 8001a7a:	af00      	add	r7, sp, #0
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a84:	4618      	mov	r0, r3
 8001a86:	f7ff ff35 	bl	80018f4 <__NVIC_EnableIRQ>
}
 8001a8a:	bf00      	nop
 8001a8c:	3708      	adds	r7, #8
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}

08001a92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a92:	b580      	push	{r7, lr}
 8001a94:	b082      	sub	sp, #8
 8001a96:	af00      	add	r7, sp, #0
 8001a98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a9a:	6878      	ldr	r0, [r7, #4]
 8001a9c:	f7ff ffa2 	bl	80019e4 <SysTick_Config>
 8001aa0:	4603      	mov	r3, r0
}
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	3708      	adds	r7, #8
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}
	...

08001aac <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b084      	sub	sp, #16
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001abe:	b2db      	uxtb	r3, r3
 8001ac0:	2b02      	cmp	r3, #2
 8001ac2:	d005      	beq.n	8001ad0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2204      	movs	r2, #4
 8001ac8:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001aca:	2301      	movs	r3, #1
 8001acc:	73fb      	strb	r3, [r7, #15]
 8001ace:	e051      	b.n	8001b74 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	681a      	ldr	r2, [r3, #0]
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f022 020e 	bic.w	r2, r2, #14
 8001ade:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	681a      	ldr	r2, [r3, #0]
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f022 0201 	bic.w	r2, r2, #1
 8001aee:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4a22      	ldr	r2, [pc, #136]	; (8001b80 <HAL_DMA_Abort_IT+0xd4>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d029      	beq.n	8001b4e <HAL_DMA_Abort_IT+0xa2>
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4a21      	ldr	r2, [pc, #132]	; (8001b84 <HAL_DMA_Abort_IT+0xd8>)
 8001b00:	4293      	cmp	r3, r2
 8001b02:	d022      	beq.n	8001b4a <HAL_DMA_Abort_IT+0x9e>
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4a1f      	ldr	r2, [pc, #124]	; (8001b88 <HAL_DMA_Abort_IT+0xdc>)
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d01a      	beq.n	8001b44 <HAL_DMA_Abort_IT+0x98>
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4a1e      	ldr	r2, [pc, #120]	; (8001b8c <HAL_DMA_Abort_IT+0xe0>)
 8001b14:	4293      	cmp	r3, r2
 8001b16:	d012      	beq.n	8001b3e <HAL_DMA_Abort_IT+0x92>
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a1c      	ldr	r2, [pc, #112]	; (8001b90 <HAL_DMA_Abort_IT+0xe4>)
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d00a      	beq.n	8001b38 <HAL_DMA_Abort_IT+0x8c>
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4a1b      	ldr	r2, [pc, #108]	; (8001b94 <HAL_DMA_Abort_IT+0xe8>)
 8001b28:	4293      	cmp	r3, r2
 8001b2a:	d102      	bne.n	8001b32 <HAL_DMA_Abort_IT+0x86>
 8001b2c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001b30:	e00e      	b.n	8001b50 <HAL_DMA_Abort_IT+0xa4>
 8001b32:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001b36:	e00b      	b.n	8001b50 <HAL_DMA_Abort_IT+0xa4>
 8001b38:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001b3c:	e008      	b.n	8001b50 <HAL_DMA_Abort_IT+0xa4>
 8001b3e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b42:	e005      	b.n	8001b50 <HAL_DMA_Abort_IT+0xa4>
 8001b44:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b48:	e002      	b.n	8001b50 <HAL_DMA_Abort_IT+0xa4>
 8001b4a:	2310      	movs	r3, #16
 8001b4c:	e000      	b.n	8001b50 <HAL_DMA_Abort_IT+0xa4>
 8001b4e:	2301      	movs	r3, #1
 8001b50:	4a11      	ldr	r2, [pc, #68]	; (8001b98 <HAL_DMA_Abort_IT+0xec>)
 8001b52:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2201      	movs	r2, #1
 8001b58:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2200      	movs	r2, #0
 8001b60:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d003      	beq.n	8001b74 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b70:	6878      	ldr	r0, [r7, #4]
 8001b72:	4798      	blx	r3
    } 
  }
  return status;
 8001b74:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b76:	4618      	mov	r0, r3
 8001b78:	3710      	adds	r7, #16
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	40020008 	.word	0x40020008
 8001b84:	4002001c 	.word	0x4002001c
 8001b88:	40020030 	.word	0x40020030
 8001b8c:	40020044 	.word	0x40020044
 8001b90:	40020058 	.word	0x40020058
 8001b94:	4002006c 	.word	0x4002006c
 8001b98:	40020000 	.word	0x40020000

08001b9c <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	b083      	sub	sp, #12
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001baa:	b2db      	uxtb	r3, r3
}
 8001bac:	4618      	mov	r0, r3
 8001bae:	370c      	adds	r7, #12
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bc80      	pop	{r7}
 8001bb4:	4770      	bx	lr
	...

08001bb8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	b08b      	sub	sp, #44	; 0x2c
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
 8001bc0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001bca:	e169      	b.n	8001ea0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001bcc:	2201      	movs	r2, #1
 8001bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	69fa      	ldr	r2, [r7, #28]
 8001bdc:	4013      	ands	r3, r2
 8001bde:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001be0:	69ba      	ldr	r2, [r7, #24]
 8001be2:	69fb      	ldr	r3, [r7, #28]
 8001be4:	429a      	cmp	r2, r3
 8001be6:	f040 8158 	bne.w	8001e9a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	4a9a      	ldr	r2, [pc, #616]	; (8001e58 <HAL_GPIO_Init+0x2a0>)
 8001bf0:	4293      	cmp	r3, r2
 8001bf2:	d05e      	beq.n	8001cb2 <HAL_GPIO_Init+0xfa>
 8001bf4:	4a98      	ldr	r2, [pc, #608]	; (8001e58 <HAL_GPIO_Init+0x2a0>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d875      	bhi.n	8001ce6 <HAL_GPIO_Init+0x12e>
 8001bfa:	4a98      	ldr	r2, [pc, #608]	; (8001e5c <HAL_GPIO_Init+0x2a4>)
 8001bfc:	4293      	cmp	r3, r2
 8001bfe:	d058      	beq.n	8001cb2 <HAL_GPIO_Init+0xfa>
 8001c00:	4a96      	ldr	r2, [pc, #600]	; (8001e5c <HAL_GPIO_Init+0x2a4>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d86f      	bhi.n	8001ce6 <HAL_GPIO_Init+0x12e>
 8001c06:	4a96      	ldr	r2, [pc, #600]	; (8001e60 <HAL_GPIO_Init+0x2a8>)
 8001c08:	4293      	cmp	r3, r2
 8001c0a:	d052      	beq.n	8001cb2 <HAL_GPIO_Init+0xfa>
 8001c0c:	4a94      	ldr	r2, [pc, #592]	; (8001e60 <HAL_GPIO_Init+0x2a8>)
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d869      	bhi.n	8001ce6 <HAL_GPIO_Init+0x12e>
 8001c12:	4a94      	ldr	r2, [pc, #592]	; (8001e64 <HAL_GPIO_Init+0x2ac>)
 8001c14:	4293      	cmp	r3, r2
 8001c16:	d04c      	beq.n	8001cb2 <HAL_GPIO_Init+0xfa>
 8001c18:	4a92      	ldr	r2, [pc, #584]	; (8001e64 <HAL_GPIO_Init+0x2ac>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d863      	bhi.n	8001ce6 <HAL_GPIO_Init+0x12e>
 8001c1e:	4a92      	ldr	r2, [pc, #584]	; (8001e68 <HAL_GPIO_Init+0x2b0>)
 8001c20:	4293      	cmp	r3, r2
 8001c22:	d046      	beq.n	8001cb2 <HAL_GPIO_Init+0xfa>
 8001c24:	4a90      	ldr	r2, [pc, #576]	; (8001e68 <HAL_GPIO_Init+0x2b0>)
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d85d      	bhi.n	8001ce6 <HAL_GPIO_Init+0x12e>
 8001c2a:	2b12      	cmp	r3, #18
 8001c2c:	d82a      	bhi.n	8001c84 <HAL_GPIO_Init+0xcc>
 8001c2e:	2b12      	cmp	r3, #18
 8001c30:	d859      	bhi.n	8001ce6 <HAL_GPIO_Init+0x12e>
 8001c32:	a201      	add	r2, pc, #4	; (adr r2, 8001c38 <HAL_GPIO_Init+0x80>)
 8001c34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c38:	08001cb3 	.word	0x08001cb3
 8001c3c:	08001c8d 	.word	0x08001c8d
 8001c40:	08001c9f 	.word	0x08001c9f
 8001c44:	08001ce1 	.word	0x08001ce1
 8001c48:	08001ce7 	.word	0x08001ce7
 8001c4c:	08001ce7 	.word	0x08001ce7
 8001c50:	08001ce7 	.word	0x08001ce7
 8001c54:	08001ce7 	.word	0x08001ce7
 8001c58:	08001ce7 	.word	0x08001ce7
 8001c5c:	08001ce7 	.word	0x08001ce7
 8001c60:	08001ce7 	.word	0x08001ce7
 8001c64:	08001ce7 	.word	0x08001ce7
 8001c68:	08001ce7 	.word	0x08001ce7
 8001c6c:	08001ce7 	.word	0x08001ce7
 8001c70:	08001ce7 	.word	0x08001ce7
 8001c74:	08001ce7 	.word	0x08001ce7
 8001c78:	08001ce7 	.word	0x08001ce7
 8001c7c:	08001c95 	.word	0x08001c95
 8001c80:	08001ca9 	.word	0x08001ca9
 8001c84:	4a79      	ldr	r2, [pc, #484]	; (8001e6c <HAL_GPIO_Init+0x2b4>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d013      	beq.n	8001cb2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001c8a:	e02c      	b.n	8001ce6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	68db      	ldr	r3, [r3, #12]
 8001c90:	623b      	str	r3, [r7, #32]
          break;
 8001c92:	e029      	b.n	8001ce8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	68db      	ldr	r3, [r3, #12]
 8001c98:	3304      	adds	r3, #4
 8001c9a:	623b      	str	r3, [r7, #32]
          break;
 8001c9c:	e024      	b.n	8001ce8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	68db      	ldr	r3, [r3, #12]
 8001ca2:	3308      	adds	r3, #8
 8001ca4:	623b      	str	r3, [r7, #32]
          break;
 8001ca6:	e01f      	b.n	8001ce8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	68db      	ldr	r3, [r3, #12]
 8001cac:	330c      	adds	r3, #12
 8001cae:	623b      	str	r3, [r7, #32]
          break;
 8001cb0:	e01a      	b.n	8001ce8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	689b      	ldr	r3, [r3, #8]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d102      	bne.n	8001cc0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001cba:	2304      	movs	r3, #4
 8001cbc:	623b      	str	r3, [r7, #32]
          break;
 8001cbe:	e013      	b.n	8001ce8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	689b      	ldr	r3, [r3, #8]
 8001cc4:	2b01      	cmp	r3, #1
 8001cc6:	d105      	bne.n	8001cd4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001cc8:	2308      	movs	r3, #8
 8001cca:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	69fa      	ldr	r2, [r7, #28]
 8001cd0:	611a      	str	r2, [r3, #16]
          break;
 8001cd2:	e009      	b.n	8001ce8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001cd4:	2308      	movs	r3, #8
 8001cd6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	69fa      	ldr	r2, [r7, #28]
 8001cdc:	615a      	str	r2, [r3, #20]
          break;
 8001cde:	e003      	b.n	8001ce8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	623b      	str	r3, [r7, #32]
          break;
 8001ce4:	e000      	b.n	8001ce8 <HAL_GPIO_Init+0x130>
          break;
 8001ce6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001ce8:	69bb      	ldr	r3, [r7, #24]
 8001cea:	2bff      	cmp	r3, #255	; 0xff
 8001cec:	d801      	bhi.n	8001cf2 <HAL_GPIO_Init+0x13a>
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	e001      	b.n	8001cf6 <HAL_GPIO_Init+0x13e>
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	3304      	adds	r3, #4
 8001cf6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001cf8:	69bb      	ldr	r3, [r7, #24]
 8001cfa:	2bff      	cmp	r3, #255	; 0xff
 8001cfc:	d802      	bhi.n	8001d04 <HAL_GPIO_Init+0x14c>
 8001cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d00:	009b      	lsls	r3, r3, #2
 8001d02:	e002      	b.n	8001d0a <HAL_GPIO_Init+0x152>
 8001d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d06:	3b08      	subs	r3, #8
 8001d08:	009b      	lsls	r3, r3, #2
 8001d0a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001d0c:	697b      	ldr	r3, [r7, #20]
 8001d0e:	681a      	ldr	r2, [r3, #0]
 8001d10:	210f      	movs	r1, #15
 8001d12:	693b      	ldr	r3, [r7, #16]
 8001d14:	fa01 f303 	lsl.w	r3, r1, r3
 8001d18:	43db      	mvns	r3, r3
 8001d1a:	401a      	ands	r2, r3
 8001d1c:	6a39      	ldr	r1, [r7, #32]
 8001d1e:	693b      	ldr	r3, [r7, #16]
 8001d20:	fa01 f303 	lsl.w	r3, r1, r3
 8001d24:	431a      	orrs	r2, r3
 8001d26:	697b      	ldr	r3, [r7, #20]
 8001d28:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	f000 80b1 	beq.w	8001e9a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001d38:	4b4d      	ldr	r3, [pc, #308]	; (8001e70 <HAL_GPIO_Init+0x2b8>)
 8001d3a:	699b      	ldr	r3, [r3, #24]
 8001d3c:	4a4c      	ldr	r2, [pc, #304]	; (8001e70 <HAL_GPIO_Init+0x2b8>)
 8001d3e:	f043 0301 	orr.w	r3, r3, #1
 8001d42:	6193      	str	r3, [r2, #24]
 8001d44:	4b4a      	ldr	r3, [pc, #296]	; (8001e70 <HAL_GPIO_Init+0x2b8>)
 8001d46:	699b      	ldr	r3, [r3, #24]
 8001d48:	f003 0301 	and.w	r3, r3, #1
 8001d4c:	60bb      	str	r3, [r7, #8]
 8001d4e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001d50:	4a48      	ldr	r2, [pc, #288]	; (8001e74 <HAL_GPIO_Init+0x2bc>)
 8001d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d54:	089b      	lsrs	r3, r3, #2
 8001d56:	3302      	adds	r3, #2
 8001d58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d5c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d60:	f003 0303 	and.w	r3, r3, #3
 8001d64:	009b      	lsls	r3, r3, #2
 8001d66:	220f      	movs	r2, #15
 8001d68:	fa02 f303 	lsl.w	r3, r2, r3
 8001d6c:	43db      	mvns	r3, r3
 8001d6e:	68fa      	ldr	r2, [r7, #12]
 8001d70:	4013      	ands	r3, r2
 8001d72:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	4a40      	ldr	r2, [pc, #256]	; (8001e78 <HAL_GPIO_Init+0x2c0>)
 8001d78:	4293      	cmp	r3, r2
 8001d7a:	d013      	beq.n	8001da4 <HAL_GPIO_Init+0x1ec>
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	4a3f      	ldr	r2, [pc, #252]	; (8001e7c <HAL_GPIO_Init+0x2c4>)
 8001d80:	4293      	cmp	r3, r2
 8001d82:	d00d      	beq.n	8001da0 <HAL_GPIO_Init+0x1e8>
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	4a3e      	ldr	r2, [pc, #248]	; (8001e80 <HAL_GPIO_Init+0x2c8>)
 8001d88:	4293      	cmp	r3, r2
 8001d8a:	d007      	beq.n	8001d9c <HAL_GPIO_Init+0x1e4>
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	4a3d      	ldr	r2, [pc, #244]	; (8001e84 <HAL_GPIO_Init+0x2cc>)
 8001d90:	4293      	cmp	r3, r2
 8001d92:	d101      	bne.n	8001d98 <HAL_GPIO_Init+0x1e0>
 8001d94:	2303      	movs	r3, #3
 8001d96:	e006      	b.n	8001da6 <HAL_GPIO_Init+0x1ee>
 8001d98:	2304      	movs	r3, #4
 8001d9a:	e004      	b.n	8001da6 <HAL_GPIO_Init+0x1ee>
 8001d9c:	2302      	movs	r3, #2
 8001d9e:	e002      	b.n	8001da6 <HAL_GPIO_Init+0x1ee>
 8001da0:	2301      	movs	r3, #1
 8001da2:	e000      	b.n	8001da6 <HAL_GPIO_Init+0x1ee>
 8001da4:	2300      	movs	r3, #0
 8001da6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001da8:	f002 0203 	and.w	r2, r2, #3
 8001dac:	0092      	lsls	r2, r2, #2
 8001dae:	4093      	lsls	r3, r2
 8001db0:	68fa      	ldr	r2, [r7, #12]
 8001db2:	4313      	orrs	r3, r2
 8001db4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001db6:	492f      	ldr	r1, [pc, #188]	; (8001e74 <HAL_GPIO_Init+0x2bc>)
 8001db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dba:	089b      	lsrs	r3, r3, #2
 8001dbc:	3302      	adds	r3, #2
 8001dbe:	68fa      	ldr	r2, [r7, #12]
 8001dc0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d006      	beq.n	8001dde <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001dd0:	4b2d      	ldr	r3, [pc, #180]	; (8001e88 <HAL_GPIO_Init+0x2d0>)
 8001dd2:	689a      	ldr	r2, [r3, #8]
 8001dd4:	492c      	ldr	r1, [pc, #176]	; (8001e88 <HAL_GPIO_Init+0x2d0>)
 8001dd6:	69bb      	ldr	r3, [r7, #24]
 8001dd8:	4313      	orrs	r3, r2
 8001dda:	608b      	str	r3, [r1, #8]
 8001ddc:	e006      	b.n	8001dec <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001dde:	4b2a      	ldr	r3, [pc, #168]	; (8001e88 <HAL_GPIO_Init+0x2d0>)
 8001de0:	689a      	ldr	r2, [r3, #8]
 8001de2:	69bb      	ldr	r3, [r7, #24]
 8001de4:	43db      	mvns	r3, r3
 8001de6:	4928      	ldr	r1, [pc, #160]	; (8001e88 <HAL_GPIO_Init+0x2d0>)
 8001de8:	4013      	ands	r3, r2
 8001dea:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d006      	beq.n	8001e06 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001df8:	4b23      	ldr	r3, [pc, #140]	; (8001e88 <HAL_GPIO_Init+0x2d0>)
 8001dfa:	68da      	ldr	r2, [r3, #12]
 8001dfc:	4922      	ldr	r1, [pc, #136]	; (8001e88 <HAL_GPIO_Init+0x2d0>)
 8001dfe:	69bb      	ldr	r3, [r7, #24]
 8001e00:	4313      	orrs	r3, r2
 8001e02:	60cb      	str	r3, [r1, #12]
 8001e04:	e006      	b.n	8001e14 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001e06:	4b20      	ldr	r3, [pc, #128]	; (8001e88 <HAL_GPIO_Init+0x2d0>)
 8001e08:	68da      	ldr	r2, [r3, #12]
 8001e0a:	69bb      	ldr	r3, [r7, #24]
 8001e0c:	43db      	mvns	r3, r3
 8001e0e:	491e      	ldr	r1, [pc, #120]	; (8001e88 <HAL_GPIO_Init+0x2d0>)
 8001e10:	4013      	ands	r3, r2
 8001e12:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d006      	beq.n	8001e2e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001e20:	4b19      	ldr	r3, [pc, #100]	; (8001e88 <HAL_GPIO_Init+0x2d0>)
 8001e22:	685a      	ldr	r2, [r3, #4]
 8001e24:	4918      	ldr	r1, [pc, #96]	; (8001e88 <HAL_GPIO_Init+0x2d0>)
 8001e26:	69bb      	ldr	r3, [r7, #24]
 8001e28:	4313      	orrs	r3, r2
 8001e2a:	604b      	str	r3, [r1, #4]
 8001e2c:	e006      	b.n	8001e3c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001e2e:	4b16      	ldr	r3, [pc, #88]	; (8001e88 <HAL_GPIO_Init+0x2d0>)
 8001e30:	685a      	ldr	r2, [r3, #4]
 8001e32:	69bb      	ldr	r3, [r7, #24]
 8001e34:	43db      	mvns	r3, r3
 8001e36:	4914      	ldr	r1, [pc, #80]	; (8001e88 <HAL_GPIO_Init+0x2d0>)
 8001e38:	4013      	ands	r3, r2
 8001e3a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d021      	beq.n	8001e8c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001e48:	4b0f      	ldr	r3, [pc, #60]	; (8001e88 <HAL_GPIO_Init+0x2d0>)
 8001e4a:	681a      	ldr	r2, [r3, #0]
 8001e4c:	490e      	ldr	r1, [pc, #56]	; (8001e88 <HAL_GPIO_Init+0x2d0>)
 8001e4e:	69bb      	ldr	r3, [r7, #24]
 8001e50:	4313      	orrs	r3, r2
 8001e52:	600b      	str	r3, [r1, #0]
 8001e54:	e021      	b.n	8001e9a <HAL_GPIO_Init+0x2e2>
 8001e56:	bf00      	nop
 8001e58:	10320000 	.word	0x10320000
 8001e5c:	10310000 	.word	0x10310000
 8001e60:	10220000 	.word	0x10220000
 8001e64:	10210000 	.word	0x10210000
 8001e68:	10120000 	.word	0x10120000
 8001e6c:	10110000 	.word	0x10110000
 8001e70:	40021000 	.word	0x40021000
 8001e74:	40010000 	.word	0x40010000
 8001e78:	40010800 	.word	0x40010800
 8001e7c:	40010c00 	.word	0x40010c00
 8001e80:	40011000 	.word	0x40011000
 8001e84:	40011400 	.word	0x40011400
 8001e88:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001e8c:	4b0b      	ldr	r3, [pc, #44]	; (8001ebc <HAL_GPIO_Init+0x304>)
 8001e8e:	681a      	ldr	r2, [r3, #0]
 8001e90:	69bb      	ldr	r3, [r7, #24]
 8001e92:	43db      	mvns	r3, r3
 8001e94:	4909      	ldr	r1, [pc, #36]	; (8001ebc <HAL_GPIO_Init+0x304>)
 8001e96:	4013      	ands	r3, r2
 8001e98:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e9c:	3301      	adds	r3, #1
 8001e9e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	681a      	ldr	r2, [r3, #0]
 8001ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ea6:	fa22 f303 	lsr.w	r3, r2, r3
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	f47f ae8e 	bne.w	8001bcc <HAL_GPIO_Init+0x14>
  }
}
 8001eb0:	bf00      	nop
 8001eb2:	bf00      	nop
 8001eb4:	372c      	adds	r7, #44	; 0x2c
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bc80      	pop	{r7}
 8001eba:	4770      	bx	lr
 8001ebc:	40010400 	.word	0x40010400

08001ec0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b085      	sub	sp, #20
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
 8001ec8:	460b      	mov	r3, r1
 8001eca:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	689a      	ldr	r2, [r3, #8]
 8001ed0:	887b      	ldrh	r3, [r7, #2]
 8001ed2:	4013      	ands	r3, r2
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d002      	beq.n	8001ede <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001ed8:	2301      	movs	r3, #1
 8001eda:	73fb      	strb	r3, [r7, #15]
 8001edc:	e001      	b.n	8001ee2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001ee2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	3714      	adds	r7, #20
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bc80      	pop	{r7}
 8001eec:	4770      	bx	lr

08001eee <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001eee:	b480      	push	{r7}
 8001ef0:	b083      	sub	sp, #12
 8001ef2:	af00      	add	r7, sp, #0
 8001ef4:	6078      	str	r0, [r7, #4]
 8001ef6:	460b      	mov	r3, r1
 8001ef8:	807b      	strh	r3, [r7, #2]
 8001efa:	4613      	mov	r3, r2
 8001efc:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001efe:	787b      	ldrb	r3, [r7, #1]
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d003      	beq.n	8001f0c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f04:	887a      	ldrh	r2, [r7, #2]
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001f0a:	e003      	b.n	8001f14 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001f0c:	887b      	ldrh	r3, [r7, #2]
 8001f0e:	041a      	lsls	r2, r3, #16
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	611a      	str	r2, [r3, #16]
}
 8001f14:	bf00      	nop
 8001f16:	370c      	adds	r7, #12
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bc80      	pop	{r7}
 8001f1c:	4770      	bx	lr

08001f1e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001f1e:	b480      	push	{r7}
 8001f20:	b085      	sub	sp, #20
 8001f22:	af00      	add	r7, sp, #0
 8001f24:	6078      	str	r0, [r7, #4]
 8001f26:	460b      	mov	r3, r1
 8001f28:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	68db      	ldr	r3, [r3, #12]
 8001f2e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001f30:	887a      	ldrh	r2, [r7, #2]
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	4013      	ands	r3, r2
 8001f36:	041a      	lsls	r2, r3, #16
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	43d9      	mvns	r1, r3
 8001f3c:	887b      	ldrh	r3, [r7, #2]
 8001f3e:	400b      	ands	r3, r1
 8001f40:	431a      	orrs	r2, r3
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	611a      	str	r2, [r3, #16]
}
 8001f46:	bf00      	nop
 8001f48:	3714      	adds	r7, #20
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bc80      	pop	{r7}
 8001f4e:	4770      	bx	lr

08001f50 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b084      	sub	sp, #16
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d101      	bne.n	8001f62 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	e12b      	b.n	80021ba <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f68:	b2db      	uxtb	r3, r3
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d106      	bne.n	8001f7c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2200      	movs	r2, #0
 8001f72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001f76:	6878      	ldr	r0, [r7, #4]
 8001f78:	f7ff fad8 	bl	800152c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2224      	movs	r2, #36	; 0x24
 8001f80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	681a      	ldr	r2, [r3, #0]
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f022 0201 	bic.w	r2, r2, #1
 8001f92:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	681a      	ldr	r2, [r3, #0]
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001fa2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	681a      	ldr	r2, [r3, #0]
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001fb2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001fb4:	f002 fd3e 	bl	8004a34 <HAL_RCC_GetPCLK1Freq>
 8001fb8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	4a81      	ldr	r2, [pc, #516]	; (80021c4 <HAL_I2C_Init+0x274>)
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d807      	bhi.n	8001fd4 <HAL_I2C_Init+0x84>
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	4a80      	ldr	r2, [pc, #512]	; (80021c8 <HAL_I2C_Init+0x278>)
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	bf94      	ite	ls
 8001fcc:	2301      	movls	r3, #1
 8001fce:	2300      	movhi	r3, #0
 8001fd0:	b2db      	uxtb	r3, r3
 8001fd2:	e006      	b.n	8001fe2 <HAL_I2C_Init+0x92>
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	4a7d      	ldr	r2, [pc, #500]	; (80021cc <HAL_I2C_Init+0x27c>)
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	bf94      	ite	ls
 8001fdc:	2301      	movls	r3, #1
 8001fde:	2300      	movhi	r3, #0
 8001fe0:	b2db      	uxtb	r3, r3
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d001      	beq.n	8001fea <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	e0e7      	b.n	80021ba <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	4a78      	ldr	r2, [pc, #480]	; (80021d0 <HAL_I2C_Init+0x280>)
 8001fee:	fba2 2303 	umull	r2, r3, r2, r3
 8001ff2:	0c9b      	lsrs	r3, r3, #18
 8001ff4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	68ba      	ldr	r2, [r7, #8]
 8002006:	430a      	orrs	r2, r1
 8002008:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	6a1b      	ldr	r3, [r3, #32]
 8002010:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	4a6a      	ldr	r2, [pc, #424]	; (80021c4 <HAL_I2C_Init+0x274>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d802      	bhi.n	8002024 <HAL_I2C_Init+0xd4>
 800201e:	68bb      	ldr	r3, [r7, #8]
 8002020:	3301      	adds	r3, #1
 8002022:	e009      	b.n	8002038 <HAL_I2C_Init+0xe8>
 8002024:	68bb      	ldr	r3, [r7, #8]
 8002026:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800202a:	fb02 f303 	mul.w	r3, r2, r3
 800202e:	4a69      	ldr	r2, [pc, #420]	; (80021d4 <HAL_I2C_Init+0x284>)
 8002030:	fba2 2303 	umull	r2, r3, r2, r3
 8002034:	099b      	lsrs	r3, r3, #6
 8002036:	3301      	adds	r3, #1
 8002038:	687a      	ldr	r2, [r7, #4]
 800203a:	6812      	ldr	r2, [r2, #0]
 800203c:	430b      	orrs	r3, r1
 800203e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	69db      	ldr	r3, [r3, #28]
 8002046:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800204a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	495c      	ldr	r1, [pc, #368]	; (80021c4 <HAL_I2C_Init+0x274>)
 8002054:	428b      	cmp	r3, r1
 8002056:	d819      	bhi.n	800208c <HAL_I2C_Init+0x13c>
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	1e59      	subs	r1, r3, #1
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	005b      	lsls	r3, r3, #1
 8002062:	fbb1 f3f3 	udiv	r3, r1, r3
 8002066:	1c59      	adds	r1, r3, #1
 8002068:	f640 73fc 	movw	r3, #4092	; 0xffc
 800206c:	400b      	ands	r3, r1
 800206e:	2b00      	cmp	r3, #0
 8002070:	d00a      	beq.n	8002088 <HAL_I2C_Init+0x138>
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	1e59      	subs	r1, r3, #1
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	005b      	lsls	r3, r3, #1
 800207c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002080:	3301      	adds	r3, #1
 8002082:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002086:	e051      	b.n	800212c <HAL_I2C_Init+0x1dc>
 8002088:	2304      	movs	r3, #4
 800208a:	e04f      	b.n	800212c <HAL_I2C_Init+0x1dc>
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	689b      	ldr	r3, [r3, #8]
 8002090:	2b00      	cmp	r3, #0
 8002092:	d111      	bne.n	80020b8 <HAL_I2C_Init+0x168>
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	1e58      	subs	r0, r3, #1
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6859      	ldr	r1, [r3, #4]
 800209c:	460b      	mov	r3, r1
 800209e:	005b      	lsls	r3, r3, #1
 80020a0:	440b      	add	r3, r1
 80020a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80020a6:	3301      	adds	r3, #1
 80020a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	bf0c      	ite	eq
 80020b0:	2301      	moveq	r3, #1
 80020b2:	2300      	movne	r3, #0
 80020b4:	b2db      	uxtb	r3, r3
 80020b6:	e012      	b.n	80020de <HAL_I2C_Init+0x18e>
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	1e58      	subs	r0, r3, #1
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6859      	ldr	r1, [r3, #4]
 80020c0:	460b      	mov	r3, r1
 80020c2:	009b      	lsls	r3, r3, #2
 80020c4:	440b      	add	r3, r1
 80020c6:	0099      	lsls	r1, r3, #2
 80020c8:	440b      	add	r3, r1
 80020ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80020ce:	3301      	adds	r3, #1
 80020d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	bf0c      	ite	eq
 80020d8:	2301      	moveq	r3, #1
 80020da:	2300      	movne	r3, #0
 80020dc:	b2db      	uxtb	r3, r3
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d001      	beq.n	80020e6 <HAL_I2C_Init+0x196>
 80020e2:	2301      	movs	r3, #1
 80020e4:	e022      	b.n	800212c <HAL_I2C_Init+0x1dc>
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	689b      	ldr	r3, [r3, #8]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d10e      	bne.n	800210c <HAL_I2C_Init+0x1bc>
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	1e58      	subs	r0, r3, #1
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6859      	ldr	r1, [r3, #4]
 80020f6:	460b      	mov	r3, r1
 80020f8:	005b      	lsls	r3, r3, #1
 80020fa:	440b      	add	r3, r1
 80020fc:	fbb0 f3f3 	udiv	r3, r0, r3
 8002100:	3301      	adds	r3, #1
 8002102:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002106:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800210a:	e00f      	b.n	800212c <HAL_I2C_Init+0x1dc>
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	1e58      	subs	r0, r3, #1
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6859      	ldr	r1, [r3, #4]
 8002114:	460b      	mov	r3, r1
 8002116:	009b      	lsls	r3, r3, #2
 8002118:	440b      	add	r3, r1
 800211a:	0099      	lsls	r1, r3, #2
 800211c:	440b      	add	r3, r1
 800211e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002122:	3301      	adds	r3, #1
 8002124:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002128:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800212c:	6879      	ldr	r1, [r7, #4]
 800212e:	6809      	ldr	r1, [r1, #0]
 8002130:	4313      	orrs	r3, r2
 8002132:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	69da      	ldr	r2, [r3, #28]
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6a1b      	ldr	r3, [r3, #32]
 8002146:	431a      	orrs	r2, r3
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	430a      	orrs	r2, r1
 800214e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	689b      	ldr	r3, [r3, #8]
 8002156:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800215a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800215e:	687a      	ldr	r2, [r7, #4]
 8002160:	6911      	ldr	r1, [r2, #16]
 8002162:	687a      	ldr	r2, [r7, #4]
 8002164:	68d2      	ldr	r2, [r2, #12]
 8002166:	4311      	orrs	r1, r2
 8002168:	687a      	ldr	r2, [r7, #4]
 800216a:	6812      	ldr	r2, [r2, #0]
 800216c:	430b      	orrs	r3, r1
 800216e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	68db      	ldr	r3, [r3, #12]
 8002176:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	695a      	ldr	r2, [r3, #20]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	699b      	ldr	r3, [r3, #24]
 8002182:	431a      	orrs	r2, r3
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	430a      	orrs	r2, r1
 800218a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	681a      	ldr	r2, [r3, #0]
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f042 0201 	orr.w	r2, r2, #1
 800219a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2200      	movs	r2, #0
 80021a0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2220      	movs	r2, #32
 80021a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2200      	movs	r2, #0
 80021ae:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2200      	movs	r2, #0
 80021b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80021b8:	2300      	movs	r3, #0
}
 80021ba:	4618      	mov	r0, r3
 80021bc:	3710      	adds	r7, #16
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}
 80021c2:	bf00      	nop
 80021c4:	000186a0 	.word	0x000186a0
 80021c8:	001e847f 	.word	0x001e847f
 80021cc:	003d08ff 	.word	0x003d08ff
 80021d0:	431bde83 	.word	0x431bde83
 80021d4:	10624dd3 	.word	0x10624dd3

080021d8 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 80021d8:	b480      	push	{r7}
 80021da:	b083      	sub	sp, #12
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	695b      	ldr	r3, [r3, #20]
 80021e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021ea:	2b80      	cmp	r3, #128	; 0x80
 80021ec:	d103      	bne.n	80021f6 <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	2200      	movs	r2, #0
 80021f4:	611a      	str	r2, [r3, #16]
  }
}
 80021f6:	bf00      	nop
 80021f8:	370c      	adds	r7, #12
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bc80      	pop	{r7}
 80021fe:	4770      	bx	lr

08002200 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b088      	sub	sp, #32
 8002204:	af02      	add	r7, sp, #8
 8002206:	60f8      	str	r0, [r7, #12]
 8002208:	607a      	str	r2, [r7, #4]
 800220a:	461a      	mov	r2, r3
 800220c:	460b      	mov	r3, r1
 800220e:	817b      	strh	r3, [r7, #10]
 8002210:	4613      	mov	r3, r2
 8002212:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002214:	f7ff fb0e 	bl	8001834 <HAL_GetTick>
 8002218:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002220:	b2db      	uxtb	r3, r3
 8002222:	2b20      	cmp	r3, #32
 8002224:	f040 80e0 	bne.w	80023e8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002228:	697b      	ldr	r3, [r7, #20]
 800222a:	9300      	str	r3, [sp, #0]
 800222c:	2319      	movs	r3, #25
 800222e:	2201      	movs	r2, #1
 8002230:	4970      	ldr	r1, [pc, #448]	; (80023f4 <HAL_I2C_Master_Transmit+0x1f4>)
 8002232:	68f8      	ldr	r0, [r7, #12]
 8002234:	f001 fe12 	bl	8003e5c <I2C_WaitOnFlagUntilTimeout>
 8002238:	4603      	mov	r3, r0
 800223a:	2b00      	cmp	r3, #0
 800223c:	d001      	beq.n	8002242 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800223e:	2302      	movs	r3, #2
 8002240:	e0d3      	b.n	80023ea <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002248:	2b01      	cmp	r3, #1
 800224a:	d101      	bne.n	8002250 <HAL_I2C_Master_Transmit+0x50>
 800224c:	2302      	movs	r3, #2
 800224e:	e0cc      	b.n	80023ea <HAL_I2C_Master_Transmit+0x1ea>
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	2201      	movs	r2, #1
 8002254:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f003 0301 	and.w	r3, r3, #1
 8002262:	2b01      	cmp	r3, #1
 8002264:	d007      	beq.n	8002276 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	681a      	ldr	r2, [r3, #0]
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f042 0201 	orr.w	r2, r2, #1
 8002274:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	681a      	ldr	r2, [r3, #0]
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002284:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	2221      	movs	r2, #33	; 0x21
 800228a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	2210      	movs	r2, #16
 8002292:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	2200      	movs	r2, #0
 800229a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	687a      	ldr	r2, [r7, #4]
 80022a0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	893a      	ldrh	r2, [r7, #8]
 80022a6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022ac:	b29a      	uxth	r2, r3
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	4a50      	ldr	r2, [pc, #320]	; (80023f8 <HAL_I2C_Master_Transmit+0x1f8>)
 80022b6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80022b8:	8979      	ldrh	r1, [r7, #10]
 80022ba:	697b      	ldr	r3, [r7, #20]
 80022bc:	6a3a      	ldr	r2, [r7, #32]
 80022be:	68f8      	ldr	r0, [r7, #12]
 80022c0:	f001 fca2 	bl	8003c08 <I2C_MasterRequestWrite>
 80022c4:	4603      	mov	r3, r0
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d001      	beq.n	80022ce <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80022ca:	2301      	movs	r3, #1
 80022cc:	e08d      	b.n	80023ea <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022ce:	2300      	movs	r3, #0
 80022d0:	613b      	str	r3, [r7, #16]
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	695b      	ldr	r3, [r3, #20]
 80022d8:	613b      	str	r3, [r7, #16]
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	699b      	ldr	r3, [r3, #24]
 80022e0:	613b      	str	r3, [r7, #16]
 80022e2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80022e4:	e066      	b.n	80023b4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80022e6:	697a      	ldr	r2, [r7, #20]
 80022e8:	6a39      	ldr	r1, [r7, #32]
 80022ea:	68f8      	ldr	r0, [r7, #12]
 80022ec:	f001 fed0 	bl	8004090 <I2C_WaitOnTXEFlagUntilTimeout>
 80022f0:	4603      	mov	r3, r0
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d00d      	beq.n	8002312 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022fa:	2b04      	cmp	r3, #4
 80022fc:	d107      	bne.n	800230e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	681a      	ldr	r2, [r3, #0]
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800230c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800230e:	2301      	movs	r3, #1
 8002310:	e06b      	b.n	80023ea <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002316:	781a      	ldrb	r2, [r3, #0]
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002322:	1c5a      	adds	r2, r3, #1
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800232c:	b29b      	uxth	r3, r3
 800232e:	3b01      	subs	r3, #1
 8002330:	b29a      	uxth	r2, r3
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800233a:	3b01      	subs	r3, #1
 800233c:	b29a      	uxth	r2, r3
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	695b      	ldr	r3, [r3, #20]
 8002348:	f003 0304 	and.w	r3, r3, #4
 800234c:	2b04      	cmp	r3, #4
 800234e:	d11b      	bne.n	8002388 <HAL_I2C_Master_Transmit+0x188>
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002354:	2b00      	cmp	r3, #0
 8002356:	d017      	beq.n	8002388 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800235c:	781a      	ldrb	r2, [r3, #0]
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002368:	1c5a      	adds	r2, r3, #1
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002372:	b29b      	uxth	r3, r3
 8002374:	3b01      	subs	r3, #1
 8002376:	b29a      	uxth	r2, r3
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002380:	3b01      	subs	r3, #1
 8002382:	b29a      	uxth	r2, r3
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002388:	697a      	ldr	r2, [r7, #20]
 800238a:	6a39      	ldr	r1, [r7, #32]
 800238c:	68f8      	ldr	r0, [r7, #12]
 800238e:	f001 fec7 	bl	8004120 <I2C_WaitOnBTFFlagUntilTimeout>
 8002392:	4603      	mov	r3, r0
 8002394:	2b00      	cmp	r3, #0
 8002396:	d00d      	beq.n	80023b4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800239c:	2b04      	cmp	r3, #4
 800239e:	d107      	bne.n	80023b0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	681a      	ldr	r2, [r3, #0]
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023ae:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80023b0:	2301      	movs	r3, #1
 80023b2:	e01a      	b.n	80023ea <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d194      	bne.n	80022e6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	681a      	ldr	r2, [r3, #0]
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023ca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	2220      	movs	r2, #32
 80023d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	2200      	movs	r2, #0
 80023d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	2200      	movs	r2, #0
 80023e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80023e4:	2300      	movs	r3, #0
 80023e6:	e000      	b.n	80023ea <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80023e8:	2302      	movs	r3, #2
  }
}
 80023ea:	4618      	mov	r0, r3
 80023ec:	3718      	adds	r7, #24
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd80      	pop	{r7, pc}
 80023f2:	bf00      	nop
 80023f4:	00100002 	.word	0x00100002
 80023f8:	ffff0000 	.word	0xffff0000

080023fc <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b088      	sub	sp, #32
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8002404:	2300      	movs	r3, #0
 8002406:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002414:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800241c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002424:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002426:	7bfb      	ldrb	r3, [r7, #15]
 8002428:	2b10      	cmp	r3, #16
 800242a:	d003      	beq.n	8002434 <HAL_I2C_EV_IRQHandler+0x38>
 800242c:	7bfb      	ldrb	r3, [r7, #15]
 800242e:	2b40      	cmp	r3, #64	; 0x40
 8002430:	f040 80c1 	bne.w	80025b6 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	699b      	ldr	r3, [r3, #24]
 800243a:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	695b      	ldr	r3, [r3, #20]
 8002442:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8002444:	69fb      	ldr	r3, [r7, #28]
 8002446:	f003 0301 	and.w	r3, r3, #1
 800244a:	2b00      	cmp	r3, #0
 800244c:	d10d      	bne.n	800246a <HAL_I2C_EV_IRQHandler+0x6e>
 800244e:	693b      	ldr	r3, [r7, #16]
 8002450:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8002454:	d003      	beq.n	800245e <HAL_I2C_EV_IRQHandler+0x62>
 8002456:	693b      	ldr	r3, [r7, #16]
 8002458:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800245c:	d101      	bne.n	8002462 <HAL_I2C_EV_IRQHandler+0x66>
 800245e:	2301      	movs	r3, #1
 8002460:	e000      	b.n	8002464 <HAL_I2C_EV_IRQHandler+0x68>
 8002462:	2300      	movs	r3, #0
 8002464:	2b01      	cmp	r3, #1
 8002466:	f000 8132 	beq.w	80026ce <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800246a:	69fb      	ldr	r3, [r7, #28]
 800246c:	f003 0301 	and.w	r3, r3, #1
 8002470:	2b00      	cmp	r3, #0
 8002472:	d00c      	beq.n	800248e <HAL_I2C_EV_IRQHandler+0x92>
 8002474:	697b      	ldr	r3, [r7, #20]
 8002476:	0a5b      	lsrs	r3, r3, #9
 8002478:	f003 0301 	and.w	r3, r3, #1
 800247c:	2b00      	cmp	r3, #0
 800247e:	d006      	beq.n	800248e <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8002480:	6878      	ldr	r0, [r7, #4]
 8002482:	f001 fef5 	bl	8004270 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8002486:	6878      	ldr	r0, [r7, #4]
 8002488:	f000 fd99 	bl	8002fbe <I2C_Master_SB>
 800248c:	e092      	b.n	80025b4 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800248e:	69fb      	ldr	r3, [r7, #28]
 8002490:	08db      	lsrs	r3, r3, #3
 8002492:	f003 0301 	and.w	r3, r3, #1
 8002496:	2b00      	cmp	r3, #0
 8002498:	d009      	beq.n	80024ae <HAL_I2C_EV_IRQHandler+0xb2>
 800249a:	697b      	ldr	r3, [r7, #20]
 800249c:	0a5b      	lsrs	r3, r3, #9
 800249e:	f003 0301 	and.w	r3, r3, #1
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d003      	beq.n	80024ae <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 80024a6:	6878      	ldr	r0, [r7, #4]
 80024a8:	f000 fe0e 	bl	80030c8 <I2C_Master_ADD10>
 80024ac:	e082      	b.n	80025b4 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80024ae:	69fb      	ldr	r3, [r7, #28]
 80024b0:	085b      	lsrs	r3, r3, #1
 80024b2:	f003 0301 	and.w	r3, r3, #1
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d009      	beq.n	80024ce <HAL_I2C_EV_IRQHandler+0xd2>
 80024ba:	697b      	ldr	r3, [r7, #20]
 80024bc:	0a5b      	lsrs	r3, r3, #9
 80024be:	f003 0301 	and.w	r3, r3, #1
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d003      	beq.n	80024ce <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 80024c6:	6878      	ldr	r0, [r7, #4]
 80024c8:	f000 fe27 	bl	800311a <I2C_Master_ADDR>
 80024cc:	e072      	b.n	80025b4 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80024ce:	69bb      	ldr	r3, [r7, #24]
 80024d0:	089b      	lsrs	r3, r3, #2
 80024d2:	f003 0301 	and.w	r3, r3, #1
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d03b      	beq.n	8002552 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80024e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80024e8:	f000 80f3 	beq.w	80026d2 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80024ec:	69fb      	ldr	r3, [r7, #28]
 80024ee:	09db      	lsrs	r3, r3, #7
 80024f0:	f003 0301 	and.w	r3, r3, #1
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d00f      	beq.n	8002518 <HAL_I2C_EV_IRQHandler+0x11c>
 80024f8:	697b      	ldr	r3, [r7, #20]
 80024fa:	0a9b      	lsrs	r3, r3, #10
 80024fc:	f003 0301 	and.w	r3, r3, #1
 8002500:	2b00      	cmp	r3, #0
 8002502:	d009      	beq.n	8002518 <HAL_I2C_EV_IRQHandler+0x11c>
 8002504:	69fb      	ldr	r3, [r7, #28]
 8002506:	089b      	lsrs	r3, r3, #2
 8002508:	f003 0301 	and.w	r3, r3, #1
 800250c:	2b00      	cmp	r3, #0
 800250e:	d103      	bne.n	8002518 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8002510:	6878      	ldr	r0, [r7, #4]
 8002512:	f000 f9f1 	bl	80028f8 <I2C_MasterTransmit_TXE>
 8002516:	e04d      	b.n	80025b4 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002518:	69fb      	ldr	r3, [r7, #28]
 800251a:	089b      	lsrs	r3, r3, #2
 800251c:	f003 0301 	and.w	r3, r3, #1
 8002520:	2b00      	cmp	r3, #0
 8002522:	f000 80d6 	beq.w	80026d2 <HAL_I2C_EV_IRQHandler+0x2d6>
 8002526:	697b      	ldr	r3, [r7, #20]
 8002528:	0a5b      	lsrs	r3, r3, #9
 800252a:	f003 0301 	and.w	r3, r3, #1
 800252e:	2b00      	cmp	r3, #0
 8002530:	f000 80cf 	beq.w	80026d2 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8002534:	7bbb      	ldrb	r3, [r7, #14]
 8002536:	2b21      	cmp	r3, #33	; 0x21
 8002538:	d103      	bne.n	8002542 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800253a:	6878      	ldr	r0, [r7, #4]
 800253c:	f000 fa78 	bl	8002a30 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002540:	e0c7      	b.n	80026d2 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8002542:	7bfb      	ldrb	r3, [r7, #15]
 8002544:	2b40      	cmp	r3, #64	; 0x40
 8002546:	f040 80c4 	bne.w	80026d2 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 800254a:	6878      	ldr	r0, [r7, #4]
 800254c:	f000 fae6 	bl	8002b1c <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002550:	e0bf      	b.n	80026d2 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800255c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002560:	f000 80b7 	beq.w	80026d2 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002564:	69fb      	ldr	r3, [r7, #28]
 8002566:	099b      	lsrs	r3, r3, #6
 8002568:	f003 0301 	and.w	r3, r3, #1
 800256c:	2b00      	cmp	r3, #0
 800256e:	d00f      	beq.n	8002590 <HAL_I2C_EV_IRQHandler+0x194>
 8002570:	697b      	ldr	r3, [r7, #20]
 8002572:	0a9b      	lsrs	r3, r3, #10
 8002574:	f003 0301 	and.w	r3, r3, #1
 8002578:	2b00      	cmp	r3, #0
 800257a:	d009      	beq.n	8002590 <HAL_I2C_EV_IRQHandler+0x194>
 800257c:	69fb      	ldr	r3, [r7, #28]
 800257e:	089b      	lsrs	r3, r3, #2
 8002580:	f003 0301 	and.w	r3, r3, #1
 8002584:	2b00      	cmp	r3, #0
 8002586:	d103      	bne.n	8002590 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8002588:	6878      	ldr	r0, [r7, #4]
 800258a:	f000 fb5f 	bl	8002c4c <I2C_MasterReceive_RXNE>
 800258e:	e011      	b.n	80025b4 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002590:	69fb      	ldr	r3, [r7, #28]
 8002592:	089b      	lsrs	r3, r3, #2
 8002594:	f003 0301 	and.w	r3, r3, #1
 8002598:	2b00      	cmp	r3, #0
 800259a:	f000 809a 	beq.w	80026d2 <HAL_I2C_EV_IRQHandler+0x2d6>
 800259e:	697b      	ldr	r3, [r7, #20]
 80025a0:	0a5b      	lsrs	r3, r3, #9
 80025a2:	f003 0301 	and.w	r3, r3, #1
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	f000 8093 	beq.w	80026d2 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 80025ac:	6878      	ldr	r0, [r7, #4]
 80025ae:	f000 fc15 	bl	8002ddc <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80025b2:	e08e      	b.n	80026d2 <HAL_I2C_EV_IRQHandler+0x2d6>
 80025b4:	e08d      	b.n	80026d2 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d004      	beq.n	80025c8 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	695b      	ldr	r3, [r3, #20]
 80025c4:	61fb      	str	r3, [r7, #28]
 80025c6:	e007      	b.n	80025d8 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	699b      	ldr	r3, [r3, #24]
 80025ce:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	695b      	ldr	r3, [r3, #20]
 80025d6:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80025d8:	69fb      	ldr	r3, [r7, #28]
 80025da:	085b      	lsrs	r3, r3, #1
 80025dc:	f003 0301 	and.w	r3, r3, #1
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d012      	beq.n	800260a <HAL_I2C_EV_IRQHandler+0x20e>
 80025e4:	697b      	ldr	r3, [r7, #20]
 80025e6:	0a5b      	lsrs	r3, r3, #9
 80025e8:	f003 0301 	and.w	r3, r3, #1
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d00c      	beq.n	800260a <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d003      	beq.n	8002600 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	699b      	ldr	r3, [r3, #24]
 80025fe:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8002600:	69b9      	ldr	r1, [r7, #24]
 8002602:	6878      	ldr	r0, [r7, #4]
 8002604:	f000 ffe0 	bl	80035c8 <I2C_Slave_ADDR>
 8002608:	e066      	b.n	80026d8 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800260a:	69fb      	ldr	r3, [r7, #28]
 800260c:	091b      	lsrs	r3, r3, #4
 800260e:	f003 0301 	and.w	r3, r3, #1
 8002612:	2b00      	cmp	r3, #0
 8002614:	d009      	beq.n	800262a <HAL_I2C_EV_IRQHandler+0x22e>
 8002616:	697b      	ldr	r3, [r7, #20]
 8002618:	0a5b      	lsrs	r3, r3, #9
 800261a:	f003 0301 	and.w	r3, r3, #1
 800261e:	2b00      	cmp	r3, #0
 8002620:	d003      	beq.n	800262a <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8002622:	6878      	ldr	r0, [r7, #4]
 8002624:	f001 f81a 	bl	800365c <I2C_Slave_STOPF>
 8002628:	e056      	b.n	80026d8 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800262a:	7bbb      	ldrb	r3, [r7, #14]
 800262c:	2b21      	cmp	r3, #33	; 0x21
 800262e:	d002      	beq.n	8002636 <HAL_I2C_EV_IRQHandler+0x23a>
 8002630:	7bbb      	ldrb	r3, [r7, #14]
 8002632:	2b29      	cmp	r3, #41	; 0x29
 8002634:	d125      	bne.n	8002682 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002636:	69fb      	ldr	r3, [r7, #28]
 8002638:	09db      	lsrs	r3, r3, #7
 800263a:	f003 0301 	and.w	r3, r3, #1
 800263e:	2b00      	cmp	r3, #0
 8002640:	d00f      	beq.n	8002662 <HAL_I2C_EV_IRQHandler+0x266>
 8002642:	697b      	ldr	r3, [r7, #20]
 8002644:	0a9b      	lsrs	r3, r3, #10
 8002646:	f003 0301 	and.w	r3, r3, #1
 800264a:	2b00      	cmp	r3, #0
 800264c:	d009      	beq.n	8002662 <HAL_I2C_EV_IRQHandler+0x266>
 800264e:	69fb      	ldr	r3, [r7, #28]
 8002650:	089b      	lsrs	r3, r3, #2
 8002652:	f003 0301 	and.w	r3, r3, #1
 8002656:	2b00      	cmp	r3, #0
 8002658:	d103      	bne.n	8002662 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800265a:	6878      	ldr	r0, [r7, #4]
 800265c:	f000 fef8 	bl	8003450 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002660:	e039      	b.n	80026d6 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002662:	69fb      	ldr	r3, [r7, #28]
 8002664:	089b      	lsrs	r3, r3, #2
 8002666:	f003 0301 	and.w	r3, r3, #1
 800266a:	2b00      	cmp	r3, #0
 800266c:	d033      	beq.n	80026d6 <HAL_I2C_EV_IRQHandler+0x2da>
 800266e:	697b      	ldr	r3, [r7, #20]
 8002670:	0a5b      	lsrs	r3, r3, #9
 8002672:	f003 0301 	and.w	r3, r3, #1
 8002676:	2b00      	cmp	r3, #0
 8002678:	d02d      	beq.n	80026d6 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800267a:	6878      	ldr	r0, [r7, #4]
 800267c:	f000 ff25 	bl	80034ca <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002680:	e029      	b.n	80026d6 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002682:	69fb      	ldr	r3, [r7, #28]
 8002684:	099b      	lsrs	r3, r3, #6
 8002686:	f003 0301 	and.w	r3, r3, #1
 800268a:	2b00      	cmp	r3, #0
 800268c:	d00f      	beq.n	80026ae <HAL_I2C_EV_IRQHandler+0x2b2>
 800268e:	697b      	ldr	r3, [r7, #20]
 8002690:	0a9b      	lsrs	r3, r3, #10
 8002692:	f003 0301 	and.w	r3, r3, #1
 8002696:	2b00      	cmp	r3, #0
 8002698:	d009      	beq.n	80026ae <HAL_I2C_EV_IRQHandler+0x2b2>
 800269a:	69fb      	ldr	r3, [r7, #28]
 800269c:	089b      	lsrs	r3, r3, #2
 800269e:	f003 0301 	and.w	r3, r3, #1
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d103      	bne.n	80026ae <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80026a6:	6878      	ldr	r0, [r7, #4]
 80026a8:	f000 ff2f 	bl	800350a <I2C_SlaveReceive_RXNE>
 80026ac:	e014      	b.n	80026d8 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80026ae:	69fb      	ldr	r3, [r7, #28]
 80026b0:	089b      	lsrs	r3, r3, #2
 80026b2:	f003 0301 	and.w	r3, r3, #1
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d00e      	beq.n	80026d8 <HAL_I2C_EV_IRQHandler+0x2dc>
 80026ba:	697b      	ldr	r3, [r7, #20]
 80026bc:	0a5b      	lsrs	r3, r3, #9
 80026be:	f003 0301 	and.w	r3, r3, #1
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d008      	beq.n	80026d8 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80026c6:	6878      	ldr	r0, [r7, #4]
 80026c8:	f000 ff5d 	bl	8003586 <I2C_SlaveReceive_BTF>
 80026cc:	e004      	b.n	80026d8 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 80026ce:	bf00      	nop
 80026d0:	e002      	b.n	80026d8 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80026d2:	bf00      	nop
 80026d4:	e000      	b.n	80026d8 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80026d6:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80026d8:	3720      	adds	r7, #32
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd80      	pop	{r7, pc}

080026de <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80026de:	b580      	push	{r7, lr}
 80026e0:	b08a      	sub	sp, #40	; 0x28
 80026e2:	af00      	add	r7, sp, #0
 80026e4:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	695b      	ldr	r3, [r3, #20]
 80026ec:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 80026f6:	2300      	movs	r3, #0
 80026f8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002700:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002702:	6a3b      	ldr	r3, [r7, #32]
 8002704:	0a1b      	lsrs	r3, r3, #8
 8002706:	f003 0301 	and.w	r3, r3, #1
 800270a:	2b00      	cmp	r3, #0
 800270c:	d016      	beq.n	800273c <HAL_I2C_ER_IRQHandler+0x5e>
 800270e:	69fb      	ldr	r3, [r7, #28]
 8002710:	0a1b      	lsrs	r3, r3, #8
 8002712:	f003 0301 	and.w	r3, r3, #1
 8002716:	2b00      	cmp	r3, #0
 8002718:	d010      	beq.n	800273c <HAL_I2C_ER_IRQHandler+0x5e>
  {
    error |= HAL_I2C_ERROR_BERR;
 800271a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800271c:	f043 0301 	orr.w	r3, r3, #1
 8002720:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800272a:	615a      	str	r2, [r3, #20]

    /* Workaround: Start cannot be generated after a misplaced Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	681a      	ldr	r2, [r3, #0]
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800273a:	601a      	str	r2, [r3, #0]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800273c:	6a3b      	ldr	r3, [r7, #32]
 800273e:	0a5b      	lsrs	r3, r3, #9
 8002740:	f003 0301 	and.w	r3, r3, #1
 8002744:	2b00      	cmp	r3, #0
 8002746:	d00e      	beq.n	8002766 <HAL_I2C_ER_IRQHandler+0x88>
 8002748:	69fb      	ldr	r3, [r7, #28]
 800274a:	0a1b      	lsrs	r3, r3, #8
 800274c:	f003 0301 	and.w	r3, r3, #1
 8002750:	2b00      	cmp	r3, #0
 8002752:	d008      	beq.n	8002766 <HAL_I2C_ER_IRQHandler+0x88>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8002754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002756:	f043 0302 	orr.w	r3, r3, #2
 800275a:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8002764:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002766:	6a3b      	ldr	r3, [r7, #32]
 8002768:	0a9b      	lsrs	r3, r3, #10
 800276a:	f003 0301 	and.w	r3, r3, #1
 800276e:	2b00      	cmp	r3, #0
 8002770:	d03f      	beq.n	80027f2 <HAL_I2C_ER_IRQHandler+0x114>
 8002772:	69fb      	ldr	r3, [r7, #28]
 8002774:	0a1b      	lsrs	r3, r3, #8
 8002776:	f003 0301 	and.w	r3, r3, #1
 800277a:	2b00      	cmp	r3, #0
 800277c:	d039      	beq.n	80027f2 <HAL_I2C_ER_IRQHandler+0x114>
  {
    tmp1 = CurrentMode;
 800277e:	7efb      	ldrb	r3, [r7, #27]
 8002780:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002786:	b29b      	uxth	r3, r3
 8002788:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002790:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002796:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8002798:	7ebb      	ldrb	r3, [r7, #26]
 800279a:	2b20      	cmp	r3, #32
 800279c:	d112      	bne.n	80027c4 <HAL_I2C_ER_IRQHandler+0xe6>
 800279e:	697b      	ldr	r3, [r7, #20]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d10f      	bne.n	80027c4 <HAL_I2C_ER_IRQHandler+0xe6>
 80027a4:	7cfb      	ldrb	r3, [r7, #19]
 80027a6:	2b21      	cmp	r3, #33	; 0x21
 80027a8:	d008      	beq.n	80027bc <HAL_I2C_ER_IRQHandler+0xde>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80027aa:	7cfb      	ldrb	r3, [r7, #19]
 80027ac:	2b29      	cmp	r3, #41	; 0x29
 80027ae:	d005      	beq.n	80027bc <HAL_I2C_ER_IRQHandler+0xde>
 80027b0:	7cfb      	ldrb	r3, [r7, #19]
 80027b2:	2b28      	cmp	r3, #40	; 0x28
 80027b4:	d106      	bne.n	80027c4 <HAL_I2C_ER_IRQHandler+0xe6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	2b21      	cmp	r3, #33	; 0x21
 80027ba:	d103      	bne.n	80027c4 <HAL_I2C_ER_IRQHandler+0xe6>
    {
      I2C_Slave_AF(hi2c);
 80027bc:	6878      	ldr	r0, [r7, #4]
 80027be:	f001 f87d 	bl	80038bc <I2C_Slave_AF>
 80027c2:	e016      	b.n	80027f2 <HAL_I2C_ER_IRQHandler+0x114>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80027cc:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 80027ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027d0:	f043 0304 	orr.w	r3, r3, #4
 80027d4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80027d6:	7efb      	ldrb	r3, [r7, #27]
 80027d8:	2b10      	cmp	r3, #16
 80027da:	d002      	beq.n	80027e2 <HAL_I2C_ER_IRQHandler+0x104>
 80027dc:	7efb      	ldrb	r3, [r7, #27]
 80027de:	2b40      	cmp	r3, #64	; 0x40
 80027e0:	d107      	bne.n	80027f2 <HAL_I2C_ER_IRQHandler+0x114>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	681a      	ldr	r2, [r3, #0]
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027f0:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80027f2:	6a3b      	ldr	r3, [r7, #32]
 80027f4:	0adb      	lsrs	r3, r3, #11
 80027f6:	f003 0301 	and.w	r3, r3, #1
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d00e      	beq.n	800281c <HAL_I2C_ER_IRQHandler+0x13e>
 80027fe:	69fb      	ldr	r3, [r7, #28]
 8002800:	0a1b      	lsrs	r3, r3, #8
 8002802:	f003 0301 	and.w	r3, r3, #1
 8002806:	2b00      	cmp	r3, #0
 8002808:	d008      	beq.n	800281c <HAL_I2C_ER_IRQHandler+0x13e>
  {
    error |= HAL_I2C_ERROR_OVR;
 800280a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800280c:	f043 0308 	orr.w	r3, r3, #8
 8002810:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 800281a:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 800281c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800281e:	2b00      	cmp	r3, #0
 8002820:	d008      	beq.n	8002834 <HAL_I2C_ER_IRQHandler+0x156>
  {
    hi2c->ErrorCode |= error;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002828:	431a      	orrs	r2, r3
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 800282e:	6878      	ldr	r0, [r7, #4]
 8002830:	f001 f8b8 	bl	80039a4 <I2C_ITError>
  }
}
 8002834:	bf00      	nop
 8002836:	3728      	adds	r7, #40	; 0x28
 8002838:	46bd      	mov	sp, r7
 800283a:	bd80      	pop	{r7, pc}

0800283c <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800283c:	b480      	push	{r7}
 800283e:	b083      	sub	sp, #12
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8002844:	bf00      	nop
 8002846:	370c      	adds	r7, #12
 8002848:	46bd      	mov	sp, r7
 800284a:	bc80      	pop	{r7}
 800284c:	4770      	bx	lr

0800284e <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800284e:	b480      	push	{r7}
 8002850:	b083      	sub	sp, #12
 8002852:	af00      	add	r7, sp, #0
 8002854:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8002856:	bf00      	nop
 8002858:	370c      	adds	r7, #12
 800285a:	46bd      	mov	sp, r7
 800285c:	bc80      	pop	{r7}
 800285e:	4770      	bx	lr

08002860 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002860:	b480      	push	{r7}
 8002862:	b083      	sub	sp, #12
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002868:	bf00      	nop
 800286a:	370c      	adds	r7, #12
 800286c:	46bd      	mov	sp, r7
 800286e:	bc80      	pop	{r7}
 8002870:	4770      	bx	lr

08002872 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002872:	b480      	push	{r7}
 8002874:	b083      	sub	sp, #12
 8002876:	af00      	add	r7, sp, #0
 8002878:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800287a:	bf00      	nop
 800287c:	370c      	adds	r7, #12
 800287e:	46bd      	mov	sp, r7
 8002880:	bc80      	pop	{r7}
 8002882:	4770      	bx	lr

08002884 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002884:	b480      	push	{r7}
 8002886:	b083      	sub	sp, #12
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
 800288c:	460b      	mov	r3, r1
 800288e:	70fb      	strb	r3, [r7, #3]
 8002890:	4613      	mov	r3, r2
 8002892:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002894:	bf00      	nop
 8002896:	370c      	adds	r7, #12
 8002898:	46bd      	mov	sp, r7
 800289a:	bc80      	pop	{r7}
 800289c:	4770      	bx	lr

0800289e <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800289e:	b480      	push	{r7}
 80028a0:	b083      	sub	sp, #12
 80028a2:	af00      	add	r7, sp, #0
 80028a4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80028a6:	bf00      	nop
 80028a8:	370c      	adds	r7, #12
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bc80      	pop	{r7}
 80028ae:	4770      	bx	lr

080028b0 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80028b0:	b480      	push	{r7}
 80028b2:	b083      	sub	sp, #12
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80028b8:	bf00      	nop
 80028ba:	370c      	adds	r7, #12
 80028bc:	46bd      	mov	sp, r7
 80028be:	bc80      	pop	{r7}
 80028c0:	4770      	bx	lr

080028c2 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80028c2:	b480      	push	{r7}
 80028c4:	b083      	sub	sp, #12
 80028c6:	af00      	add	r7, sp, #0
 80028c8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80028ca:	bf00      	nop
 80028cc:	370c      	adds	r7, #12
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bc80      	pop	{r7}
 80028d2:	4770      	bx	lr

080028d4 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80028d4:	b480      	push	{r7}
 80028d6:	b083      	sub	sp, #12
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80028dc:	bf00      	nop
 80028de:	370c      	adds	r7, #12
 80028e0:	46bd      	mov	sp, r7
 80028e2:	bc80      	pop	{r7}
 80028e4:	4770      	bx	lr

080028e6 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80028e6:	b480      	push	{r7}
 80028e8:	b083      	sub	sp, #12
 80028ea:	af00      	add	r7, sp, #0
 80028ec:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80028ee:	bf00      	nop
 80028f0:	370c      	adds	r7, #12
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bc80      	pop	{r7}
 80028f6:	4770      	bx	lr

080028f8 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b084      	sub	sp, #16
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002906:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800290e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002914:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800291a:	2b00      	cmp	r3, #0
 800291c:	d150      	bne.n	80029c0 <I2C_MasterTransmit_TXE+0xc8>
 800291e:	7bfb      	ldrb	r3, [r7, #15]
 8002920:	2b21      	cmp	r3, #33	; 0x21
 8002922:	d14d      	bne.n	80029c0 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002924:	68bb      	ldr	r3, [r7, #8]
 8002926:	2b08      	cmp	r3, #8
 8002928:	d01d      	beq.n	8002966 <I2C_MasterTransmit_TXE+0x6e>
 800292a:	68bb      	ldr	r3, [r7, #8]
 800292c:	2b20      	cmp	r3, #32
 800292e:	d01a      	beq.n	8002966 <I2C_MasterTransmit_TXE+0x6e>
 8002930:	68bb      	ldr	r3, [r7, #8]
 8002932:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002936:	d016      	beq.n	8002966 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	685a      	ldr	r2, [r3, #4]
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002946:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2211      	movs	r2, #17
 800294c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	2200      	movs	r2, #0
 8002952:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2220      	movs	r2, #32
 800295a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800295e:	6878      	ldr	r0, [r7, #4]
 8002960:	f7ff ff6c 	bl	800283c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002964:	e060      	b.n	8002a28 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	685a      	ldr	r2, [r3, #4]
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002974:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	681a      	ldr	r2, [r3, #0]
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002984:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	2200      	movs	r2, #0
 800298a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2220      	movs	r2, #32
 8002990:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800299a:	b2db      	uxtb	r3, r3
 800299c:	2b40      	cmp	r3, #64	; 0x40
 800299e:	d107      	bne.n	80029b0 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2200      	movs	r2, #0
 80029a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80029a8:	6878      	ldr	r0, [r7, #4]
 80029aa:	f7ff ff81 	bl	80028b0 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80029ae:	e03b      	b.n	8002a28 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2200      	movs	r2, #0
 80029b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80029b8:	6878      	ldr	r0, [r7, #4]
 80029ba:	f7ff ff3f 	bl	800283c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80029be:	e033      	b.n	8002a28 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80029c0:	7bfb      	ldrb	r3, [r7, #15]
 80029c2:	2b21      	cmp	r3, #33	; 0x21
 80029c4:	d005      	beq.n	80029d2 <I2C_MasterTransmit_TXE+0xda>
 80029c6:	7bbb      	ldrb	r3, [r7, #14]
 80029c8:	2b40      	cmp	r3, #64	; 0x40
 80029ca:	d12d      	bne.n	8002a28 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80029cc:	7bfb      	ldrb	r3, [r7, #15]
 80029ce:	2b22      	cmp	r3, #34	; 0x22
 80029d0:	d12a      	bne.n	8002a28 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029d6:	b29b      	uxth	r3, r3
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d108      	bne.n	80029ee <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	685a      	ldr	r2, [r3, #4]
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80029ea:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80029ec:	e01c      	b.n	8002a28 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80029f4:	b2db      	uxtb	r3, r3
 80029f6:	2b40      	cmp	r3, #64	; 0x40
 80029f8:	d103      	bne.n	8002a02 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80029fa:	6878      	ldr	r0, [r7, #4]
 80029fc:	f000 f88e 	bl	8002b1c <I2C_MemoryTransmit_TXE_BTF>
}
 8002a00:	e012      	b.n	8002a28 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a06:	781a      	ldrb	r2, [r3, #0]
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a12:	1c5a      	adds	r2, r3, #1
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a1c:	b29b      	uxth	r3, r3
 8002a1e:	3b01      	subs	r3, #1
 8002a20:	b29a      	uxth	r2, r3
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002a26:	e7ff      	b.n	8002a28 <I2C_MasterTransmit_TXE+0x130>
 8002a28:	bf00      	nop
 8002a2a:	3710      	adds	r7, #16
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	bd80      	pop	{r7, pc}

08002a30 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b084      	sub	sp, #16
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a3c:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a44:	b2db      	uxtb	r3, r3
 8002a46:	2b21      	cmp	r3, #33	; 0x21
 8002a48:	d164      	bne.n	8002b14 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a4e:	b29b      	uxth	r3, r3
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d012      	beq.n	8002a7a <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a58:	781a      	ldrb	r2, [r3, #0]
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a64:	1c5a      	adds	r2, r3, #1
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a6e:	b29b      	uxth	r3, r3
 8002a70:	3b01      	subs	r3, #1
 8002a72:	b29a      	uxth	r2, r3
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8002a78:	e04c      	b.n	8002b14 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	2b08      	cmp	r3, #8
 8002a7e:	d01d      	beq.n	8002abc <I2C_MasterTransmit_BTF+0x8c>
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	2b20      	cmp	r3, #32
 8002a84:	d01a      	beq.n	8002abc <I2C_MasterTransmit_BTF+0x8c>
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002a8c:	d016      	beq.n	8002abc <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	685a      	ldr	r2, [r3, #4]
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002a9c:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2211      	movs	r2, #17
 8002aa2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2220      	movs	r2, #32
 8002ab0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002ab4:	6878      	ldr	r0, [r7, #4]
 8002ab6:	f7ff fec1 	bl	800283c <HAL_I2C_MasterTxCpltCallback>
}
 8002aba:	e02b      	b.n	8002b14 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	685a      	ldr	r2, [r3, #4]
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002aca:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	681a      	ldr	r2, [r3, #0]
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ada:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2200      	movs	r2, #0
 8002ae0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2220      	movs	r2, #32
 8002ae6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002af0:	b2db      	uxtb	r3, r3
 8002af2:	2b40      	cmp	r3, #64	; 0x40
 8002af4:	d107      	bne.n	8002b06 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	2200      	movs	r2, #0
 8002afa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8002afe:	6878      	ldr	r0, [r7, #4]
 8002b00:	f7ff fed6 	bl	80028b0 <HAL_I2C_MemTxCpltCallback>
}
 8002b04:	e006      	b.n	8002b14 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2200      	movs	r2, #0
 8002b0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8002b0e:	6878      	ldr	r0, [r7, #4]
 8002b10:	f7ff fe94 	bl	800283c <HAL_I2C_MasterTxCpltCallback>
}
 8002b14:	bf00      	nop
 8002b16:	3710      	adds	r7, #16
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bd80      	pop	{r7, pc}

08002b1c <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b084      	sub	sp, #16
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b2a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d11d      	bne.n	8002b70 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b38:	2b01      	cmp	r3, #1
 8002b3a:	d10b      	bne.n	8002b54 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b40:	b2da      	uxtb	r2, r3
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b4c:	1c9a      	adds	r2, r3, #2
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8002b52:	e077      	b.n	8002c44 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b58:	b29b      	uxth	r3, r3
 8002b5a:	121b      	asrs	r3, r3, #8
 8002b5c:	b2da      	uxtb	r2, r3
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b68:	1c5a      	adds	r2, r3, #1
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002b6e:	e069      	b.n	8002c44 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b74:	2b01      	cmp	r3, #1
 8002b76:	d10b      	bne.n	8002b90 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b7c:	b2da      	uxtb	r2, r3
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b88:	1c5a      	adds	r2, r3, #1
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002b8e:	e059      	b.n	8002c44 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b94:	2b02      	cmp	r3, #2
 8002b96:	d152      	bne.n	8002c3e <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8002b98:	7bfb      	ldrb	r3, [r7, #15]
 8002b9a:	2b22      	cmp	r3, #34	; 0x22
 8002b9c:	d10d      	bne.n	8002bba <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	681a      	ldr	r2, [r3, #0]
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002bac:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002bb2:	1c5a      	adds	r2, r3, #1
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002bb8:	e044      	b.n	8002c44 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bbe:	b29b      	uxth	r3, r3
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d015      	beq.n	8002bf0 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8002bc4:	7bfb      	ldrb	r3, [r7, #15]
 8002bc6:	2b21      	cmp	r3, #33	; 0x21
 8002bc8:	d112      	bne.n	8002bf0 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bce:	781a      	ldrb	r2, [r3, #0]
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bda:	1c5a      	adds	r2, r3, #1
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002be4:	b29b      	uxth	r3, r3
 8002be6:	3b01      	subs	r3, #1
 8002be8:	b29a      	uxth	r2, r3
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002bee:	e029      	b.n	8002c44 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bf4:	b29b      	uxth	r3, r3
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d124      	bne.n	8002c44 <I2C_MemoryTransmit_TXE_BTF+0x128>
 8002bfa:	7bfb      	ldrb	r3, [r7, #15]
 8002bfc:	2b21      	cmp	r3, #33	; 0x21
 8002bfe:	d121      	bne.n	8002c44 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	685a      	ldr	r2, [r3, #4]
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002c0e:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	681a      	ldr	r2, [r3, #0]
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c1e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2200      	movs	r2, #0
 8002c24:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2220      	movs	r2, #32
 8002c2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2200      	movs	r2, #0
 8002c32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8002c36:	6878      	ldr	r0, [r7, #4]
 8002c38:	f7ff fe3a 	bl	80028b0 <HAL_I2C_MemTxCpltCallback>
}
 8002c3c:	e002      	b.n	8002c44 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8002c3e:	6878      	ldr	r0, [r7, #4]
 8002c40:	f7ff faca 	bl	80021d8 <I2C_Flush_DR>
}
 8002c44:	bf00      	nop
 8002c46:	3710      	adds	r7, #16
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	bd80      	pop	{r7, pc}

08002c4c <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b084      	sub	sp, #16
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c5a:	b2db      	uxtb	r3, r3
 8002c5c:	2b22      	cmp	r3, #34	; 0x22
 8002c5e:	f040 80b9 	bne.w	8002dd4 <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c66:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c6c:	b29b      	uxth	r3, r3
 8002c6e:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 8002c70:	68bb      	ldr	r3, [r7, #8]
 8002c72:	2b03      	cmp	r3, #3
 8002c74:	d921      	bls.n	8002cba <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	691a      	ldr	r2, [r3, #16]
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c80:	b2d2      	uxtb	r2, r2
 8002c82:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c88:	1c5a      	adds	r2, r3, #1
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c92:	b29b      	uxth	r3, r3
 8002c94:	3b01      	subs	r3, #1
 8002c96:	b29a      	uxth	r2, r3
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ca0:	b29b      	uxth	r3, r3
 8002ca2:	2b03      	cmp	r3, #3
 8002ca4:	f040 8096 	bne.w	8002dd4 <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	685a      	ldr	r2, [r3, #4]
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002cb6:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8002cb8:	e08c      	b.n	8002dd4 <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cbe:	2b02      	cmp	r3, #2
 8002cc0:	d07f      	beq.n	8002dc2 <I2C_MasterReceive_RXNE+0x176>
 8002cc2:	68bb      	ldr	r3, [r7, #8]
 8002cc4:	2b01      	cmp	r3, #1
 8002cc6:	d002      	beq.n	8002cce <I2C_MasterReceive_RXNE+0x82>
 8002cc8:	68bb      	ldr	r3, [r7, #8]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d179      	bne.n	8002dc2 <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002cce:	6878      	ldr	r0, [r7, #4]
 8002cd0:	f001 fa6e 	bl	80041b0 <I2C_WaitOnSTOPRequestThroughIT>
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d14c      	bne.n	8002d74 <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	681a      	ldr	r2, [r3, #0]
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ce8:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	685a      	ldr	r2, [r3, #4]
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002cf8:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	691a      	ldr	r2, [r3, #16]
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d04:	b2d2      	uxtb	r2, r2
 8002d06:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d0c:	1c5a      	adds	r2, r3, #1
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d16:	b29b      	uxth	r3, r3
 8002d18:	3b01      	subs	r3, #1
 8002d1a:	b29a      	uxth	r2, r3
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2220      	movs	r2, #32
 8002d24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002d2e:	b2db      	uxtb	r3, r3
 8002d30:	2b40      	cmp	r3, #64	; 0x40
 8002d32:	d10a      	bne.n	8002d4a <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2200      	movs	r2, #0
 8002d38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2200      	movs	r2, #0
 8002d40:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8002d42:	6878      	ldr	r0, [r7, #4]
 8002d44:	f7ff fdbd 	bl	80028c2 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002d48:	e044      	b.n	8002dd4 <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	2b08      	cmp	r3, #8
 8002d56:	d002      	beq.n	8002d5e <I2C_MasterReceive_RXNE+0x112>
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	2b20      	cmp	r3, #32
 8002d5c:	d103      	bne.n	8002d66 <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2200      	movs	r2, #0
 8002d62:	631a      	str	r2, [r3, #48]	; 0x30
 8002d64:	e002      	b.n	8002d6c <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2212      	movs	r2, #18
 8002d6a:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8002d6c:	6878      	ldr	r0, [r7, #4]
 8002d6e:	f7ff fd6e 	bl	800284e <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002d72:	e02f      	b.n	8002dd4 <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	685a      	ldr	r2, [r3, #4]
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002d82:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	691a      	ldr	r2, [r3, #16]
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d8e:	b2d2      	uxtb	r2, r2
 8002d90:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d96:	1c5a      	adds	r2, r3, #1
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002da0:	b29b      	uxth	r3, r3
 8002da2:	3b01      	subs	r3, #1
 8002da4:	b29a      	uxth	r2, r3
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	2220      	movs	r2, #32
 8002dae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2200      	movs	r2, #0
 8002db6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8002dba:	6878      	ldr	r0, [r7, #4]
 8002dbc:	f7ff fd8a 	bl	80028d4 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002dc0:	e008      	b.n	8002dd4 <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	685a      	ldr	r2, [r3, #4]
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002dd0:	605a      	str	r2, [r3, #4]
}
 8002dd2:	e7ff      	b.n	8002dd4 <I2C_MasterReceive_RXNE+0x188>
 8002dd4:	bf00      	nop
 8002dd6:	3710      	adds	r7, #16
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	bd80      	pop	{r7, pc}

08002ddc <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b084      	sub	sp, #16
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002de8:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dee:	b29b      	uxth	r3, r3
 8002df0:	2b04      	cmp	r3, #4
 8002df2:	d11b      	bne.n	8002e2c <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	685a      	ldr	r2, [r3, #4]
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e02:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	691a      	ldr	r2, [r3, #16]
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e0e:	b2d2      	uxtb	r2, r2
 8002e10:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e16:	1c5a      	adds	r2, r3, #1
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e20:	b29b      	uxth	r3, r3
 8002e22:	3b01      	subs	r3, #1
 8002e24:	b29a      	uxth	r2, r3
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8002e2a:	e0c4      	b.n	8002fb6 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 3U)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e30:	b29b      	uxth	r3, r3
 8002e32:	2b03      	cmp	r3, #3
 8002e34:	d129      	bne.n	8002e8a <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	685a      	ldr	r2, [r3, #4]
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e44:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	2b04      	cmp	r3, #4
 8002e4a:	d00a      	beq.n	8002e62 <I2C_MasterReceive_BTF+0x86>
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	2b02      	cmp	r3, #2
 8002e50:	d007      	beq.n	8002e62 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	681a      	ldr	r2, [r3, #0]
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e60:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	691a      	ldr	r2, [r3, #16]
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e6c:	b2d2      	uxtb	r2, r2
 8002e6e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e74:	1c5a      	adds	r2, r3, #1
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e7e:	b29b      	uxth	r3, r3
 8002e80:	3b01      	subs	r3, #1
 8002e82:	b29a      	uxth	r2, r3
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002e88:	e095      	b.n	8002fb6 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 2U)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e8e:	b29b      	uxth	r3, r3
 8002e90:	2b02      	cmp	r3, #2
 8002e92:	d17d      	bne.n	8002f90 <I2C_MasterReceive_BTF+0x1b4>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	2b01      	cmp	r3, #1
 8002e98:	d002      	beq.n	8002ea0 <I2C_MasterReceive_BTF+0xc4>
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	2b10      	cmp	r3, #16
 8002e9e:	d108      	bne.n	8002eb2 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	681a      	ldr	r2, [r3, #0]
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002eae:	601a      	str	r2, [r3, #0]
 8002eb0:	e016      	b.n	8002ee0 <I2C_MasterReceive_BTF+0x104>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	2b04      	cmp	r3, #4
 8002eb6:	d002      	beq.n	8002ebe <I2C_MasterReceive_BTF+0xe2>
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	2b02      	cmp	r3, #2
 8002ebc:	d108      	bne.n	8002ed0 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	681a      	ldr	r2, [r3, #0]
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002ecc:	601a      	str	r2, [r3, #0]
 8002ece:	e007      	b.n	8002ee0 <I2C_MasterReceive_BTF+0x104>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	681a      	ldr	r2, [r3, #0]
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ede:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	691a      	ldr	r2, [r3, #16]
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eea:	b2d2      	uxtb	r2, r2
 8002eec:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ef2:	1c5a      	adds	r2, r3, #1
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002efc:	b29b      	uxth	r3, r3
 8002efe:	3b01      	subs	r3, #1
 8002f00:	b29a      	uxth	r2, r3
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	691a      	ldr	r2, [r3, #16]
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f10:	b2d2      	uxtb	r2, r2
 8002f12:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f18:	1c5a      	adds	r2, r3, #1
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f22:	b29b      	uxth	r3, r3
 8002f24:	3b01      	subs	r3, #1
 8002f26:	b29a      	uxth	r2, r3
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	685a      	ldr	r2, [r3, #4]
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002f3a:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2220      	movs	r2, #32
 8002f40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002f4a:	b2db      	uxtb	r3, r3
 8002f4c:	2b40      	cmp	r3, #64	; 0x40
 8002f4e:	d10a      	bne.n	8002f66 <I2C_MasterReceive_BTF+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2200      	movs	r2, #0
 8002f54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8002f5e:	6878      	ldr	r0, [r7, #4]
 8002f60:	f7ff fcaf 	bl	80028c2 <HAL_I2C_MemRxCpltCallback>
}
 8002f64:	e027      	b.n	8002fb6 <I2C_MasterReceive_BTF+0x1da>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2200      	movs	r2, #0
 8002f6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	2b08      	cmp	r3, #8
 8002f72:	d002      	beq.n	8002f7a <I2C_MasterReceive_BTF+0x19e>
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	2b20      	cmp	r3, #32
 8002f78:	d103      	bne.n	8002f82 <I2C_MasterReceive_BTF+0x1a6>
        hi2c->PreviousState = I2C_STATE_NONE;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	631a      	str	r2, [r3, #48]	; 0x30
 8002f80:	e002      	b.n	8002f88 <I2C_MasterReceive_BTF+0x1ac>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2212      	movs	r2, #18
 8002f86:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8002f88:	6878      	ldr	r0, [r7, #4]
 8002f8a:	f7ff fc60 	bl	800284e <HAL_I2C_MasterRxCpltCallback>
}
 8002f8e:	e012      	b.n	8002fb6 <I2C_MasterReceive_BTF+0x1da>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	691a      	ldr	r2, [r3, #16]
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f9a:	b2d2      	uxtb	r2, r2
 8002f9c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fa2:	1c5a      	adds	r2, r3, #1
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fac:	b29b      	uxth	r3, r3
 8002fae:	3b01      	subs	r3, #1
 8002fb0:	b29a      	uxth	r2, r3
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002fb6:	bf00      	nop
 8002fb8:	3710      	adds	r7, #16
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bd80      	pop	{r7, pc}

08002fbe <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8002fbe:	b480      	push	{r7}
 8002fc0:	b083      	sub	sp, #12
 8002fc2:	af00      	add	r7, sp, #0
 8002fc4:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002fcc:	b2db      	uxtb	r3, r3
 8002fce:	2b40      	cmp	r3, #64	; 0x40
 8002fd0:	d117      	bne.n	8003002 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d109      	bne.n	8002fee <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fde:	b2db      	uxtb	r3, r3
 8002fe0:	461a      	mov	r2, r3
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002fea:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8002fec:	e067      	b.n	80030be <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ff2:	b2db      	uxtb	r3, r3
 8002ff4:	f043 0301 	orr.w	r3, r3, #1
 8002ff8:	b2da      	uxtb	r2, r3
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	611a      	str	r2, [r3, #16]
}
 8003000:	e05d      	b.n	80030be <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	691b      	ldr	r3, [r3, #16]
 8003006:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800300a:	d133      	bne.n	8003074 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003012:	b2db      	uxtb	r3, r3
 8003014:	2b21      	cmp	r3, #33	; 0x21
 8003016:	d109      	bne.n	800302c <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800301c:	b2db      	uxtb	r3, r3
 800301e:	461a      	mov	r2, r3
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003028:	611a      	str	r2, [r3, #16]
 800302a:	e008      	b.n	800303e <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003030:	b2db      	uxtb	r3, r3
 8003032:	f043 0301 	orr.w	r3, r3, #1
 8003036:	b2da      	uxtb	r2, r3
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003042:	2b00      	cmp	r3, #0
 8003044:	d004      	beq.n	8003050 <I2C_Master_SB+0x92>
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800304a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800304c:	2b00      	cmp	r3, #0
 800304e:	d108      	bne.n	8003062 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003054:	2b00      	cmp	r3, #0
 8003056:	d032      	beq.n	80030be <I2C_Master_SB+0x100>
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800305c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800305e:	2b00      	cmp	r3, #0
 8003060:	d02d      	beq.n	80030be <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	685a      	ldr	r2, [r3, #4]
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003070:	605a      	str	r2, [r3, #4]
}
 8003072:	e024      	b.n	80030be <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003078:	2b00      	cmp	r3, #0
 800307a:	d10e      	bne.n	800309a <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003080:	b29b      	uxth	r3, r3
 8003082:	11db      	asrs	r3, r3, #7
 8003084:	b2db      	uxtb	r3, r3
 8003086:	f003 0306 	and.w	r3, r3, #6
 800308a:	b2db      	uxtb	r3, r3
 800308c:	f063 030f 	orn	r3, r3, #15
 8003090:	b2da      	uxtb	r2, r3
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	611a      	str	r2, [r3, #16]
}
 8003098:	e011      	b.n	80030be <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800309e:	2b01      	cmp	r3, #1
 80030a0:	d10d      	bne.n	80030be <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030a6:	b29b      	uxth	r3, r3
 80030a8:	11db      	asrs	r3, r3, #7
 80030aa:	b2db      	uxtb	r3, r3
 80030ac:	f003 0306 	and.w	r3, r3, #6
 80030b0:	b2db      	uxtb	r3, r3
 80030b2:	f063 030e 	orn	r3, r3, #14
 80030b6:	b2da      	uxtb	r2, r3
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	611a      	str	r2, [r3, #16]
}
 80030be:	bf00      	nop
 80030c0:	370c      	adds	r7, #12
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bc80      	pop	{r7}
 80030c6:	4770      	bx	lr

080030c8 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80030c8:	b480      	push	{r7}
 80030ca:	b083      	sub	sp, #12
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030d4:	b2da      	uxtb	r2, r3
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d004      	beq.n	80030ee <I2C_Master_ADD10+0x26>
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d108      	bne.n	8003100 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d00c      	beq.n	8003110 <I2C_Master_ADD10+0x48>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d007      	beq.n	8003110 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	685a      	ldr	r2, [r3, #4]
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800310e:	605a      	str	r2, [r3, #4]
  }
}
 8003110:	bf00      	nop
 8003112:	370c      	adds	r7, #12
 8003114:	46bd      	mov	sp, r7
 8003116:	bc80      	pop	{r7}
 8003118:	4770      	bx	lr

0800311a <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800311a:	b480      	push	{r7}
 800311c:	b091      	sub	sp, #68	; 0x44
 800311e:	af00      	add	r7, sp, #0
 8003120:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003128:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003130:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003136:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800313e:	b2db      	uxtb	r3, r3
 8003140:	2b22      	cmp	r3, #34	; 0x22
 8003142:	f040 8174 	bne.w	800342e <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800314a:	2b00      	cmp	r3, #0
 800314c:	d10f      	bne.n	800316e <I2C_Master_ADDR+0x54>
 800314e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003152:	2b40      	cmp	r3, #64	; 0x40
 8003154:	d10b      	bne.n	800316e <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003156:	2300      	movs	r3, #0
 8003158:	633b      	str	r3, [r7, #48]	; 0x30
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	695b      	ldr	r3, [r3, #20]
 8003160:	633b      	str	r3, [r7, #48]	; 0x30
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	699b      	ldr	r3, [r3, #24]
 8003168:	633b      	str	r3, [r7, #48]	; 0x30
 800316a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800316c:	e16b      	b.n	8003446 <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003172:	2b00      	cmp	r3, #0
 8003174:	d11d      	bne.n	80031b2 <I2C_Master_ADDR+0x98>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	691b      	ldr	r3, [r3, #16]
 800317a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800317e:	d118      	bne.n	80031b2 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003180:	2300      	movs	r3, #0
 8003182:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	695b      	ldr	r3, [r3, #20]
 800318a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	699b      	ldr	r3, [r3, #24]
 8003192:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003194:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	681a      	ldr	r2, [r3, #0]
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80031a4:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031aa:	1c5a      	adds	r2, r3, #1
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	651a      	str	r2, [r3, #80]	; 0x50
 80031b0:	e149      	b.n	8003446 <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031b6:	b29b      	uxth	r3, r3
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d113      	bne.n	80031e4 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031bc:	2300      	movs	r3, #0
 80031be:	62bb      	str	r3, [r7, #40]	; 0x28
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	695b      	ldr	r3, [r3, #20]
 80031c6:	62bb      	str	r3, [r7, #40]	; 0x28
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	699b      	ldr	r3, [r3, #24]
 80031ce:	62bb      	str	r3, [r7, #40]	; 0x28
 80031d0:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	681a      	ldr	r2, [r3, #0]
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031e0:	601a      	str	r2, [r3, #0]
 80031e2:	e120      	b.n	8003426 <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031e8:	b29b      	uxth	r3, r3
 80031ea:	2b01      	cmp	r3, #1
 80031ec:	f040 808a 	bne.w	8003304 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80031f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031f2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80031f6:	d137      	bne.n	8003268 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	681a      	ldr	r2, [r3, #0]
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003206:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003212:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003216:	d113      	bne.n	8003240 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	681a      	ldr	r2, [r3, #0]
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003226:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003228:	2300      	movs	r3, #0
 800322a:	627b      	str	r3, [r7, #36]	; 0x24
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	695b      	ldr	r3, [r3, #20]
 8003232:	627b      	str	r3, [r7, #36]	; 0x24
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	699b      	ldr	r3, [r3, #24]
 800323a:	627b      	str	r3, [r7, #36]	; 0x24
 800323c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800323e:	e0f2      	b.n	8003426 <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003240:	2300      	movs	r3, #0
 8003242:	623b      	str	r3, [r7, #32]
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	695b      	ldr	r3, [r3, #20]
 800324a:	623b      	str	r3, [r7, #32]
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	699b      	ldr	r3, [r3, #24]
 8003252:	623b      	str	r3, [r7, #32]
 8003254:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	681a      	ldr	r2, [r3, #0]
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003264:	601a      	str	r2, [r3, #0]
 8003266:	e0de      	b.n	8003426 <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8003268:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800326a:	2b08      	cmp	r3, #8
 800326c:	d02e      	beq.n	80032cc <I2C_Master_ADDR+0x1b2>
 800326e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003270:	2b20      	cmp	r3, #32
 8003272:	d02b      	beq.n	80032cc <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8003274:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003276:	2b12      	cmp	r3, #18
 8003278:	d102      	bne.n	8003280 <I2C_Master_ADDR+0x166>
 800327a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800327c:	2b01      	cmp	r3, #1
 800327e:	d125      	bne.n	80032cc <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003280:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003282:	2b04      	cmp	r3, #4
 8003284:	d00e      	beq.n	80032a4 <I2C_Master_ADDR+0x18a>
 8003286:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003288:	2b02      	cmp	r3, #2
 800328a:	d00b      	beq.n	80032a4 <I2C_Master_ADDR+0x18a>
 800328c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800328e:	2b10      	cmp	r3, #16
 8003290:	d008      	beq.n	80032a4 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	681a      	ldr	r2, [r3, #0]
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032a0:	601a      	str	r2, [r3, #0]
 80032a2:	e007      	b.n	80032b4 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	681a      	ldr	r2, [r3, #0]
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80032b2:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032b4:	2300      	movs	r3, #0
 80032b6:	61fb      	str	r3, [r7, #28]
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	695b      	ldr	r3, [r3, #20]
 80032be:	61fb      	str	r3, [r7, #28]
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	699b      	ldr	r3, [r3, #24]
 80032c6:	61fb      	str	r3, [r7, #28]
 80032c8:	69fb      	ldr	r3, [r7, #28]
 80032ca:	e0ac      	b.n	8003426 <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	681a      	ldr	r2, [r3, #0]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032da:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032dc:	2300      	movs	r3, #0
 80032de:	61bb      	str	r3, [r7, #24]
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	695b      	ldr	r3, [r3, #20]
 80032e6:	61bb      	str	r3, [r7, #24]
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	699b      	ldr	r3, [r3, #24]
 80032ee:	61bb      	str	r3, [r7, #24]
 80032f0:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	681a      	ldr	r2, [r3, #0]
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003300:	601a      	str	r2, [r3, #0]
 8003302:	e090      	b.n	8003426 <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003308:	b29b      	uxth	r3, r3
 800330a:	2b02      	cmp	r3, #2
 800330c:	d158      	bne.n	80033c0 <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800330e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003310:	2b04      	cmp	r3, #4
 8003312:	d021      	beq.n	8003358 <I2C_Master_ADDR+0x23e>
 8003314:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003316:	2b02      	cmp	r3, #2
 8003318:	d01e      	beq.n	8003358 <I2C_Master_ADDR+0x23e>
 800331a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800331c:	2b10      	cmp	r3, #16
 800331e:	d01b      	beq.n	8003358 <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	681a      	ldr	r2, [r3, #0]
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800332e:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003330:	2300      	movs	r3, #0
 8003332:	617b      	str	r3, [r7, #20]
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	695b      	ldr	r3, [r3, #20]
 800333a:	617b      	str	r3, [r7, #20]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	699b      	ldr	r3, [r3, #24]
 8003342:	617b      	str	r3, [r7, #20]
 8003344:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	681a      	ldr	r2, [r3, #0]
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003354:	601a      	str	r2, [r3, #0]
 8003356:	e012      	b.n	800337e <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	681a      	ldr	r2, [r3, #0]
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003366:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003368:	2300      	movs	r3, #0
 800336a:	613b      	str	r3, [r7, #16]
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	695b      	ldr	r3, [r3, #20]
 8003372:	613b      	str	r3, [r7, #16]
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	699b      	ldr	r3, [r3, #24]
 800337a:	613b      	str	r3, [r7, #16]
 800337c:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003388:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800338c:	d14b      	bne.n	8003426 <I2C_Master_ADDR+0x30c>
 800338e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003390:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003394:	d00b      	beq.n	80033ae <I2C_Master_ADDR+0x294>
 8003396:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003398:	2b01      	cmp	r3, #1
 800339a:	d008      	beq.n	80033ae <I2C_Master_ADDR+0x294>
 800339c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800339e:	2b08      	cmp	r3, #8
 80033a0:	d005      	beq.n	80033ae <I2C_Master_ADDR+0x294>
 80033a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033a4:	2b10      	cmp	r3, #16
 80033a6:	d002      	beq.n	80033ae <I2C_Master_ADDR+0x294>
 80033a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033aa:	2b20      	cmp	r3, #32
 80033ac:	d13b      	bne.n	8003426 <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	685a      	ldr	r2, [r3, #4]
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80033bc:	605a      	str	r2, [r3, #4]
 80033be:	e032      	b.n	8003426 <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	681a      	ldr	r2, [r3, #0]
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80033ce:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	685b      	ldr	r3, [r3, #4]
 80033d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80033da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80033de:	d117      	bne.n	8003410 <I2C_Master_ADDR+0x2f6>
 80033e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033e2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80033e6:	d00b      	beq.n	8003400 <I2C_Master_ADDR+0x2e6>
 80033e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033ea:	2b01      	cmp	r3, #1
 80033ec:	d008      	beq.n	8003400 <I2C_Master_ADDR+0x2e6>
 80033ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033f0:	2b08      	cmp	r3, #8
 80033f2:	d005      	beq.n	8003400 <I2C_Master_ADDR+0x2e6>
 80033f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033f6:	2b10      	cmp	r3, #16
 80033f8:	d002      	beq.n	8003400 <I2C_Master_ADDR+0x2e6>
 80033fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033fc:	2b20      	cmp	r3, #32
 80033fe:	d107      	bne.n	8003410 <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	685a      	ldr	r2, [r3, #4]
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800340e:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003410:	2300      	movs	r3, #0
 8003412:	60fb      	str	r3, [r7, #12]
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	695b      	ldr	r3, [r3, #20]
 800341a:	60fb      	str	r3, [r7, #12]
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	699b      	ldr	r3, [r3, #24]
 8003422:	60fb      	str	r3, [r7, #12]
 8003424:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2200      	movs	r2, #0
 800342a:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800342c:	e00b      	b.n	8003446 <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800342e:	2300      	movs	r3, #0
 8003430:	60bb      	str	r3, [r7, #8]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	695b      	ldr	r3, [r3, #20]
 8003438:	60bb      	str	r3, [r7, #8]
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	699b      	ldr	r3, [r3, #24]
 8003440:	60bb      	str	r3, [r7, #8]
 8003442:	68bb      	ldr	r3, [r7, #8]
}
 8003444:	e7ff      	b.n	8003446 <I2C_Master_ADDR+0x32c>
 8003446:	bf00      	nop
 8003448:	3744      	adds	r7, #68	; 0x44
 800344a:	46bd      	mov	sp, r7
 800344c:	bc80      	pop	{r7}
 800344e:	4770      	bx	lr

08003450 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b084      	sub	sp, #16
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800345e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003464:	b29b      	uxth	r3, r3
 8003466:	2b00      	cmp	r3, #0
 8003468:	d02b      	beq.n	80034c2 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800346e:	781a      	ldrb	r2, [r3, #0]
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800347a:	1c5a      	adds	r2, r3, #1
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003484:	b29b      	uxth	r3, r3
 8003486:	3b01      	subs	r3, #1
 8003488:	b29a      	uxth	r2, r3
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003492:	b29b      	uxth	r3, r3
 8003494:	2b00      	cmp	r3, #0
 8003496:	d114      	bne.n	80034c2 <I2C_SlaveTransmit_TXE+0x72>
 8003498:	7bfb      	ldrb	r3, [r7, #15]
 800349a:	2b29      	cmp	r3, #41	; 0x29
 800349c:	d111      	bne.n	80034c2 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	685a      	ldr	r2, [r3, #4]
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80034ac:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2221      	movs	r2, #33	; 0x21
 80034b2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2228      	movs	r2, #40	; 0x28
 80034b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80034bc:	6878      	ldr	r0, [r7, #4]
 80034be:	f7ff f9cf 	bl	8002860 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80034c2:	bf00      	nop
 80034c4:	3710      	adds	r7, #16
 80034c6:	46bd      	mov	sp, r7
 80034c8:	bd80      	pop	{r7, pc}

080034ca <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80034ca:	b480      	push	{r7}
 80034cc:	b083      	sub	sp, #12
 80034ce:	af00      	add	r7, sp, #0
 80034d0:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034d6:	b29b      	uxth	r3, r3
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d011      	beq.n	8003500 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034e0:	781a      	ldrb	r2, [r3, #0]
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ec:	1c5a      	adds	r2, r3, #1
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034f6:	b29b      	uxth	r3, r3
 80034f8:	3b01      	subs	r3, #1
 80034fa:	b29a      	uxth	r2, r3
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8003500:	bf00      	nop
 8003502:	370c      	adds	r7, #12
 8003504:	46bd      	mov	sp, r7
 8003506:	bc80      	pop	{r7}
 8003508:	4770      	bx	lr

0800350a <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800350a:	b580      	push	{r7, lr}
 800350c:	b084      	sub	sp, #16
 800350e:	af00      	add	r7, sp, #0
 8003510:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003518:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800351e:	b29b      	uxth	r3, r3
 8003520:	2b00      	cmp	r3, #0
 8003522:	d02c      	beq.n	800357e <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	691a      	ldr	r2, [r3, #16]
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800352e:	b2d2      	uxtb	r2, r2
 8003530:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003536:	1c5a      	adds	r2, r3, #1
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003540:	b29b      	uxth	r3, r3
 8003542:	3b01      	subs	r3, #1
 8003544:	b29a      	uxth	r2, r3
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800354e:	b29b      	uxth	r3, r3
 8003550:	2b00      	cmp	r3, #0
 8003552:	d114      	bne.n	800357e <I2C_SlaveReceive_RXNE+0x74>
 8003554:	7bfb      	ldrb	r3, [r7, #15]
 8003556:	2b2a      	cmp	r3, #42	; 0x2a
 8003558:	d111      	bne.n	800357e <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	685a      	ldr	r2, [r3, #4]
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003568:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2222      	movs	r2, #34	; 0x22
 800356e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2228      	movs	r2, #40	; 0x28
 8003574:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003578:	6878      	ldr	r0, [r7, #4]
 800357a:	f7ff f97a 	bl	8002872 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800357e:	bf00      	nop
 8003580:	3710      	adds	r7, #16
 8003582:	46bd      	mov	sp, r7
 8003584:	bd80      	pop	{r7, pc}

08003586 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003586:	b480      	push	{r7}
 8003588:	b083      	sub	sp, #12
 800358a:	af00      	add	r7, sp, #0
 800358c:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003592:	b29b      	uxth	r3, r3
 8003594:	2b00      	cmp	r3, #0
 8003596:	d012      	beq.n	80035be <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	691a      	ldr	r2, [r3, #16]
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035a2:	b2d2      	uxtb	r2, r2
 80035a4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035aa:	1c5a      	adds	r2, r3, #1
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035b4:	b29b      	uxth	r3, r3
 80035b6:	3b01      	subs	r3, #1
 80035b8:	b29a      	uxth	r2, r3
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80035be:	bf00      	nop
 80035c0:	370c      	adds	r7, #12
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bc80      	pop	{r7}
 80035c6:	4770      	bx	lr

080035c8 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b084      	sub	sp, #16
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
 80035d0:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80035d2:	2300      	movs	r3, #0
 80035d4:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035dc:	b2db      	uxtb	r3, r3
 80035de:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80035e2:	2b28      	cmp	r3, #40	; 0x28
 80035e4:	d127      	bne.n	8003636 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	685a      	ldr	r2, [r3, #4]
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035f4:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	089b      	lsrs	r3, r3, #2
 80035fa:	f003 0301 	and.w	r3, r3, #1
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d101      	bne.n	8003606 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8003602:	2301      	movs	r3, #1
 8003604:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	09db      	lsrs	r3, r3, #7
 800360a:	f003 0301 	and.w	r3, r3, #1
 800360e:	2b00      	cmp	r3, #0
 8003610:	d103      	bne.n	800361a <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	68db      	ldr	r3, [r3, #12]
 8003616:	81bb      	strh	r3, [r7, #12]
 8003618:	e002      	b.n	8003620 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	699b      	ldr	r3, [r3, #24]
 800361e:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2200      	movs	r2, #0
 8003624:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8003628:	89ba      	ldrh	r2, [r7, #12]
 800362a:	7bfb      	ldrb	r3, [r7, #15]
 800362c:	4619      	mov	r1, r3
 800362e:	6878      	ldr	r0, [r7, #4]
 8003630:	f7ff f928 	bl	8002884 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003634:	e00e      	b.n	8003654 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003636:	2300      	movs	r3, #0
 8003638:	60bb      	str	r3, [r7, #8]
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	695b      	ldr	r3, [r3, #20]
 8003640:	60bb      	str	r3, [r7, #8]
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	699b      	ldr	r3, [r3, #24]
 8003648:	60bb      	str	r3, [r7, #8]
 800364a:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2200      	movs	r2, #0
 8003650:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8003654:	bf00      	nop
 8003656:	3710      	adds	r7, #16
 8003658:	46bd      	mov	sp, r7
 800365a:	bd80      	pop	{r7, pc}

0800365c <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b084      	sub	sp, #16
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800366a:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	685a      	ldr	r2, [r3, #4]
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800367a:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 800367c:	2300      	movs	r3, #0
 800367e:	60bb      	str	r3, [r7, #8]
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	695b      	ldr	r3, [r3, #20]
 8003686:	60bb      	str	r3, [r7, #8]
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	681a      	ldr	r2, [r3, #0]
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f042 0201 	orr.w	r2, r2, #1
 8003696:	601a      	str	r2, [r3, #0]
 8003698:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	681a      	ldr	r2, [r3, #0]
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036a8:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80036b4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80036b8:	d172      	bne.n	80037a0 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80036ba:	7bfb      	ldrb	r3, [r7, #15]
 80036bc:	2b22      	cmp	r3, #34	; 0x22
 80036be:	d002      	beq.n	80036c6 <I2C_Slave_STOPF+0x6a>
 80036c0:	7bfb      	ldrb	r3, [r7, #15]
 80036c2:	2b2a      	cmp	r3, #42	; 0x2a
 80036c4:	d135      	bne.n	8003732 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	685b      	ldr	r3, [r3, #4]
 80036ce:	b29a      	uxth	r2, r3
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036d8:	b29b      	uxth	r3, r3
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d005      	beq.n	80036ea <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036e2:	f043 0204 	orr.w	r2, r3, #4
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	685a      	ldr	r2, [r3, #4]
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80036f8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036fe:	4618      	mov	r0, r3
 8003700:	f7fe fa4c 	bl	8001b9c <HAL_DMA_GetState>
 8003704:	4603      	mov	r3, r0
 8003706:	2b01      	cmp	r3, #1
 8003708:	d049      	beq.n	800379e <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800370e:	4a69      	ldr	r2, [pc, #420]	; (80038b4 <I2C_Slave_STOPF+0x258>)
 8003710:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003716:	4618      	mov	r0, r3
 8003718:	f7fe f9c8 	bl	8001aac <HAL_DMA_Abort_IT>
 800371c:	4603      	mov	r3, r0
 800371e:	2b00      	cmp	r3, #0
 8003720:	d03d      	beq.n	800379e <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003726:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003728:	687a      	ldr	r2, [r7, #4]
 800372a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800372c:	4610      	mov	r0, r2
 800372e:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003730:	e035      	b.n	800379e <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	685b      	ldr	r3, [r3, #4]
 800373a:	b29a      	uxth	r2, r3
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003744:	b29b      	uxth	r3, r3
 8003746:	2b00      	cmp	r3, #0
 8003748:	d005      	beq.n	8003756 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800374e:	f043 0204 	orr.w	r2, r3, #4
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	685a      	ldr	r2, [r3, #4]
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003764:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800376a:	4618      	mov	r0, r3
 800376c:	f7fe fa16 	bl	8001b9c <HAL_DMA_GetState>
 8003770:	4603      	mov	r3, r0
 8003772:	2b01      	cmp	r3, #1
 8003774:	d014      	beq.n	80037a0 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800377a:	4a4e      	ldr	r2, [pc, #312]	; (80038b4 <I2C_Slave_STOPF+0x258>)
 800377c:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003782:	4618      	mov	r0, r3
 8003784:	f7fe f992 	bl	8001aac <HAL_DMA_Abort_IT>
 8003788:	4603      	mov	r3, r0
 800378a:	2b00      	cmp	r3, #0
 800378c:	d008      	beq.n	80037a0 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003792:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003794:	687a      	ldr	r2, [r7, #4]
 8003796:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003798:	4610      	mov	r0, r2
 800379a:	4798      	blx	r3
 800379c:	e000      	b.n	80037a0 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800379e:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037a4:	b29b      	uxth	r3, r3
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d03e      	beq.n	8003828 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	695b      	ldr	r3, [r3, #20]
 80037b0:	f003 0304 	and.w	r3, r3, #4
 80037b4:	2b04      	cmp	r3, #4
 80037b6:	d112      	bne.n	80037de <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	691a      	ldr	r2, [r3, #16]
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037c2:	b2d2      	uxtb	r2, r2
 80037c4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ca:	1c5a      	adds	r2, r3, #1
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037d4:	b29b      	uxth	r3, r3
 80037d6:	3b01      	subs	r3, #1
 80037d8:	b29a      	uxth	r2, r3
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	695b      	ldr	r3, [r3, #20]
 80037e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037e8:	2b40      	cmp	r3, #64	; 0x40
 80037ea:	d112      	bne.n	8003812 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	691a      	ldr	r2, [r3, #16]
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037f6:	b2d2      	uxtb	r2, r2
 80037f8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037fe:	1c5a      	adds	r2, r3, #1
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003808:	b29b      	uxth	r3, r3
 800380a:	3b01      	subs	r3, #1
 800380c:	b29a      	uxth	r2, r3
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003816:	b29b      	uxth	r3, r3
 8003818:	2b00      	cmp	r3, #0
 800381a:	d005      	beq.n	8003828 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003820:	f043 0204 	orr.w	r2, r3, #4
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800382c:	2b00      	cmp	r3, #0
 800382e:	d003      	beq.n	8003838 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8003830:	6878      	ldr	r0, [r7, #4]
 8003832:	f000 f8b7 	bl	80039a4 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8003836:	e039      	b.n	80038ac <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003838:	7bfb      	ldrb	r3, [r7, #15]
 800383a:	2b2a      	cmp	r3, #42	; 0x2a
 800383c:	d109      	bne.n	8003852 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2200      	movs	r2, #0
 8003842:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2228      	movs	r2, #40	; 0x28
 8003848:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800384c:	6878      	ldr	r0, [r7, #4]
 800384e:	f7ff f810 	bl	8002872 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003858:	b2db      	uxtb	r3, r3
 800385a:	2b28      	cmp	r3, #40	; 0x28
 800385c:	d111      	bne.n	8003882 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	4a15      	ldr	r2, [pc, #84]	; (80038b8 <I2C_Slave_STOPF+0x25c>)
 8003862:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2200      	movs	r2, #0
 8003868:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2220      	movs	r2, #32
 800386e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2200      	movs	r2, #0
 8003876:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800387a:	6878      	ldr	r0, [r7, #4]
 800387c:	f7ff f80f 	bl	800289e <HAL_I2C_ListenCpltCallback>
}
 8003880:	e014      	b.n	80038ac <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003886:	2b22      	cmp	r3, #34	; 0x22
 8003888:	d002      	beq.n	8003890 <I2C_Slave_STOPF+0x234>
 800388a:	7bfb      	ldrb	r3, [r7, #15]
 800388c:	2b22      	cmp	r3, #34	; 0x22
 800388e:	d10d      	bne.n	80038ac <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2200      	movs	r2, #0
 8003894:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2220      	movs	r2, #32
 800389a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2200      	movs	r2, #0
 80038a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80038a6:	6878      	ldr	r0, [r7, #4]
 80038a8:	f7fe ffe3 	bl	8002872 <HAL_I2C_SlaveRxCpltCallback>
}
 80038ac:	bf00      	nop
 80038ae:	3710      	adds	r7, #16
 80038b0:	46bd      	mov	sp, r7
 80038b2:	bd80      	pop	{r7, pc}
 80038b4:	08003d0d 	.word	0x08003d0d
 80038b8:	ffff0000 	.word	0xffff0000

080038bc <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b084      	sub	sp, #16
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038ca:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038d0:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80038d2:	68bb      	ldr	r3, [r7, #8]
 80038d4:	2b08      	cmp	r3, #8
 80038d6:	d002      	beq.n	80038de <I2C_Slave_AF+0x22>
 80038d8:	68bb      	ldr	r3, [r7, #8]
 80038da:	2b20      	cmp	r3, #32
 80038dc:	d129      	bne.n	8003932 <I2C_Slave_AF+0x76>
 80038de:	7bfb      	ldrb	r3, [r7, #15]
 80038e0:	2b28      	cmp	r3, #40	; 0x28
 80038e2:	d126      	bne.n	8003932 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	4a2e      	ldr	r2, [pc, #184]	; (80039a0 <I2C_Slave_AF+0xe4>)
 80038e8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	685a      	ldr	r2, [r3, #4]
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80038f8:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003902:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	681a      	ldr	r2, [r3, #0]
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003912:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2200      	movs	r2, #0
 8003918:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2220      	movs	r2, #32
 800391e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2200      	movs	r2, #0
 8003926:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800392a:	6878      	ldr	r0, [r7, #4]
 800392c:	f7fe ffb7 	bl	800289e <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8003930:	e031      	b.n	8003996 <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003932:	7bfb      	ldrb	r3, [r7, #15]
 8003934:	2b21      	cmp	r3, #33	; 0x21
 8003936:	d129      	bne.n	800398c <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	4a19      	ldr	r2, [pc, #100]	; (80039a0 <I2C_Slave_AF+0xe4>)
 800393c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2221      	movs	r2, #33	; 0x21
 8003942:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2220      	movs	r2, #32
 8003948:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2200      	movs	r2, #0
 8003950:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	685a      	ldr	r2, [r3, #4]
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003962:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800396c:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	681a      	ldr	r2, [r3, #0]
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800397c:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 800397e:	6878      	ldr	r0, [r7, #4]
 8003980:	f7fe fc2a 	bl	80021d8 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003984:	6878      	ldr	r0, [r7, #4]
 8003986:	f7fe ff6b 	bl	8002860 <HAL_I2C_SlaveTxCpltCallback>
}
 800398a:	e004      	b.n	8003996 <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003994:	615a      	str	r2, [r3, #20]
}
 8003996:	bf00      	nop
 8003998:	3710      	adds	r7, #16
 800399a:	46bd      	mov	sp, r7
 800399c:	bd80      	pop	{r7, pc}
 800399e:	bf00      	nop
 80039a0:	ffff0000 	.word	0xffff0000

080039a4 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b084      	sub	sp, #16
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039b2:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80039ba:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80039bc:	7bbb      	ldrb	r3, [r7, #14]
 80039be:	2b10      	cmp	r3, #16
 80039c0:	d002      	beq.n	80039c8 <I2C_ITError+0x24>
 80039c2:	7bbb      	ldrb	r3, [r7, #14]
 80039c4:	2b40      	cmp	r3, #64	; 0x40
 80039c6:	d10a      	bne.n	80039de <I2C_ITError+0x3a>
 80039c8:	7bfb      	ldrb	r3, [r7, #15]
 80039ca:	2b22      	cmp	r3, #34	; 0x22
 80039cc:	d107      	bne.n	80039de <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	681a      	ldr	r2, [r3, #0]
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80039dc:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80039de:	7bfb      	ldrb	r3, [r7, #15]
 80039e0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80039e4:	2b28      	cmp	r3, #40	; 0x28
 80039e6:	d107      	bne.n	80039f8 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2200      	movs	r2, #0
 80039ec:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2228      	movs	r2, #40	; 0x28
 80039f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80039f6:	e015      	b.n	8003a24 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	685b      	ldr	r3, [r3, #4]
 80039fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a02:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a06:	d00a      	beq.n	8003a1e <I2C_ITError+0x7a>
 8003a08:	7bfb      	ldrb	r3, [r7, #15]
 8003a0a:	2b60      	cmp	r3, #96	; 0x60
 8003a0c:	d007      	beq.n	8003a1e <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2220      	movs	r2, #32
 8003a12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2200      	movs	r2, #0
 8003a1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2200      	movs	r2, #0
 8003a22:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	685b      	ldr	r3, [r3, #4]
 8003a2a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a2e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a32:	d162      	bne.n	8003afa <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	685a      	ldr	r2, [r3, #4]
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003a42:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a48:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003a4c:	b2db      	uxtb	r3, r3
 8003a4e:	2b01      	cmp	r3, #1
 8003a50:	d020      	beq.n	8003a94 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a56:	4a6a      	ldr	r2, [pc, #424]	; (8003c00 <I2C_ITError+0x25c>)
 8003a58:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a5e:	4618      	mov	r0, r3
 8003a60:	f7fe f824 	bl	8001aac <HAL_DMA_Abort_IT>
 8003a64:	4603      	mov	r3, r0
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	f000 8089 	beq.w	8003b7e <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	681a      	ldr	r2, [r3, #0]
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f022 0201 	bic.w	r2, r2, #1
 8003a7a:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2220      	movs	r2, #32
 8003a80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a8a:	687a      	ldr	r2, [r7, #4]
 8003a8c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003a8e:	4610      	mov	r0, r2
 8003a90:	4798      	blx	r3
 8003a92:	e074      	b.n	8003b7e <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a98:	4a59      	ldr	r2, [pc, #356]	; (8003c00 <I2C_ITError+0x25c>)
 8003a9a:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	f7fe f803 	bl	8001aac <HAL_DMA_Abort_IT>
 8003aa6:	4603      	mov	r3, r0
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d068      	beq.n	8003b7e <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	695b      	ldr	r3, [r3, #20]
 8003ab2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ab6:	2b40      	cmp	r3, #64	; 0x40
 8003ab8:	d10b      	bne.n	8003ad2 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	691a      	ldr	r2, [r3, #16]
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ac4:	b2d2      	uxtb	r2, r2
 8003ac6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003acc:	1c5a      	adds	r2, r3, #1
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	681a      	ldr	r2, [r3, #0]
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f022 0201 	bic.w	r2, r2, #1
 8003ae0:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2220      	movs	r2, #32
 8003ae6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003af0:	687a      	ldr	r2, [r7, #4]
 8003af2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003af4:	4610      	mov	r0, r2
 8003af6:	4798      	blx	r3
 8003af8:	e041      	b.n	8003b7e <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b00:	b2db      	uxtb	r3, r3
 8003b02:	2b60      	cmp	r3, #96	; 0x60
 8003b04:	d125      	bne.n	8003b52 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2220      	movs	r2, #32
 8003b0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2200      	movs	r2, #0
 8003b12:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	695b      	ldr	r3, [r3, #20]
 8003b1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b1e:	2b40      	cmp	r3, #64	; 0x40
 8003b20:	d10b      	bne.n	8003b3a <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	691a      	ldr	r2, [r3, #16]
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b2c:	b2d2      	uxtb	r2, r2
 8003b2e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b34:	1c5a      	adds	r2, r3, #1
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	681a      	ldr	r2, [r3, #0]
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f022 0201 	bic.w	r2, r2, #1
 8003b48:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003b4a:	6878      	ldr	r0, [r7, #4]
 8003b4c:	f7fe fecb 	bl	80028e6 <HAL_I2C_AbortCpltCallback>
 8003b50:	e015      	b.n	8003b7e <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	695b      	ldr	r3, [r3, #20]
 8003b58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b5c:	2b40      	cmp	r3, #64	; 0x40
 8003b5e:	d10b      	bne.n	8003b78 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	691a      	ldr	r2, [r3, #16]
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b6a:	b2d2      	uxtb	r2, r2
 8003b6c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b72:	1c5a      	adds	r2, r3, #1
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8003b78:	6878      	ldr	r0, [r7, #4]
 8003b7a:	f7fe feab 	bl	80028d4 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b82:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003b84:	68bb      	ldr	r3, [r7, #8]
 8003b86:	f003 0301 	and.w	r3, r3, #1
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d10e      	bne.n	8003bac <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003b8e:	68bb      	ldr	r3, [r7, #8]
 8003b90:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d109      	bne.n	8003bac <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003b98:	68bb      	ldr	r3, [r7, #8]
 8003b9a:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d104      	bne.n	8003bac <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8003ba2:	68bb      	ldr	r3, [r7, #8]
 8003ba4:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d007      	beq.n	8003bbc <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	685a      	ldr	r2, [r3, #4]
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003bba:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bc2:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bc8:	f003 0304 	and.w	r3, r3, #4
 8003bcc:	2b04      	cmp	r3, #4
 8003bce:	d113      	bne.n	8003bf8 <I2C_ITError+0x254>
 8003bd0:	7bfb      	ldrb	r3, [r7, #15]
 8003bd2:	2b28      	cmp	r3, #40	; 0x28
 8003bd4:	d110      	bne.n	8003bf8 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	4a0a      	ldr	r2, [pc, #40]	; (8003c04 <I2C_ITError+0x260>)
 8003bda:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2200      	movs	r2, #0
 8003be0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2220      	movs	r2, #32
 8003be6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2200      	movs	r2, #0
 8003bee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8003bf2:	6878      	ldr	r0, [r7, #4]
 8003bf4:	f7fe fe53 	bl	800289e <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003bf8:	bf00      	nop
 8003bfa:	3710      	adds	r7, #16
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	bd80      	pop	{r7, pc}
 8003c00:	08003d0d 	.word	0x08003d0d
 8003c04:	ffff0000 	.word	0xffff0000

08003c08 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b088      	sub	sp, #32
 8003c0c:	af02      	add	r7, sp, #8
 8003c0e:	60f8      	str	r0, [r7, #12]
 8003c10:	607a      	str	r2, [r7, #4]
 8003c12:	603b      	str	r3, [r7, #0]
 8003c14:	460b      	mov	r3, r1
 8003c16:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c1c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003c1e:	697b      	ldr	r3, [r7, #20]
 8003c20:	2b08      	cmp	r3, #8
 8003c22:	d006      	beq.n	8003c32 <I2C_MasterRequestWrite+0x2a>
 8003c24:	697b      	ldr	r3, [r7, #20]
 8003c26:	2b01      	cmp	r3, #1
 8003c28:	d003      	beq.n	8003c32 <I2C_MasterRequestWrite+0x2a>
 8003c2a:	697b      	ldr	r3, [r7, #20]
 8003c2c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003c30:	d108      	bne.n	8003c44 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	681a      	ldr	r2, [r3, #0]
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003c40:	601a      	str	r2, [r3, #0]
 8003c42:	e00b      	b.n	8003c5c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c48:	2b12      	cmp	r3, #18
 8003c4a:	d107      	bne.n	8003c5c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	681a      	ldr	r2, [r3, #0]
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003c5a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	9300      	str	r3, [sp, #0]
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2200      	movs	r2, #0
 8003c64:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003c68:	68f8      	ldr	r0, [r7, #12]
 8003c6a:	f000 f8f7 	bl	8003e5c <I2C_WaitOnFlagUntilTimeout>
 8003c6e:	4603      	mov	r3, r0
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d00d      	beq.n	8003c90 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c82:	d103      	bne.n	8003c8c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003c8a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003c8c:	2303      	movs	r3, #3
 8003c8e:	e035      	b.n	8003cfc <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	691b      	ldr	r3, [r3, #16]
 8003c94:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003c98:	d108      	bne.n	8003cac <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003c9a:	897b      	ldrh	r3, [r7, #10]
 8003c9c:	b2db      	uxtb	r3, r3
 8003c9e:	461a      	mov	r2, r3
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003ca8:	611a      	str	r2, [r3, #16]
 8003caa:	e01b      	b.n	8003ce4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003cac:	897b      	ldrh	r3, [r7, #10]
 8003cae:	11db      	asrs	r3, r3, #7
 8003cb0:	b2db      	uxtb	r3, r3
 8003cb2:	f003 0306 	and.w	r3, r3, #6
 8003cb6:	b2db      	uxtb	r3, r3
 8003cb8:	f063 030f 	orn	r3, r3, #15
 8003cbc:	b2da      	uxtb	r2, r3
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	687a      	ldr	r2, [r7, #4]
 8003cc8:	490e      	ldr	r1, [pc, #56]	; (8003d04 <I2C_MasterRequestWrite+0xfc>)
 8003cca:	68f8      	ldr	r0, [r7, #12]
 8003ccc:	f000 f940 	bl	8003f50 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003cd0:	4603      	mov	r3, r0
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d001      	beq.n	8003cda <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	e010      	b.n	8003cfc <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003cda:	897b      	ldrh	r3, [r7, #10]
 8003cdc:	b2da      	uxtb	r2, r3
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	687a      	ldr	r2, [r7, #4]
 8003ce8:	4907      	ldr	r1, [pc, #28]	; (8003d08 <I2C_MasterRequestWrite+0x100>)
 8003cea:	68f8      	ldr	r0, [r7, #12]
 8003cec:	f000 f930 	bl	8003f50 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003cf0:	4603      	mov	r3, r0
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d001      	beq.n	8003cfa <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	e000      	b.n	8003cfc <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003cfa:	2300      	movs	r3, #0
}
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	3718      	adds	r7, #24
 8003d00:	46bd      	mov	sp, r7
 8003d02:	bd80      	pop	{r7, pc}
 8003d04:	00010008 	.word	0x00010008
 8003d08:	00010002 	.word	0x00010002

08003d0c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b086      	sub	sp, #24
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003d14:	2300      	movs	r3, #0
 8003d16:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d1c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003d1e:	697b      	ldr	r3, [r7, #20]
 8003d20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d24:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003d26:	4b4b      	ldr	r3, [pc, #300]	; (8003e54 <I2C_DMAAbort+0x148>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	08db      	lsrs	r3, r3, #3
 8003d2c:	4a4a      	ldr	r2, [pc, #296]	; (8003e58 <I2C_DMAAbort+0x14c>)
 8003d2e:	fba2 2303 	umull	r2, r3, r2, r3
 8003d32:	0a1a      	lsrs	r2, r3, #8
 8003d34:	4613      	mov	r3, r2
 8003d36:	009b      	lsls	r3, r3, #2
 8003d38:	4413      	add	r3, r2
 8003d3a:	00da      	lsls	r2, r3, #3
 8003d3c:	1ad3      	subs	r3, r2, r3
 8003d3e:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d106      	bne.n	8003d54 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003d46:	697b      	ldr	r3, [r7, #20]
 8003d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d4a:	f043 0220 	orr.w	r2, r3, #32
 8003d4e:	697b      	ldr	r3, [r7, #20]
 8003d50:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8003d52:	e00a      	b.n	8003d6a <I2C_DMAAbort+0x5e>
    }
    count--;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	3b01      	subs	r3, #1
 8003d58:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8003d5a:	697b      	ldr	r3, [r7, #20]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d68:	d0ea      	beq.n	8003d40 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8003d6a:	697b      	ldr	r3, [r7, #20]
 8003d6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d003      	beq.n	8003d7a <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8003d72:	697b      	ldr	r3, [r7, #20]
 8003d74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d76:	2200      	movs	r2, #0
 8003d78:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 8003d7a:	697b      	ldr	r3, [r7, #20]
 8003d7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d003      	beq.n	8003d8a <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8003d82:	697b      	ldr	r3, [r7, #20]
 8003d84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d86:	2200      	movs	r2, #0
 8003d88:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d8a:	697b      	ldr	r3, [r7, #20]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	681a      	ldr	r2, [r3, #0]
 8003d90:	697b      	ldr	r3, [r7, #20]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d98:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8003d9a:	697b      	ldr	r3, [r7, #20]
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8003da0:	697b      	ldr	r3, [r7, #20]
 8003da2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d003      	beq.n	8003db0 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003da8:	697b      	ldr	r3, [r7, #20]
 8003daa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dac:	2200      	movs	r2, #0
 8003dae:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 8003db0:	697b      	ldr	r3, [r7, #20]
 8003db2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d003      	beq.n	8003dc0 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003db8:	697b      	ldr	r3, [r7, #20]
 8003dba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8003dc0:	697b      	ldr	r3, [r7, #20]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	681a      	ldr	r2, [r3, #0]
 8003dc6:	697b      	ldr	r3, [r7, #20]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f022 0201 	bic.w	r2, r2, #1
 8003dce:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003dd0:	697b      	ldr	r3, [r7, #20]
 8003dd2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003dd6:	b2db      	uxtb	r3, r3
 8003dd8:	2b60      	cmp	r3, #96	; 0x60
 8003dda:	d10e      	bne.n	8003dfa <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8003ddc:	697b      	ldr	r3, [r7, #20]
 8003dde:	2220      	movs	r2, #32
 8003de0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003de4:	697b      	ldr	r3, [r7, #20]
 8003de6:	2200      	movs	r2, #0
 8003de8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8003dec:	697b      	ldr	r3, [r7, #20]
 8003dee:	2200      	movs	r2, #0
 8003df0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003df2:	6978      	ldr	r0, [r7, #20]
 8003df4:	f7fe fd77 	bl	80028e6 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003df8:	e027      	b.n	8003e4a <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003dfa:	7cfb      	ldrb	r3, [r7, #19]
 8003dfc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003e00:	2b28      	cmp	r3, #40	; 0x28
 8003e02:	d117      	bne.n	8003e34 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8003e04:	697b      	ldr	r3, [r7, #20]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	681a      	ldr	r2, [r3, #0]
 8003e0a:	697b      	ldr	r3, [r7, #20]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f042 0201 	orr.w	r2, r2, #1
 8003e12:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e14:	697b      	ldr	r3, [r7, #20]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	681a      	ldr	r2, [r3, #0]
 8003e1a:	697b      	ldr	r3, [r7, #20]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003e22:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003e24:	697b      	ldr	r3, [r7, #20]
 8003e26:	2200      	movs	r2, #0
 8003e28:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003e2a:	697b      	ldr	r3, [r7, #20]
 8003e2c:	2228      	movs	r2, #40	; 0x28
 8003e2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003e32:	e007      	b.n	8003e44 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8003e34:	697b      	ldr	r3, [r7, #20]
 8003e36:	2220      	movs	r2, #32
 8003e38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e3c:	697b      	ldr	r3, [r7, #20]
 8003e3e:	2200      	movs	r2, #0
 8003e40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8003e44:	6978      	ldr	r0, [r7, #20]
 8003e46:	f7fe fd45 	bl	80028d4 <HAL_I2C_ErrorCallback>
}
 8003e4a:	bf00      	nop
 8003e4c:	3718      	adds	r7, #24
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	bd80      	pop	{r7, pc}
 8003e52:	bf00      	nop
 8003e54:	20000084 	.word	0x20000084
 8003e58:	14f8b589 	.word	0x14f8b589

08003e5c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b084      	sub	sp, #16
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	60f8      	str	r0, [r7, #12]
 8003e64:	60b9      	str	r1, [r7, #8]
 8003e66:	603b      	str	r3, [r7, #0]
 8003e68:	4613      	mov	r3, r2
 8003e6a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003e6c:	e048      	b.n	8003f00 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e74:	d044      	beq.n	8003f00 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e76:	f7fd fcdd 	bl	8001834 <HAL_GetTick>
 8003e7a:	4602      	mov	r2, r0
 8003e7c:	69bb      	ldr	r3, [r7, #24]
 8003e7e:	1ad3      	subs	r3, r2, r3
 8003e80:	683a      	ldr	r2, [r7, #0]
 8003e82:	429a      	cmp	r2, r3
 8003e84:	d302      	bcc.n	8003e8c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d139      	bne.n	8003f00 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003e8c:	68bb      	ldr	r3, [r7, #8]
 8003e8e:	0c1b      	lsrs	r3, r3, #16
 8003e90:	b2db      	uxtb	r3, r3
 8003e92:	2b01      	cmp	r3, #1
 8003e94:	d10d      	bne.n	8003eb2 <I2C_WaitOnFlagUntilTimeout+0x56>
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	695b      	ldr	r3, [r3, #20]
 8003e9c:	43da      	mvns	r2, r3
 8003e9e:	68bb      	ldr	r3, [r7, #8]
 8003ea0:	4013      	ands	r3, r2
 8003ea2:	b29b      	uxth	r3, r3
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	bf0c      	ite	eq
 8003ea8:	2301      	moveq	r3, #1
 8003eaa:	2300      	movne	r3, #0
 8003eac:	b2db      	uxtb	r3, r3
 8003eae:	461a      	mov	r2, r3
 8003eb0:	e00c      	b.n	8003ecc <I2C_WaitOnFlagUntilTimeout+0x70>
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	699b      	ldr	r3, [r3, #24]
 8003eb8:	43da      	mvns	r2, r3
 8003eba:	68bb      	ldr	r3, [r7, #8]
 8003ebc:	4013      	ands	r3, r2
 8003ebe:	b29b      	uxth	r3, r3
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	bf0c      	ite	eq
 8003ec4:	2301      	moveq	r3, #1
 8003ec6:	2300      	movne	r3, #0
 8003ec8:	b2db      	uxtb	r3, r3
 8003eca:	461a      	mov	r2, r3
 8003ecc:	79fb      	ldrb	r3, [r7, #7]
 8003ece:	429a      	cmp	r2, r3
 8003ed0:	d116      	bne.n	8003f00 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	2220      	movs	r2, #32
 8003edc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eec:	f043 0220 	orr.w	r2, r3, #32
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003efc:	2301      	movs	r3, #1
 8003efe:	e023      	b.n	8003f48 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003f00:	68bb      	ldr	r3, [r7, #8]
 8003f02:	0c1b      	lsrs	r3, r3, #16
 8003f04:	b2db      	uxtb	r3, r3
 8003f06:	2b01      	cmp	r3, #1
 8003f08:	d10d      	bne.n	8003f26 <I2C_WaitOnFlagUntilTimeout+0xca>
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	695b      	ldr	r3, [r3, #20]
 8003f10:	43da      	mvns	r2, r3
 8003f12:	68bb      	ldr	r3, [r7, #8]
 8003f14:	4013      	ands	r3, r2
 8003f16:	b29b      	uxth	r3, r3
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	bf0c      	ite	eq
 8003f1c:	2301      	moveq	r3, #1
 8003f1e:	2300      	movne	r3, #0
 8003f20:	b2db      	uxtb	r3, r3
 8003f22:	461a      	mov	r2, r3
 8003f24:	e00c      	b.n	8003f40 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	699b      	ldr	r3, [r3, #24]
 8003f2c:	43da      	mvns	r2, r3
 8003f2e:	68bb      	ldr	r3, [r7, #8]
 8003f30:	4013      	ands	r3, r2
 8003f32:	b29b      	uxth	r3, r3
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	bf0c      	ite	eq
 8003f38:	2301      	moveq	r3, #1
 8003f3a:	2300      	movne	r3, #0
 8003f3c:	b2db      	uxtb	r3, r3
 8003f3e:	461a      	mov	r2, r3
 8003f40:	79fb      	ldrb	r3, [r7, #7]
 8003f42:	429a      	cmp	r2, r3
 8003f44:	d093      	beq.n	8003e6e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003f46:	2300      	movs	r3, #0
}
 8003f48:	4618      	mov	r0, r3
 8003f4a:	3710      	adds	r7, #16
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	bd80      	pop	{r7, pc}

08003f50 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b084      	sub	sp, #16
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	60f8      	str	r0, [r7, #12]
 8003f58:	60b9      	str	r1, [r7, #8]
 8003f5a:	607a      	str	r2, [r7, #4]
 8003f5c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003f5e:	e071      	b.n	8004044 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	695b      	ldr	r3, [r3, #20]
 8003f66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f6e:	d123      	bne.n	8003fb8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	681a      	ldr	r2, [r3, #0]
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f7e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003f88:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	2220      	movs	r2, #32
 8003f94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fa4:	f043 0204 	orr.w	r2, r3, #4
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	2200      	movs	r2, #0
 8003fb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	e067      	b.n	8004088 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fbe:	d041      	beq.n	8004044 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003fc0:	f7fd fc38 	bl	8001834 <HAL_GetTick>
 8003fc4:	4602      	mov	r2, r0
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	1ad3      	subs	r3, r2, r3
 8003fca:	687a      	ldr	r2, [r7, #4]
 8003fcc:	429a      	cmp	r2, r3
 8003fce:	d302      	bcc.n	8003fd6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d136      	bne.n	8004044 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003fd6:	68bb      	ldr	r3, [r7, #8]
 8003fd8:	0c1b      	lsrs	r3, r3, #16
 8003fda:	b2db      	uxtb	r3, r3
 8003fdc:	2b01      	cmp	r3, #1
 8003fde:	d10c      	bne.n	8003ffa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	695b      	ldr	r3, [r3, #20]
 8003fe6:	43da      	mvns	r2, r3
 8003fe8:	68bb      	ldr	r3, [r7, #8]
 8003fea:	4013      	ands	r3, r2
 8003fec:	b29b      	uxth	r3, r3
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	bf14      	ite	ne
 8003ff2:	2301      	movne	r3, #1
 8003ff4:	2300      	moveq	r3, #0
 8003ff6:	b2db      	uxtb	r3, r3
 8003ff8:	e00b      	b.n	8004012 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	699b      	ldr	r3, [r3, #24]
 8004000:	43da      	mvns	r2, r3
 8004002:	68bb      	ldr	r3, [r7, #8]
 8004004:	4013      	ands	r3, r2
 8004006:	b29b      	uxth	r3, r3
 8004008:	2b00      	cmp	r3, #0
 800400a:	bf14      	ite	ne
 800400c:	2301      	movne	r3, #1
 800400e:	2300      	moveq	r3, #0
 8004010:	b2db      	uxtb	r3, r3
 8004012:	2b00      	cmp	r3, #0
 8004014:	d016      	beq.n	8004044 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	2200      	movs	r2, #0
 800401a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	2220      	movs	r2, #32
 8004020:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	2200      	movs	r2, #0
 8004028:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004030:	f043 0220 	orr.w	r2, r3, #32
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	2200      	movs	r2, #0
 800403c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004040:	2301      	movs	r3, #1
 8004042:	e021      	b.n	8004088 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004044:	68bb      	ldr	r3, [r7, #8]
 8004046:	0c1b      	lsrs	r3, r3, #16
 8004048:	b2db      	uxtb	r3, r3
 800404a:	2b01      	cmp	r3, #1
 800404c:	d10c      	bne.n	8004068 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	695b      	ldr	r3, [r3, #20]
 8004054:	43da      	mvns	r2, r3
 8004056:	68bb      	ldr	r3, [r7, #8]
 8004058:	4013      	ands	r3, r2
 800405a:	b29b      	uxth	r3, r3
 800405c:	2b00      	cmp	r3, #0
 800405e:	bf14      	ite	ne
 8004060:	2301      	movne	r3, #1
 8004062:	2300      	moveq	r3, #0
 8004064:	b2db      	uxtb	r3, r3
 8004066:	e00b      	b.n	8004080 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	699b      	ldr	r3, [r3, #24]
 800406e:	43da      	mvns	r2, r3
 8004070:	68bb      	ldr	r3, [r7, #8]
 8004072:	4013      	ands	r3, r2
 8004074:	b29b      	uxth	r3, r3
 8004076:	2b00      	cmp	r3, #0
 8004078:	bf14      	ite	ne
 800407a:	2301      	movne	r3, #1
 800407c:	2300      	moveq	r3, #0
 800407e:	b2db      	uxtb	r3, r3
 8004080:	2b00      	cmp	r3, #0
 8004082:	f47f af6d 	bne.w	8003f60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004086:	2300      	movs	r3, #0
}
 8004088:	4618      	mov	r0, r3
 800408a:	3710      	adds	r7, #16
 800408c:	46bd      	mov	sp, r7
 800408e:	bd80      	pop	{r7, pc}

08004090 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004090:	b580      	push	{r7, lr}
 8004092:	b084      	sub	sp, #16
 8004094:	af00      	add	r7, sp, #0
 8004096:	60f8      	str	r0, [r7, #12]
 8004098:	60b9      	str	r1, [r7, #8]
 800409a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800409c:	e034      	b.n	8004108 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800409e:	68f8      	ldr	r0, [r7, #12]
 80040a0:	f000 f8b8 	bl	8004214 <I2C_IsAcknowledgeFailed>
 80040a4:	4603      	mov	r3, r0
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d001      	beq.n	80040ae <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80040aa:	2301      	movs	r3, #1
 80040ac:	e034      	b.n	8004118 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040ae:	68bb      	ldr	r3, [r7, #8]
 80040b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040b4:	d028      	beq.n	8004108 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040b6:	f7fd fbbd 	bl	8001834 <HAL_GetTick>
 80040ba:	4602      	mov	r2, r0
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	1ad3      	subs	r3, r2, r3
 80040c0:	68ba      	ldr	r2, [r7, #8]
 80040c2:	429a      	cmp	r2, r3
 80040c4:	d302      	bcc.n	80040cc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80040c6:	68bb      	ldr	r3, [r7, #8]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d11d      	bne.n	8004108 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	695b      	ldr	r3, [r3, #20]
 80040d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040d6:	2b80      	cmp	r3, #128	; 0x80
 80040d8:	d016      	beq.n	8004108 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	2200      	movs	r2, #0
 80040de:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	2220      	movs	r2, #32
 80040e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	2200      	movs	r2, #0
 80040ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040f4:	f043 0220 	orr.w	r2, r3, #32
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	2200      	movs	r2, #0
 8004100:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004104:	2301      	movs	r3, #1
 8004106:	e007      	b.n	8004118 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	695b      	ldr	r3, [r3, #20]
 800410e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004112:	2b80      	cmp	r3, #128	; 0x80
 8004114:	d1c3      	bne.n	800409e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004116:	2300      	movs	r3, #0
}
 8004118:	4618      	mov	r0, r3
 800411a:	3710      	adds	r7, #16
 800411c:	46bd      	mov	sp, r7
 800411e:	bd80      	pop	{r7, pc}

08004120 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b084      	sub	sp, #16
 8004124:	af00      	add	r7, sp, #0
 8004126:	60f8      	str	r0, [r7, #12]
 8004128:	60b9      	str	r1, [r7, #8]
 800412a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800412c:	e034      	b.n	8004198 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800412e:	68f8      	ldr	r0, [r7, #12]
 8004130:	f000 f870 	bl	8004214 <I2C_IsAcknowledgeFailed>
 8004134:	4603      	mov	r3, r0
 8004136:	2b00      	cmp	r3, #0
 8004138:	d001      	beq.n	800413e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800413a:	2301      	movs	r3, #1
 800413c:	e034      	b.n	80041a8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800413e:	68bb      	ldr	r3, [r7, #8]
 8004140:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004144:	d028      	beq.n	8004198 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004146:	f7fd fb75 	bl	8001834 <HAL_GetTick>
 800414a:	4602      	mov	r2, r0
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	1ad3      	subs	r3, r2, r3
 8004150:	68ba      	ldr	r2, [r7, #8]
 8004152:	429a      	cmp	r2, r3
 8004154:	d302      	bcc.n	800415c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004156:	68bb      	ldr	r3, [r7, #8]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d11d      	bne.n	8004198 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	695b      	ldr	r3, [r3, #20]
 8004162:	f003 0304 	and.w	r3, r3, #4
 8004166:	2b04      	cmp	r3, #4
 8004168:	d016      	beq.n	8004198 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	2200      	movs	r2, #0
 800416e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	2220      	movs	r2, #32
 8004174:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	2200      	movs	r2, #0
 800417c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004184:	f043 0220 	orr.w	r2, r3, #32
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	2200      	movs	r2, #0
 8004190:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004194:	2301      	movs	r3, #1
 8004196:	e007      	b.n	80041a8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	695b      	ldr	r3, [r3, #20]
 800419e:	f003 0304 	and.w	r3, r3, #4
 80041a2:	2b04      	cmp	r3, #4
 80041a4:	d1c3      	bne.n	800412e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80041a6:	2300      	movs	r3, #0
}
 80041a8:	4618      	mov	r0, r3
 80041aa:	3710      	adds	r7, #16
 80041ac:	46bd      	mov	sp, r7
 80041ae:	bd80      	pop	{r7, pc}

080041b0 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80041b0:	b480      	push	{r7}
 80041b2:	b085      	sub	sp, #20
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80041b8:	2300      	movs	r3, #0
 80041ba:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80041bc:	4b13      	ldr	r3, [pc, #76]	; (800420c <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	08db      	lsrs	r3, r3, #3
 80041c2:	4a13      	ldr	r2, [pc, #76]	; (8004210 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80041c4:	fba2 2303 	umull	r2, r3, r2, r3
 80041c8:	0a1a      	lsrs	r2, r3, #8
 80041ca:	4613      	mov	r3, r2
 80041cc:	009b      	lsls	r3, r3, #2
 80041ce:	4413      	add	r3, r2
 80041d0:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	3b01      	subs	r3, #1
 80041d6:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d107      	bne.n	80041ee <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041e2:	f043 0220 	orr.w	r2, r3, #32
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80041ea:	2301      	movs	r3, #1
 80041ec:	e008      	b.n	8004200 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80041f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80041fc:	d0e9      	beq.n	80041d2 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80041fe:	2300      	movs	r3, #0
}
 8004200:	4618      	mov	r0, r3
 8004202:	3714      	adds	r7, #20
 8004204:	46bd      	mov	sp, r7
 8004206:	bc80      	pop	{r7}
 8004208:	4770      	bx	lr
 800420a:	bf00      	nop
 800420c:	20000084 	.word	0x20000084
 8004210:	14f8b589 	.word	0x14f8b589

08004214 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004214:	b480      	push	{r7}
 8004216:	b083      	sub	sp, #12
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	695b      	ldr	r3, [r3, #20]
 8004222:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004226:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800422a:	d11b      	bne.n	8004264 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004234:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2200      	movs	r2, #0
 800423a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2220      	movs	r2, #32
 8004240:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2200      	movs	r2, #0
 8004248:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004250:	f043 0204 	orr.w	r2, r3, #4
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2200      	movs	r2, #0
 800425c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004260:	2301      	movs	r3, #1
 8004262:	e000      	b.n	8004266 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004264:	2300      	movs	r3, #0
}
 8004266:	4618      	mov	r0, r3
 8004268:	370c      	adds	r7, #12
 800426a:	46bd      	mov	sp, r7
 800426c:	bc80      	pop	{r7}
 800426e:	4770      	bx	lr

08004270 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8004270:	b480      	push	{r7}
 8004272:	b083      	sub	sp, #12
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800427c:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004280:	d103      	bne.n	800428a <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2201      	movs	r2, #1
 8004286:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8004288:	e007      	b.n	800429a <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800428e:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004292:	d102      	bne.n	800429a <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2208      	movs	r2, #8
 8004298:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800429a:	bf00      	nop
 800429c:	370c      	adds	r7, #12
 800429e:	46bd      	mov	sp, r7
 80042a0:	bc80      	pop	{r7}
 80042a2:	4770      	bx	lr

080042a4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b086      	sub	sp, #24
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d101      	bne.n	80042b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80042b2:	2301      	movs	r3, #1
 80042b4:	e26c      	b.n	8004790 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f003 0301 	and.w	r3, r3, #1
 80042be:	2b00      	cmp	r3, #0
 80042c0:	f000 8087 	beq.w	80043d2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80042c4:	4b92      	ldr	r3, [pc, #584]	; (8004510 <HAL_RCC_OscConfig+0x26c>)
 80042c6:	685b      	ldr	r3, [r3, #4]
 80042c8:	f003 030c 	and.w	r3, r3, #12
 80042cc:	2b04      	cmp	r3, #4
 80042ce:	d00c      	beq.n	80042ea <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80042d0:	4b8f      	ldr	r3, [pc, #572]	; (8004510 <HAL_RCC_OscConfig+0x26c>)
 80042d2:	685b      	ldr	r3, [r3, #4]
 80042d4:	f003 030c 	and.w	r3, r3, #12
 80042d8:	2b08      	cmp	r3, #8
 80042da:	d112      	bne.n	8004302 <HAL_RCC_OscConfig+0x5e>
 80042dc:	4b8c      	ldr	r3, [pc, #560]	; (8004510 <HAL_RCC_OscConfig+0x26c>)
 80042de:	685b      	ldr	r3, [r3, #4]
 80042e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042e8:	d10b      	bne.n	8004302 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042ea:	4b89      	ldr	r3, [pc, #548]	; (8004510 <HAL_RCC_OscConfig+0x26c>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d06c      	beq.n	80043d0 <HAL_RCC_OscConfig+0x12c>
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	685b      	ldr	r3, [r3, #4]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d168      	bne.n	80043d0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80042fe:	2301      	movs	r3, #1
 8004300:	e246      	b.n	8004790 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	685b      	ldr	r3, [r3, #4]
 8004306:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800430a:	d106      	bne.n	800431a <HAL_RCC_OscConfig+0x76>
 800430c:	4b80      	ldr	r3, [pc, #512]	; (8004510 <HAL_RCC_OscConfig+0x26c>)
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	4a7f      	ldr	r2, [pc, #508]	; (8004510 <HAL_RCC_OscConfig+0x26c>)
 8004312:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004316:	6013      	str	r3, [r2, #0]
 8004318:	e02e      	b.n	8004378 <HAL_RCC_OscConfig+0xd4>
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	685b      	ldr	r3, [r3, #4]
 800431e:	2b00      	cmp	r3, #0
 8004320:	d10c      	bne.n	800433c <HAL_RCC_OscConfig+0x98>
 8004322:	4b7b      	ldr	r3, [pc, #492]	; (8004510 <HAL_RCC_OscConfig+0x26c>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	4a7a      	ldr	r2, [pc, #488]	; (8004510 <HAL_RCC_OscConfig+0x26c>)
 8004328:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800432c:	6013      	str	r3, [r2, #0]
 800432e:	4b78      	ldr	r3, [pc, #480]	; (8004510 <HAL_RCC_OscConfig+0x26c>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	4a77      	ldr	r2, [pc, #476]	; (8004510 <HAL_RCC_OscConfig+0x26c>)
 8004334:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004338:	6013      	str	r3, [r2, #0]
 800433a:	e01d      	b.n	8004378 <HAL_RCC_OscConfig+0xd4>
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	685b      	ldr	r3, [r3, #4]
 8004340:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004344:	d10c      	bne.n	8004360 <HAL_RCC_OscConfig+0xbc>
 8004346:	4b72      	ldr	r3, [pc, #456]	; (8004510 <HAL_RCC_OscConfig+0x26c>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	4a71      	ldr	r2, [pc, #452]	; (8004510 <HAL_RCC_OscConfig+0x26c>)
 800434c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004350:	6013      	str	r3, [r2, #0]
 8004352:	4b6f      	ldr	r3, [pc, #444]	; (8004510 <HAL_RCC_OscConfig+0x26c>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	4a6e      	ldr	r2, [pc, #440]	; (8004510 <HAL_RCC_OscConfig+0x26c>)
 8004358:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800435c:	6013      	str	r3, [r2, #0]
 800435e:	e00b      	b.n	8004378 <HAL_RCC_OscConfig+0xd4>
 8004360:	4b6b      	ldr	r3, [pc, #428]	; (8004510 <HAL_RCC_OscConfig+0x26c>)
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	4a6a      	ldr	r2, [pc, #424]	; (8004510 <HAL_RCC_OscConfig+0x26c>)
 8004366:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800436a:	6013      	str	r3, [r2, #0]
 800436c:	4b68      	ldr	r3, [pc, #416]	; (8004510 <HAL_RCC_OscConfig+0x26c>)
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	4a67      	ldr	r2, [pc, #412]	; (8004510 <HAL_RCC_OscConfig+0x26c>)
 8004372:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004376:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	685b      	ldr	r3, [r3, #4]
 800437c:	2b00      	cmp	r3, #0
 800437e:	d013      	beq.n	80043a8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004380:	f7fd fa58 	bl	8001834 <HAL_GetTick>
 8004384:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004386:	e008      	b.n	800439a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004388:	f7fd fa54 	bl	8001834 <HAL_GetTick>
 800438c:	4602      	mov	r2, r0
 800438e:	693b      	ldr	r3, [r7, #16]
 8004390:	1ad3      	subs	r3, r2, r3
 8004392:	2b64      	cmp	r3, #100	; 0x64
 8004394:	d901      	bls.n	800439a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004396:	2303      	movs	r3, #3
 8004398:	e1fa      	b.n	8004790 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800439a:	4b5d      	ldr	r3, [pc, #372]	; (8004510 <HAL_RCC_OscConfig+0x26c>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d0f0      	beq.n	8004388 <HAL_RCC_OscConfig+0xe4>
 80043a6:	e014      	b.n	80043d2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043a8:	f7fd fa44 	bl	8001834 <HAL_GetTick>
 80043ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80043ae:	e008      	b.n	80043c2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80043b0:	f7fd fa40 	bl	8001834 <HAL_GetTick>
 80043b4:	4602      	mov	r2, r0
 80043b6:	693b      	ldr	r3, [r7, #16]
 80043b8:	1ad3      	subs	r3, r2, r3
 80043ba:	2b64      	cmp	r3, #100	; 0x64
 80043bc:	d901      	bls.n	80043c2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80043be:	2303      	movs	r3, #3
 80043c0:	e1e6      	b.n	8004790 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80043c2:	4b53      	ldr	r3, [pc, #332]	; (8004510 <HAL_RCC_OscConfig+0x26c>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d1f0      	bne.n	80043b0 <HAL_RCC_OscConfig+0x10c>
 80043ce:	e000      	b.n	80043d2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f003 0302 	and.w	r3, r3, #2
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d063      	beq.n	80044a6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80043de:	4b4c      	ldr	r3, [pc, #304]	; (8004510 <HAL_RCC_OscConfig+0x26c>)
 80043e0:	685b      	ldr	r3, [r3, #4]
 80043e2:	f003 030c 	and.w	r3, r3, #12
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d00b      	beq.n	8004402 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80043ea:	4b49      	ldr	r3, [pc, #292]	; (8004510 <HAL_RCC_OscConfig+0x26c>)
 80043ec:	685b      	ldr	r3, [r3, #4]
 80043ee:	f003 030c 	and.w	r3, r3, #12
 80043f2:	2b08      	cmp	r3, #8
 80043f4:	d11c      	bne.n	8004430 <HAL_RCC_OscConfig+0x18c>
 80043f6:	4b46      	ldr	r3, [pc, #280]	; (8004510 <HAL_RCC_OscConfig+0x26c>)
 80043f8:	685b      	ldr	r3, [r3, #4]
 80043fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d116      	bne.n	8004430 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004402:	4b43      	ldr	r3, [pc, #268]	; (8004510 <HAL_RCC_OscConfig+0x26c>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f003 0302 	and.w	r3, r3, #2
 800440a:	2b00      	cmp	r3, #0
 800440c:	d005      	beq.n	800441a <HAL_RCC_OscConfig+0x176>
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	691b      	ldr	r3, [r3, #16]
 8004412:	2b01      	cmp	r3, #1
 8004414:	d001      	beq.n	800441a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004416:	2301      	movs	r3, #1
 8004418:	e1ba      	b.n	8004790 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800441a:	4b3d      	ldr	r3, [pc, #244]	; (8004510 <HAL_RCC_OscConfig+0x26c>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	695b      	ldr	r3, [r3, #20]
 8004426:	00db      	lsls	r3, r3, #3
 8004428:	4939      	ldr	r1, [pc, #228]	; (8004510 <HAL_RCC_OscConfig+0x26c>)
 800442a:	4313      	orrs	r3, r2
 800442c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800442e:	e03a      	b.n	80044a6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	691b      	ldr	r3, [r3, #16]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d020      	beq.n	800447a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004438:	4b36      	ldr	r3, [pc, #216]	; (8004514 <HAL_RCC_OscConfig+0x270>)
 800443a:	2201      	movs	r2, #1
 800443c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800443e:	f7fd f9f9 	bl	8001834 <HAL_GetTick>
 8004442:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004444:	e008      	b.n	8004458 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004446:	f7fd f9f5 	bl	8001834 <HAL_GetTick>
 800444a:	4602      	mov	r2, r0
 800444c:	693b      	ldr	r3, [r7, #16]
 800444e:	1ad3      	subs	r3, r2, r3
 8004450:	2b02      	cmp	r3, #2
 8004452:	d901      	bls.n	8004458 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004454:	2303      	movs	r3, #3
 8004456:	e19b      	b.n	8004790 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004458:	4b2d      	ldr	r3, [pc, #180]	; (8004510 <HAL_RCC_OscConfig+0x26c>)
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f003 0302 	and.w	r3, r3, #2
 8004460:	2b00      	cmp	r3, #0
 8004462:	d0f0      	beq.n	8004446 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004464:	4b2a      	ldr	r3, [pc, #168]	; (8004510 <HAL_RCC_OscConfig+0x26c>)
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	695b      	ldr	r3, [r3, #20]
 8004470:	00db      	lsls	r3, r3, #3
 8004472:	4927      	ldr	r1, [pc, #156]	; (8004510 <HAL_RCC_OscConfig+0x26c>)
 8004474:	4313      	orrs	r3, r2
 8004476:	600b      	str	r3, [r1, #0]
 8004478:	e015      	b.n	80044a6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800447a:	4b26      	ldr	r3, [pc, #152]	; (8004514 <HAL_RCC_OscConfig+0x270>)
 800447c:	2200      	movs	r2, #0
 800447e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004480:	f7fd f9d8 	bl	8001834 <HAL_GetTick>
 8004484:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004486:	e008      	b.n	800449a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004488:	f7fd f9d4 	bl	8001834 <HAL_GetTick>
 800448c:	4602      	mov	r2, r0
 800448e:	693b      	ldr	r3, [r7, #16]
 8004490:	1ad3      	subs	r3, r2, r3
 8004492:	2b02      	cmp	r3, #2
 8004494:	d901      	bls.n	800449a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004496:	2303      	movs	r3, #3
 8004498:	e17a      	b.n	8004790 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800449a:	4b1d      	ldr	r3, [pc, #116]	; (8004510 <HAL_RCC_OscConfig+0x26c>)
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f003 0302 	and.w	r3, r3, #2
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d1f0      	bne.n	8004488 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f003 0308 	and.w	r3, r3, #8
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d03a      	beq.n	8004528 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	699b      	ldr	r3, [r3, #24]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d019      	beq.n	80044ee <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80044ba:	4b17      	ldr	r3, [pc, #92]	; (8004518 <HAL_RCC_OscConfig+0x274>)
 80044bc:	2201      	movs	r2, #1
 80044be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044c0:	f7fd f9b8 	bl	8001834 <HAL_GetTick>
 80044c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80044c6:	e008      	b.n	80044da <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80044c8:	f7fd f9b4 	bl	8001834 <HAL_GetTick>
 80044cc:	4602      	mov	r2, r0
 80044ce:	693b      	ldr	r3, [r7, #16]
 80044d0:	1ad3      	subs	r3, r2, r3
 80044d2:	2b02      	cmp	r3, #2
 80044d4:	d901      	bls.n	80044da <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80044d6:	2303      	movs	r3, #3
 80044d8:	e15a      	b.n	8004790 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80044da:	4b0d      	ldr	r3, [pc, #52]	; (8004510 <HAL_RCC_OscConfig+0x26c>)
 80044dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044de:	f003 0302 	and.w	r3, r3, #2
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d0f0      	beq.n	80044c8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80044e6:	2001      	movs	r0, #1
 80044e8:	f000 fab8 	bl	8004a5c <RCC_Delay>
 80044ec:	e01c      	b.n	8004528 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80044ee:	4b0a      	ldr	r3, [pc, #40]	; (8004518 <HAL_RCC_OscConfig+0x274>)
 80044f0:	2200      	movs	r2, #0
 80044f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044f4:	f7fd f99e 	bl	8001834 <HAL_GetTick>
 80044f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044fa:	e00f      	b.n	800451c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80044fc:	f7fd f99a 	bl	8001834 <HAL_GetTick>
 8004500:	4602      	mov	r2, r0
 8004502:	693b      	ldr	r3, [r7, #16]
 8004504:	1ad3      	subs	r3, r2, r3
 8004506:	2b02      	cmp	r3, #2
 8004508:	d908      	bls.n	800451c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800450a:	2303      	movs	r3, #3
 800450c:	e140      	b.n	8004790 <HAL_RCC_OscConfig+0x4ec>
 800450e:	bf00      	nop
 8004510:	40021000 	.word	0x40021000
 8004514:	42420000 	.word	0x42420000
 8004518:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800451c:	4b9e      	ldr	r3, [pc, #632]	; (8004798 <HAL_RCC_OscConfig+0x4f4>)
 800451e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004520:	f003 0302 	and.w	r3, r3, #2
 8004524:	2b00      	cmp	r3, #0
 8004526:	d1e9      	bne.n	80044fc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f003 0304 	and.w	r3, r3, #4
 8004530:	2b00      	cmp	r3, #0
 8004532:	f000 80a6 	beq.w	8004682 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004536:	2300      	movs	r3, #0
 8004538:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800453a:	4b97      	ldr	r3, [pc, #604]	; (8004798 <HAL_RCC_OscConfig+0x4f4>)
 800453c:	69db      	ldr	r3, [r3, #28]
 800453e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004542:	2b00      	cmp	r3, #0
 8004544:	d10d      	bne.n	8004562 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004546:	4b94      	ldr	r3, [pc, #592]	; (8004798 <HAL_RCC_OscConfig+0x4f4>)
 8004548:	69db      	ldr	r3, [r3, #28]
 800454a:	4a93      	ldr	r2, [pc, #588]	; (8004798 <HAL_RCC_OscConfig+0x4f4>)
 800454c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004550:	61d3      	str	r3, [r2, #28]
 8004552:	4b91      	ldr	r3, [pc, #580]	; (8004798 <HAL_RCC_OscConfig+0x4f4>)
 8004554:	69db      	ldr	r3, [r3, #28]
 8004556:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800455a:	60bb      	str	r3, [r7, #8]
 800455c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800455e:	2301      	movs	r3, #1
 8004560:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004562:	4b8e      	ldr	r3, [pc, #568]	; (800479c <HAL_RCC_OscConfig+0x4f8>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800456a:	2b00      	cmp	r3, #0
 800456c:	d118      	bne.n	80045a0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800456e:	4b8b      	ldr	r3, [pc, #556]	; (800479c <HAL_RCC_OscConfig+0x4f8>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	4a8a      	ldr	r2, [pc, #552]	; (800479c <HAL_RCC_OscConfig+0x4f8>)
 8004574:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004578:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800457a:	f7fd f95b 	bl	8001834 <HAL_GetTick>
 800457e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004580:	e008      	b.n	8004594 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004582:	f7fd f957 	bl	8001834 <HAL_GetTick>
 8004586:	4602      	mov	r2, r0
 8004588:	693b      	ldr	r3, [r7, #16]
 800458a:	1ad3      	subs	r3, r2, r3
 800458c:	2b64      	cmp	r3, #100	; 0x64
 800458e:	d901      	bls.n	8004594 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004590:	2303      	movs	r3, #3
 8004592:	e0fd      	b.n	8004790 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004594:	4b81      	ldr	r3, [pc, #516]	; (800479c <HAL_RCC_OscConfig+0x4f8>)
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800459c:	2b00      	cmp	r3, #0
 800459e:	d0f0      	beq.n	8004582 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	68db      	ldr	r3, [r3, #12]
 80045a4:	2b01      	cmp	r3, #1
 80045a6:	d106      	bne.n	80045b6 <HAL_RCC_OscConfig+0x312>
 80045a8:	4b7b      	ldr	r3, [pc, #492]	; (8004798 <HAL_RCC_OscConfig+0x4f4>)
 80045aa:	6a1b      	ldr	r3, [r3, #32]
 80045ac:	4a7a      	ldr	r2, [pc, #488]	; (8004798 <HAL_RCC_OscConfig+0x4f4>)
 80045ae:	f043 0301 	orr.w	r3, r3, #1
 80045b2:	6213      	str	r3, [r2, #32]
 80045b4:	e02d      	b.n	8004612 <HAL_RCC_OscConfig+0x36e>
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	68db      	ldr	r3, [r3, #12]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d10c      	bne.n	80045d8 <HAL_RCC_OscConfig+0x334>
 80045be:	4b76      	ldr	r3, [pc, #472]	; (8004798 <HAL_RCC_OscConfig+0x4f4>)
 80045c0:	6a1b      	ldr	r3, [r3, #32]
 80045c2:	4a75      	ldr	r2, [pc, #468]	; (8004798 <HAL_RCC_OscConfig+0x4f4>)
 80045c4:	f023 0301 	bic.w	r3, r3, #1
 80045c8:	6213      	str	r3, [r2, #32]
 80045ca:	4b73      	ldr	r3, [pc, #460]	; (8004798 <HAL_RCC_OscConfig+0x4f4>)
 80045cc:	6a1b      	ldr	r3, [r3, #32]
 80045ce:	4a72      	ldr	r2, [pc, #456]	; (8004798 <HAL_RCC_OscConfig+0x4f4>)
 80045d0:	f023 0304 	bic.w	r3, r3, #4
 80045d4:	6213      	str	r3, [r2, #32]
 80045d6:	e01c      	b.n	8004612 <HAL_RCC_OscConfig+0x36e>
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	68db      	ldr	r3, [r3, #12]
 80045dc:	2b05      	cmp	r3, #5
 80045de:	d10c      	bne.n	80045fa <HAL_RCC_OscConfig+0x356>
 80045e0:	4b6d      	ldr	r3, [pc, #436]	; (8004798 <HAL_RCC_OscConfig+0x4f4>)
 80045e2:	6a1b      	ldr	r3, [r3, #32]
 80045e4:	4a6c      	ldr	r2, [pc, #432]	; (8004798 <HAL_RCC_OscConfig+0x4f4>)
 80045e6:	f043 0304 	orr.w	r3, r3, #4
 80045ea:	6213      	str	r3, [r2, #32]
 80045ec:	4b6a      	ldr	r3, [pc, #424]	; (8004798 <HAL_RCC_OscConfig+0x4f4>)
 80045ee:	6a1b      	ldr	r3, [r3, #32]
 80045f0:	4a69      	ldr	r2, [pc, #420]	; (8004798 <HAL_RCC_OscConfig+0x4f4>)
 80045f2:	f043 0301 	orr.w	r3, r3, #1
 80045f6:	6213      	str	r3, [r2, #32]
 80045f8:	e00b      	b.n	8004612 <HAL_RCC_OscConfig+0x36e>
 80045fa:	4b67      	ldr	r3, [pc, #412]	; (8004798 <HAL_RCC_OscConfig+0x4f4>)
 80045fc:	6a1b      	ldr	r3, [r3, #32]
 80045fe:	4a66      	ldr	r2, [pc, #408]	; (8004798 <HAL_RCC_OscConfig+0x4f4>)
 8004600:	f023 0301 	bic.w	r3, r3, #1
 8004604:	6213      	str	r3, [r2, #32]
 8004606:	4b64      	ldr	r3, [pc, #400]	; (8004798 <HAL_RCC_OscConfig+0x4f4>)
 8004608:	6a1b      	ldr	r3, [r3, #32]
 800460a:	4a63      	ldr	r2, [pc, #396]	; (8004798 <HAL_RCC_OscConfig+0x4f4>)
 800460c:	f023 0304 	bic.w	r3, r3, #4
 8004610:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	68db      	ldr	r3, [r3, #12]
 8004616:	2b00      	cmp	r3, #0
 8004618:	d015      	beq.n	8004646 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800461a:	f7fd f90b 	bl	8001834 <HAL_GetTick>
 800461e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004620:	e00a      	b.n	8004638 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004622:	f7fd f907 	bl	8001834 <HAL_GetTick>
 8004626:	4602      	mov	r2, r0
 8004628:	693b      	ldr	r3, [r7, #16]
 800462a:	1ad3      	subs	r3, r2, r3
 800462c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004630:	4293      	cmp	r3, r2
 8004632:	d901      	bls.n	8004638 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004634:	2303      	movs	r3, #3
 8004636:	e0ab      	b.n	8004790 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004638:	4b57      	ldr	r3, [pc, #348]	; (8004798 <HAL_RCC_OscConfig+0x4f4>)
 800463a:	6a1b      	ldr	r3, [r3, #32]
 800463c:	f003 0302 	and.w	r3, r3, #2
 8004640:	2b00      	cmp	r3, #0
 8004642:	d0ee      	beq.n	8004622 <HAL_RCC_OscConfig+0x37e>
 8004644:	e014      	b.n	8004670 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004646:	f7fd f8f5 	bl	8001834 <HAL_GetTick>
 800464a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800464c:	e00a      	b.n	8004664 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800464e:	f7fd f8f1 	bl	8001834 <HAL_GetTick>
 8004652:	4602      	mov	r2, r0
 8004654:	693b      	ldr	r3, [r7, #16]
 8004656:	1ad3      	subs	r3, r2, r3
 8004658:	f241 3288 	movw	r2, #5000	; 0x1388
 800465c:	4293      	cmp	r3, r2
 800465e:	d901      	bls.n	8004664 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004660:	2303      	movs	r3, #3
 8004662:	e095      	b.n	8004790 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004664:	4b4c      	ldr	r3, [pc, #304]	; (8004798 <HAL_RCC_OscConfig+0x4f4>)
 8004666:	6a1b      	ldr	r3, [r3, #32]
 8004668:	f003 0302 	and.w	r3, r3, #2
 800466c:	2b00      	cmp	r3, #0
 800466e:	d1ee      	bne.n	800464e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004670:	7dfb      	ldrb	r3, [r7, #23]
 8004672:	2b01      	cmp	r3, #1
 8004674:	d105      	bne.n	8004682 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004676:	4b48      	ldr	r3, [pc, #288]	; (8004798 <HAL_RCC_OscConfig+0x4f4>)
 8004678:	69db      	ldr	r3, [r3, #28]
 800467a:	4a47      	ldr	r2, [pc, #284]	; (8004798 <HAL_RCC_OscConfig+0x4f4>)
 800467c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004680:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	69db      	ldr	r3, [r3, #28]
 8004686:	2b00      	cmp	r3, #0
 8004688:	f000 8081 	beq.w	800478e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800468c:	4b42      	ldr	r3, [pc, #264]	; (8004798 <HAL_RCC_OscConfig+0x4f4>)
 800468e:	685b      	ldr	r3, [r3, #4]
 8004690:	f003 030c 	and.w	r3, r3, #12
 8004694:	2b08      	cmp	r3, #8
 8004696:	d061      	beq.n	800475c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	69db      	ldr	r3, [r3, #28]
 800469c:	2b02      	cmp	r3, #2
 800469e:	d146      	bne.n	800472e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046a0:	4b3f      	ldr	r3, [pc, #252]	; (80047a0 <HAL_RCC_OscConfig+0x4fc>)
 80046a2:	2200      	movs	r2, #0
 80046a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046a6:	f7fd f8c5 	bl	8001834 <HAL_GetTick>
 80046aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80046ac:	e008      	b.n	80046c0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046ae:	f7fd f8c1 	bl	8001834 <HAL_GetTick>
 80046b2:	4602      	mov	r2, r0
 80046b4:	693b      	ldr	r3, [r7, #16]
 80046b6:	1ad3      	subs	r3, r2, r3
 80046b8:	2b02      	cmp	r3, #2
 80046ba:	d901      	bls.n	80046c0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80046bc:	2303      	movs	r3, #3
 80046be:	e067      	b.n	8004790 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80046c0:	4b35      	ldr	r3, [pc, #212]	; (8004798 <HAL_RCC_OscConfig+0x4f4>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d1f0      	bne.n	80046ae <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6a1b      	ldr	r3, [r3, #32]
 80046d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046d4:	d108      	bne.n	80046e8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80046d6:	4b30      	ldr	r3, [pc, #192]	; (8004798 <HAL_RCC_OscConfig+0x4f4>)
 80046d8:	685b      	ldr	r3, [r3, #4]
 80046da:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	689b      	ldr	r3, [r3, #8]
 80046e2:	492d      	ldr	r1, [pc, #180]	; (8004798 <HAL_RCC_OscConfig+0x4f4>)
 80046e4:	4313      	orrs	r3, r2
 80046e6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80046e8:	4b2b      	ldr	r3, [pc, #172]	; (8004798 <HAL_RCC_OscConfig+0x4f4>)
 80046ea:	685b      	ldr	r3, [r3, #4]
 80046ec:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6a19      	ldr	r1, [r3, #32]
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046f8:	430b      	orrs	r3, r1
 80046fa:	4927      	ldr	r1, [pc, #156]	; (8004798 <HAL_RCC_OscConfig+0x4f4>)
 80046fc:	4313      	orrs	r3, r2
 80046fe:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004700:	4b27      	ldr	r3, [pc, #156]	; (80047a0 <HAL_RCC_OscConfig+0x4fc>)
 8004702:	2201      	movs	r2, #1
 8004704:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004706:	f7fd f895 	bl	8001834 <HAL_GetTick>
 800470a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800470c:	e008      	b.n	8004720 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800470e:	f7fd f891 	bl	8001834 <HAL_GetTick>
 8004712:	4602      	mov	r2, r0
 8004714:	693b      	ldr	r3, [r7, #16]
 8004716:	1ad3      	subs	r3, r2, r3
 8004718:	2b02      	cmp	r3, #2
 800471a:	d901      	bls.n	8004720 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800471c:	2303      	movs	r3, #3
 800471e:	e037      	b.n	8004790 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004720:	4b1d      	ldr	r3, [pc, #116]	; (8004798 <HAL_RCC_OscConfig+0x4f4>)
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004728:	2b00      	cmp	r3, #0
 800472a:	d0f0      	beq.n	800470e <HAL_RCC_OscConfig+0x46a>
 800472c:	e02f      	b.n	800478e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800472e:	4b1c      	ldr	r3, [pc, #112]	; (80047a0 <HAL_RCC_OscConfig+0x4fc>)
 8004730:	2200      	movs	r2, #0
 8004732:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004734:	f7fd f87e 	bl	8001834 <HAL_GetTick>
 8004738:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800473a:	e008      	b.n	800474e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800473c:	f7fd f87a 	bl	8001834 <HAL_GetTick>
 8004740:	4602      	mov	r2, r0
 8004742:	693b      	ldr	r3, [r7, #16]
 8004744:	1ad3      	subs	r3, r2, r3
 8004746:	2b02      	cmp	r3, #2
 8004748:	d901      	bls.n	800474e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800474a:	2303      	movs	r3, #3
 800474c:	e020      	b.n	8004790 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800474e:	4b12      	ldr	r3, [pc, #72]	; (8004798 <HAL_RCC_OscConfig+0x4f4>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004756:	2b00      	cmp	r3, #0
 8004758:	d1f0      	bne.n	800473c <HAL_RCC_OscConfig+0x498>
 800475a:	e018      	b.n	800478e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	69db      	ldr	r3, [r3, #28]
 8004760:	2b01      	cmp	r3, #1
 8004762:	d101      	bne.n	8004768 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8004764:	2301      	movs	r3, #1
 8004766:	e013      	b.n	8004790 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004768:	4b0b      	ldr	r3, [pc, #44]	; (8004798 <HAL_RCC_OscConfig+0x4f4>)
 800476a:	685b      	ldr	r3, [r3, #4]
 800476c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6a1b      	ldr	r3, [r3, #32]
 8004778:	429a      	cmp	r2, r3
 800477a:	d106      	bne.n	800478a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004786:	429a      	cmp	r2, r3
 8004788:	d001      	beq.n	800478e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800478a:	2301      	movs	r3, #1
 800478c:	e000      	b.n	8004790 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800478e:	2300      	movs	r3, #0
}
 8004790:	4618      	mov	r0, r3
 8004792:	3718      	adds	r7, #24
 8004794:	46bd      	mov	sp, r7
 8004796:	bd80      	pop	{r7, pc}
 8004798:	40021000 	.word	0x40021000
 800479c:	40007000 	.word	0x40007000
 80047a0:	42420060 	.word	0x42420060

080047a4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b084      	sub	sp, #16
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
 80047ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d101      	bne.n	80047b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80047b4:	2301      	movs	r3, #1
 80047b6:	e0d0      	b.n	800495a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80047b8:	4b6a      	ldr	r3, [pc, #424]	; (8004964 <HAL_RCC_ClockConfig+0x1c0>)
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f003 0307 	and.w	r3, r3, #7
 80047c0:	683a      	ldr	r2, [r7, #0]
 80047c2:	429a      	cmp	r2, r3
 80047c4:	d910      	bls.n	80047e8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047c6:	4b67      	ldr	r3, [pc, #412]	; (8004964 <HAL_RCC_ClockConfig+0x1c0>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f023 0207 	bic.w	r2, r3, #7
 80047ce:	4965      	ldr	r1, [pc, #404]	; (8004964 <HAL_RCC_ClockConfig+0x1c0>)
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	4313      	orrs	r3, r2
 80047d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80047d6:	4b63      	ldr	r3, [pc, #396]	; (8004964 <HAL_RCC_ClockConfig+0x1c0>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f003 0307 	and.w	r3, r3, #7
 80047de:	683a      	ldr	r2, [r7, #0]
 80047e0:	429a      	cmp	r2, r3
 80047e2:	d001      	beq.n	80047e8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80047e4:	2301      	movs	r3, #1
 80047e6:	e0b8      	b.n	800495a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f003 0302 	and.w	r3, r3, #2
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d020      	beq.n	8004836 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f003 0304 	and.w	r3, r3, #4
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d005      	beq.n	800480c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004800:	4b59      	ldr	r3, [pc, #356]	; (8004968 <HAL_RCC_ClockConfig+0x1c4>)
 8004802:	685b      	ldr	r3, [r3, #4]
 8004804:	4a58      	ldr	r2, [pc, #352]	; (8004968 <HAL_RCC_ClockConfig+0x1c4>)
 8004806:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800480a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f003 0308 	and.w	r3, r3, #8
 8004814:	2b00      	cmp	r3, #0
 8004816:	d005      	beq.n	8004824 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004818:	4b53      	ldr	r3, [pc, #332]	; (8004968 <HAL_RCC_ClockConfig+0x1c4>)
 800481a:	685b      	ldr	r3, [r3, #4]
 800481c:	4a52      	ldr	r2, [pc, #328]	; (8004968 <HAL_RCC_ClockConfig+0x1c4>)
 800481e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004822:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004824:	4b50      	ldr	r3, [pc, #320]	; (8004968 <HAL_RCC_ClockConfig+0x1c4>)
 8004826:	685b      	ldr	r3, [r3, #4]
 8004828:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	689b      	ldr	r3, [r3, #8]
 8004830:	494d      	ldr	r1, [pc, #308]	; (8004968 <HAL_RCC_ClockConfig+0x1c4>)
 8004832:	4313      	orrs	r3, r2
 8004834:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f003 0301 	and.w	r3, r3, #1
 800483e:	2b00      	cmp	r3, #0
 8004840:	d040      	beq.n	80048c4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	685b      	ldr	r3, [r3, #4]
 8004846:	2b01      	cmp	r3, #1
 8004848:	d107      	bne.n	800485a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800484a:	4b47      	ldr	r3, [pc, #284]	; (8004968 <HAL_RCC_ClockConfig+0x1c4>)
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004852:	2b00      	cmp	r3, #0
 8004854:	d115      	bne.n	8004882 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004856:	2301      	movs	r3, #1
 8004858:	e07f      	b.n	800495a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	685b      	ldr	r3, [r3, #4]
 800485e:	2b02      	cmp	r3, #2
 8004860:	d107      	bne.n	8004872 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004862:	4b41      	ldr	r3, [pc, #260]	; (8004968 <HAL_RCC_ClockConfig+0x1c4>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800486a:	2b00      	cmp	r3, #0
 800486c:	d109      	bne.n	8004882 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800486e:	2301      	movs	r3, #1
 8004870:	e073      	b.n	800495a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004872:	4b3d      	ldr	r3, [pc, #244]	; (8004968 <HAL_RCC_ClockConfig+0x1c4>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f003 0302 	and.w	r3, r3, #2
 800487a:	2b00      	cmp	r3, #0
 800487c:	d101      	bne.n	8004882 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800487e:	2301      	movs	r3, #1
 8004880:	e06b      	b.n	800495a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004882:	4b39      	ldr	r3, [pc, #228]	; (8004968 <HAL_RCC_ClockConfig+0x1c4>)
 8004884:	685b      	ldr	r3, [r3, #4]
 8004886:	f023 0203 	bic.w	r2, r3, #3
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	685b      	ldr	r3, [r3, #4]
 800488e:	4936      	ldr	r1, [pc, #216]	; (8004968 <HAL_RCC_ClockConfig+0x1c4>)
 8004890:	4313      	orrs	r3, r2
 8004892:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004894:	f7fc ffce 	bl	8001834 <HAL_GetTick>
 8004898:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800489a:	e00a      	b.n	80048b2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800489c:	f7fc ffca 	bl	8001834 <HAL_GetTick>
 80048a0:	4602      	mov	r2, r0
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	1ad3      	subs	r3, r2, r3
 80048a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d901      	bls.n	80048b2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80048ae:	2303      	movs	r3, #3
 80048b0:	e053      	b.n	800495a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048b2:	4b2d      	ldr	r3, [pc, #180]	; (8004968 <HAL_RCC_ClockConfig+0x1c4>)
 80048b4:	685b      	ldr	r3, [r3, #4]
 80048b6:	f003 020c 	and.w	r2, r3, #12
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	685b      	ldr	r3, [r3, #4]
 80048be:	009b      	lsls	r3, r3, #2
 80048c0:	429a      	cmp	r2, r3
 80048c2:	d1eb      	bne.n	800489c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80048c4:	4b27      	ldr	r3, [pc, #156]	; (8004964 <HAL_RCC_ClockConfig+0x1c0>)
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f003 0307 	and.w	r3, r3, #7
 80048cc:	683a      	ldr	r2, [r7, #0]
 80048ce:	429a      	cmp	r2, r3
 80048d0:	d210      	bcs.n	80048f4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048d2:	4b24      	ldr	r3, [pc, #144]	; (8004964 <HAL_RCC_ClockConfig+0x1c0>)
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f023 0207 	bic.w	r2, r3, #7
 80048da:	4922      	ldr	r1, [pc, #136]	; (8004964 <HAL_RCC_ClockConfig+0x1c0>)
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	4313      	orrs	r3, r2
 80048e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80048e2:	4b20      	ldr	r3, [pc, #128]	; (8004964 <HAL_RCC_ClockConfig+0x1c0>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f003 0307 	and.w	r3, r3, #7
 80048ea:	683a      	ldr	r2, [r7, #0]
 80048ec:	429a      	cmp	r2, r3
 80048ee:	d001      	beq.n	80048f4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80048f0:	2301      	movs	r3, #1
 80048f2:	e032      	b.n	800495a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f003 0304 	and.w	r3, r3, #4
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d008      	beq.n	8004912 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004900:	4b19      	ldr	r3, [pc, #100]	; (8004968 <HAL_RCC_ClockConfig+0x1c4>)
 8004902:	685b      	ldr	r3, [r3, #4]
 8004904:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	68db      	ldr	r3, [r3, #12]
 800490c:	4916      	ldr	r1, [pc, #88]	; (8004968 <HAL_RCC_ClockConfig+0x1c4>)
 800490e:	4313      	orrs	r3, r2
 8004910:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f003 0308 	and.w	r3, r3, #8
 800491a:	2b00      	cmp	r3, #0
 800491c:	d009      	beq.n	8004932 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800491e:	4b12      	ldr	r3, [pc, #72]	; (8004968 <HAL_RCC_ClockConfig+0x1c4>)
 8004920:	685b      	ldr	r3, [r3, #4]
 8004922:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	691b      	ldr	r3, [r3, #16]
 800492a:	00db      	lsls	r3, r3, #3
 800492c:	490e      	ldr	r1, [pc, #56]	; (8004968 <HAL_RCC_ClockConfig+0x1c4>)
 800492e:	4313      	orrs	r3, r2
 8004930:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004932:	f000 f821 	bl	8004978 <HAL_RCC_GetSysClockFreq>
 8004936:	4602      	mov	r2, r0
 8004938:	4b0b      	ldr	r3, [pc, #44]	; (8004968 <HAL_RCC_ClockConfig+0x1c4>)
 800493a:	685b      	ldr	r3, [r3, #4]
 800493c:	091b      	lsrs	r3, r3, #4
 800493e:	f003 030f 	and.w	r3, r3, #15
 8004942:	490a      	ldr	r1, [pc, #40]	; (800496c <HAL_RCC_ClockConfig+0x1c8>)
 8004944:	5ccb      	ldrb	r3, [r1, r3]
 8004946:	fa22 f303 	lsr.w	r3, r2, r3
 800494a:	4a09      	ldr	r2, [pc, #36]	; (8004970 <HAL_RCC_ClockConfig+0x1cc>)
 800494c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800494e:	4b09      	ldr	r3, [pc, #36]	; (8004974 <HAL_RCC_ClockConfig+0x1d0>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	4618      	mov	r0, r3
 8004954:	f7fc ff2c 	bl	80017b0 <HAL_InitTick>

  return HAL_OK;
 8004958:	2300      	movs	r3, #0
}
 800495a:	4618      	mov	r0, r3
 800495c:	3710      	adds	r7, #16
 800495e:	46bd      	mov	sp, r7
 8004960:	bd80      	pop	{r7, pc}
 8004962:	bf00      	nop
 8004964:	40022000 	.word	0x40022000
 8004968:	40021000 	.word	0x40021000
 800496c:	08005c1c 	.word	0x08005c1c
 8004970:	20000084 	.word	0x20000084
 8004974:	20000088 	.word	0x20000088

08004978 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004978:	b480      	push	{r7}
 800497a:	b087      	sub	sp, #28
 800497c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800497e:	2300      	movs	r3, #0
 8004980:	60fb      	str	r3, [r7, #12]
 8004982:	2300      	movs	r3, #0
 8004984:	60bb      	str	r3, [r7, #8]
 8004986:	2300      	movs	r3, #0
 8004988:	617b      	str	r3, [r7, #20]
 800498a:	2300      	movs	r3, #0
 800498c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800498e:	2300      	movs	r3, #0
 8004990:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004992:	4b1e      	ldr	r3, [pc, #120]	; (8004a0c <HAL_RCC_GetSysClockFreq+0x94>)
 8004994:	685b      	ldr	r3, [r3, #4]
 8004996:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	f003 030c 	and.w	r3, r3, #12
 800499e:	2b04      	cmp	r3, #4
 80049a0:	d002      	beq.n	80049a8 <HAL_RCC_GetSysClockFreq+0x30>
 80049a2:	2b08      	cmp	r3, #8
 80049a4:	d003      	beq.n	80049ae <HAL_RCC_GetSysClockFreq+0x36>
 80049a6:	e027      	b.n	80049f8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80049a8:	4b19      	ldr	r3, [pc, #100]	; (8004a10 <HAL_RCC_GetSysClockFreq+0x98>)
 80049aa:	613b      	str	r3, [r7, #16]
      break;
 80049ac:	e027      	b.n	80049fe <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	0c9b      	lsrs	r3, r3, #18
 80049b2:	f003 030f 	and.w	r3, r3, #15
 80049b6:	4a17      	ldr	r2, [pc, #92]	; (8004a14 <HAL_RCC_GetSysClockFreq+0x9c>)
 80049b8:	5cd3      	ldrb	r3, [r2, r3]
 80049ba:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d010      	beq.n	80049e8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80049c6:	4b11      	ldr	r3, [pc, #68]	; (8004a0c <HAL_RCC_GetSysClockFreq+0x94>)
 80049c8:	685b      	ldr	r3, [r3, #4]
 80049ca:	0c5b      	lsrs	r3, r3, #17
 80049cc:	f003 0301 	and.w	r3, r3, #1
 80049d0:	4a11      	ldr	r2, [pc, #68]	; (8004a18 <HAL_RCC_GetSysClockFreq+0xa0>)
 80049d2:	5cd3      	ldrb	r3, [r2, r3]
 80049d4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	4a0d      	ldr	r2, [pc, #52]	; (8004a10 <HAL_RCC_GetSysClockFreq+0x98>)
 80049da:	fb02 f203 	mul.w	r2, r2, r3
 80049de:	68bb      	ldr	r3, [r7, #8]
 80049e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80049e4:	617b      	str	r3, [r7, #20]
 80049e6:	e004      	b.n	80049f2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	4a0c      	ldr	r2, [pc, #48]	; (8004a1c <HAL_RCC_GetSysClockFreq+0xa4>)
 80049ec:	fb02 f303 	mul.w	r3, r2, r3
 80049f0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80049f2:	697b      	ldr	r3, [r7, #20]
 80049f4:	613b      	str	r3, [r7, #16]
      break;
 80049f6:	e002      	b.n	80049fe <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80049f8:	4b05      	ldr	r3, [pc, #20]	; (8004a10 <HAL_RCC_GetSysClockFreq+0x98>)
 80049fa:	613b      	str	r3, [r7, #16]
      break;
 80049fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80049fe:	693b      	ldr	r3, [r7, #16]
}
 8004a00:	4618      	mov	r0, r3
 8004a02:	371c      	adds	r7, #28
 8004a04:	46bd      	mov	sp, r7
 8004a06:	bc80      	pop	{r7}
 8004a08:	4770      	bx	lr
 8004a0a:	bf00      	nop
 8004a0c:	40021000 	.word	0x40021000
 8004a10:	007a1200 	.word	0x007a1200
 8004a14:	08005c34 	.word	0x08005c34
 8004a18:	08005c44 	.word	0x08005c44
 8004a1c:	003d0900 	.word	0x003d0900

08004a20 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004a20:	b480      	push	{r7}
 8004a22:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004a24:	4b02      	ldr	r3, [pc, #8]	; (8004a30 <HAL_RCC_GetHCLKFreq+0x10>)
 8004a26:	681b      	ldr	r3, [r3, #0]
}
 8004a28:	4618      	mov	r0, r3
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	bc80      	pop	{r7}
 8004a2e:	4770      	bx	lr
 8004a30:	20000084 	.word	0x20000084

08004a34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004a38:	f7ff fff2 	bl	8004a20 <HAL_RCC_GetHCLKFreq>
 8004a3c:	4602      	mov	r2, r0
 8004a3e:	4b05      	ldr	r3, [pc, #20]	; (8004a54 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004a40:	685b      	ldr	r3, [r3, #4]
 8004a42:	0a1b      	lsrs	r3, r3, #8
 8004a44:	f003 0307 	and.w	r3, r3, #7
 8004a48:	4903      	ldr	r1, [pc, #12]	; (8004a58 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004a4a:	5ccb      	ldrb	r3, [r1, r3]
 8004a4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a50:	4618      	mov	r0, r3
 8004a52:	bd80      	pop	{r7, pc}
 8004a54:	40021000 	.word	0x40021000
 8004a58:	08005c2c 	.word	0x08005c2c

08004a5c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004a5c:	b480      	push	{r7}
 8004a5e:	b085      	sub	sp, #20
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004a64:	4b0a      	ldr	r3, [pc, #40]	; (8004a90 <RCC_Delay+0x34>)
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	4a0a      	ldr	r2, [pc, #40]	; (8004a94 <RCC_Delay+0x38>)
 8004a6a:	fba2 2303 	umull	r2, r3, r2, r3
 8004a6e:	0a5b      	lsrs	r3, r3, #9
 8004a70:	687a      	ldr	r2, [r7, #4]
 8004a72:	fb02 f303 	mul.w	r3, r2, r3
 8004a76:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004a78:	bf00      	nop
  }
  while (Delay --);
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	1e5a      	subs	r2, r3, #1
 8004a7e:	60fa      	str	r2, [r7, #12]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d1f9      	bne.n	8004a78 <RCC_Delay+0x1c>
}
 8004a84:	bf00      	nop
 8004a86:	bf00      	nop
 8004a88:	3714      	adds	r7, #20
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	bc80      	pop	{r7}
 8004a8e:	4770      	bx	lr
 8004a90:	20000084 	.word	0x20000084
 8004a94:	10624dd3 	.word	0x10624dd3

08004a98 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b082      	sub	sp, #8
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d101      	bne.n	8004aaa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004aa6:	2301      	movs	r3, #1
 8004aa8:	e041      	b.n	8004b2e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ab0:	b2db      	uxtb	r3, r3
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d106      	bne.n	8004ac4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	2200      	movs	r2, #0
 8004aba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004abe:	6878      	ldr	r0, [r7, #4]
 8004ac0:	f7fc fd94 	bl	80015ec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2202      	movs	r2, #2
 8004ac8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681a      	ldr	r2, [r3, #0]
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	3304      	adds	r3, #4
 8004ad4:	4619      	mov	r1, r3
 8004ad6:	4610      	mov	r0, r2
 8004ad8:	f000 fa5c 	bl	8004f94 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2201      	movs	r2, #1
 8004ae0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2201      	movs	r2, #1
 8004ae8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2201      	movs	r2, #1
 8004af0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2201      	movs	r2, #1
 8004af8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2201      	movs	r2, #1
 8004b00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2201      	movs	r2, #1
 8004b08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2201      	movs	r2, #1
 8004b10:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2201      	movs	r2, #1
 8004b18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2201      	movs	r2, #1
 8004b20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2201      	movs	r2, #1
 8004b28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004b2c:	2300      	movs	r3, #0
}
 8004b2e:	4618      	mov	r0, r3
 8004b30:	3708      	adds	r7, #8
 8004b32:	46bd      	mov	sp, r7
 8004b34:	bd80      	pop	{r7, pc}
	...

08004b38 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004b38:	b480      	push	{r7}
 8004b3a:	b085      	sub	sp, #20
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b46:	b2db      	uxtb	r3, r3
 8004b48:	2b01      	cmp	r3, #1
 8004b4a:	d001      	beq.n	8004b50 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004b4c:	2301      	movs	r3, #1
 8004b4e:	e03a      	b.n	8004bc6 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2202      	movs	r2, #2
 8004b54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	68da      	ldr	r2, [r3, #12]
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f042 0201 	orr.w	r2, r2, #1
 8004b66:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	4a18      	ldr	r2, [pc, #96]	; (8004bd0 <HAL_TIM_Base_Start_IT+0x98>)
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d00e      	beq.n	8004b90 <HAL_TIM_Base_Start_IT+0x58>
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b7a:	d009      	beq.n	8004b90 <HAL_TIM_Base_Start_IT+0x58>
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	4a14      	ldr	r2, [pc, #80]	; (8004bd4 <HAL_TIM_Base_Start_IT+0x9c>)
 8004b82:	4293      	cmp	r3, r2
 8004b84:	d004      	beq.n	8004b90 <HAL_TIM_Base_Start_IT+0x58>
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	4a13      	ldr	r2, [pc, #76]	; (8004bd8 <HAL_TIM_Base_Start_IT+0xa0>)
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	d111      	bne.n	8004bb4 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	689b      	ldr	r3, [r3, #8]
 8004b96:	f003 0307 	and.w	r3, r3, #7
 8004b9a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	2b06      	cmp	r3, #6
 8004ba0:	d010      	beq.n	8004bc4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	681a      	ldr	r2, [r3, #0]
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f042 0201 	orr.w	r2, r2, #1
 8004bb0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bb2:	e007      	b.n	8004bc4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	681a      	ldr	r2, [r3, #0]
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f042 0201 	orr.w	r2, r2, #1
 8004bc2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004bc4:	2300      	movs	r3, #0
}
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	3714      	adds	r7, #20
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	bc80      	pop	{r7}
 8004bce:	4770      	bx	lr
 8004bd0:	40012c00 	.word	0x40012c00
 8004bd4:	40000400 	.word	0x40000400
 8004bd8:	40000800 	.word	0x40000800

08004bdc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b084      	sub	sp, #16
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	68db      	ldr	r3, [r3, #12]
 8004bea:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	691b      	ldr	r3, [r3, #16]
 8004bf2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004bf4:	68bb      	ldr	r3, [r7, #8]
 8004bf6:	f003 0302 	and.w	r3, r3, #2
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d020      	beq.n	8004c40 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	f003 0302 	and.w	r3, r3, #2
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d01b      	beq.n	8004c40 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f06f 0202 	mvn.w	r2, #2
 8004c10:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	2201      	movs	r2, #1
 8004c16:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	699b      	ldr	r3, [r3, #24]
 8004c1e:	f003 0303 	and.w	r3, r3, #3
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d003      	beq.n	8004c2e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004c26:	6878      	ldr	r0, [r7, #4]
 8004c28:	f000 f998 	bl	8004f5c <HAL_TIM_IC_CaptureCallback>
 8004c2c:	e005      	b.n	8004c3a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c2e:	6878      	ldr	r0, [r7, #4]
 8004c30:	f000 f98b 	bl	8004f4a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c34:	6878      	ldr	r0, [r7, #4]
 8004c36:	f000 f99a 	bl	8004f6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004c40:	68bb      	ldr	r3, [r7, #8]
 8004c42:	f003 0304 	and.w	r3, r3, #4
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d020      	beq.n	8004c8c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	f003 0304 	and.w	r3, r3, #4
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d01b      	beq.n	8004c8c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f06f 0204 	mvn.w	r2, #4
 8004c5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	2202      	movs	r2, #2
 8004c62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	699b      	ldr	r3, [r3, #24]
 8004c6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d003      	beq.n	8004c7a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c72:	6878      	ldr	r0, [r7, #4]
 8004c74:	f000 f972 	bl	8004f5c <HAL_TIM_IC_CaptureCallback>
 8004c78:	e005      	b.n	8004c86 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c7a:	6878      	ldr	r0, [r7, #4]
 8004c7c:	f000 f965 	bl	8004f4a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c80:	6878      	ldr	r0, [r7, #4]
 8004c82:	f000 f974 	bl	8004f6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2200      	movs	r2, #0
 8004c8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004c8c:	68bb      	ldr	r3, [r7, #8]
 8004c8e:	f003 0308 	and.w	r3, r3, #8
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d020      	beq.n	8004cd8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	f003 0308 	and.w	r3, r3, #8
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d01b      	beq.n	8004cd8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f06f 0208 	mvn.w	r2, #8
 8004ca8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	2204      	movs	r2, #4
 8004cae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	69db      	ldr	r3, [r3, #28]
 8004cb6:	f003 0303 	and.w	r3, r3, #3
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d003      	beq.n	8004cc6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004cbe:	6878      	ldr	r0, [r7, #4]
 8004cc0:	f000 f94c 	bl	8004f5c <HAL_TIM_IC_CaptureCallback>
 8004cc4:	e005      	b.n	8004cd2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cc6:	6878      	ldr	r0, [r7, #4]
 8004cc8:	f000 f93f 	bl	8004f4a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ccc:	6878      	ldr	r0, [r7, #4]
 8004cce:	f000 f94e 	bl	8004f6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004cd8:	68bb      	ldr	r3, [r7, #8]
 8004cda:	f003 0310 	and.w	r3, r3, #16
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d020      	beq.n	8004d24 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	f003 0310 	and.w	r3, r3, #16
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d01b      	beq.n	8004d24 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f06f 0210 	mvn.w	r2, #16
 8004cf4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	2208      	movs	r2, #8
 8004cfa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	69db      	ldr	r3, [r3, #28]
 8004d02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d003      	beq.n	8004d12 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d0a:	6878      	ldr	r0, [r7, #4]
 8004d0c:	f000 f926 	bl	8004f5c <HAL_TIM_IC_CaptureCallback>
 8004d10:	e005      	b.n	8004d1e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d12:	6878      	ldr	r0, [r7, #4]
 8004d14:	f000 f919 	bl	8004f4a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d18:	6878      	ldr	r0, [r7, #4]
 8004d1a:	f000 f928 	bl	8004f6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	2200      	movs	r2, #0
 8004d22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004d24:	68bb      	ldr	r3, [r7, #8]
 8004d26:	f003 0301 	and.w	r3, r3, #1
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d00c      	beq.n	8004d48 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	f003 0301 	and.w	r3, r3, #1
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d007      	beq.n	8004d48 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f06f 0201 	mvn.w	r2, #1
 8004d40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004d42:	6878      	ldr	r0, [r7, #4]
 8004d44:	f7fc fb5a 	bl	80013fc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004d48:	68bb      	ldr	r3, [r7, #8]
 8004d4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d00c      	beq.n	8004d6c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d007      	beq.n	8004d6c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004d64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004d66:	6878      	ldr	r0, [r7, #4]
 8004d68:	f000 fa7f 	bl	800526a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004d6c:	68bb      	ldr	r3, [r7, #8]
 8004d6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d00c      	beq.n	8004d90 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d007      	beq.n	8004d90 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004d88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004d8a:	6878      	ldr	r0, [r7, #4]
 8004d8c:	f000 f8f8 	bl	8004f80 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004d90:	68bb      	ldr	r3, [r7, #8]
 8004d92:	f003 0320 	and.w	r3, r3, #32
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d00c      	beq.n	8004db4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	f003 0320 	and.w	r3, r3, #32
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d007      	beq.n	8004db4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f06f 0220 	mvn.w	r2, #32
 8004dac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004dae:	6878      	ldr	r0, [r7, #4]
 8004db0:	f000 fa52 	bl	8005258 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004db4:	bf00      	nop
 8004db6:	3710      	adds	r7, #16
 8004db8:	46bd      	mov	sp, r7
 8004dba:	bd80      	pop	{r7, pc}

08004dbc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	b084      	sub	sp, #16
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
 8004dc4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004dd0:	2b01      	cmp	r3, #1
 8004dd2:	d101      	bne.n	8004dd8 <HAL_TIM_ConfigClockSource+0x1c>
 8004dd4:	2302      	movs	r3, #2
 8004dd6:	e0b4      	b.n	8004f42 <HAL_TIM_ConfigClockSource+0x186>
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2201      	movs	r2, #1
 8004ddc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2202      	movs	r2, #2
 8004de4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	689b      	ldr	r3, [r3, #8]
 8004dee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004df0:	68bb      	ldr	r3, [r7, #8]
 8004df2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004df6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004df8:	68bb      	ldr	r3, [r7, #8]
 8004dfa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004dfe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	68ba      	ldr	r2, [r7, #8]
 8004e06:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e10:	d03e      	beq.n	8004e90 <HAL_TIM_ConfigClockSource+0xd4>
 8004e12:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e16:	f200 8087 	bhi.w	8004f28 <HAL_TIM_ConfigClockSource+0x16c>
 8004e1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e1e:	f000 8086 	beq.w	8004f2e <HAL_TIM_ConfigClockSource+0x172>
 8004e22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e26:	d87f      	bhi.n	8004f28 <HAL_TIM_ConfigClockSource+0x16c>
 8004e28:	2b70      	cmp	r3, #112	; 0x70
 8004e2a:	d01a      	beq.n	8004e62 <HAL_TIM_ConfigClockSource+0xa6>
 8004e2c:	2b70      	cmp	r3, #112	; 0x70
 8004e2e:	d87b      	bhi.n	8004f28 <HAL_TIM_ConfigClockSource+0x16c>
 8004e30:	2b60      	cmp	r3, #96	; 0x60
 8004e32:	d050      	beq.n	8004ed6 <HAL_TIM_ConfigClockSource+0x11a>
 8004e34:	2b60      	cmp	r3, #96	; 0x60
 8004e36:	d877      	bhi.n	8004f28 <HAL_TIM_ConfigClockSource+0x16c>
 8004e38:	2b50      	cmp	r3, #80	; 0x50
 8004e3a:	d03c      	beq.n	8004eb6 <HAL_TIM_ConfigClockSource+0xfa>
 8004e3c:	2b50      	cmp	r3, #80	; 0x50
 8004e3e:	d873      	bhi.n	8004f28 <HAL_TIM_ConfigClockSource+0x16c>
 8004e40:	2b40      	cmp	r3, #64	; 0x40
 8004e42:	d058      	beq.n	8004ef6 <HAL_TIM_ConfigClockSource+0x13a>
 8004e44:	2b40      	cmp	r3, #64	; 0x40
 8004e46:	d86f      	bhi.n	8004f28 <HAL_TIM_ConfigClockSource+0x16c>
 8004e48:	2b30      	cmp	r3, #48	; 0x30
 8004e4a:	d064      	beq.n	8004f16 <HAL_TIM_ConfigClockSource+0x15a>
 8004e4c:	2b30      	cmp	r3, #48	; 0x30
 8004e4e:	d86b      	bhi.n	8004f28 <HAL_TIM_ConfigClockSource+0x16c>
 8004e50:	2b20      	cmp	r3, #32
 8004e52:	d060      	beq.n	8004f16 <HAL_TIM_ConfigClockSource+0x15a>
 8004e54:	2b20      	cmp	r3, #32
 8004e56:	d867      	bhi.n	8004f28 <HAL_TIM_ConfigClockSource+0x16c>
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d05c      	beq.n	8004f16 <HAL_TIM_ConfigClockSource+0x15a>
 8004e5c:	2b10      	cmp	r3, #16
 8004e5e:	d05a      	beq.n	8004f16 <HAL_TIM_ConfigClockSource+0x15a>
 8004e60:	e062      	b.n	8004f28 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6818      	ldr	r0, [r3, #0]
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	6899      	ldr	r1, [r3, #8]
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	685a      	ldr	r2, [r3, #4]
 8004e6e:	683b      	ldr	r3, [r7, #0]
 8004e70:	68db      	ldr	r3, [r3, #12]
 8004e72:	f000 f974 	bl	800515e <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	689b      	ldr	r3, [r3, #8]
 8004e7c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004e7e:	68bb      	ldr	r3, [r7, #8]
 8004e80:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004e84:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	68ba      	ldr	r2, [r7, #8]
 8004e8c:	609a      	str	r2, [r3, #8]
      break;
 8004e8e:	e04f      	b.n	8004f30 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	6818      	ldr	r0, [r3, #0]
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	6899      	ldr	r1, [r3, #8]
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	685a      	ldr	r2, [r3, #4]
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	68db      	ldr	r3, [r3, #12]
 8004ea0:	f000 f95d 	bl	800515e <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	689a      	ldr	r2, [r3, #8]
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004eb2:	609a      	str	r2, [r3, #8]
      break;
 8004eb4:	e03c      	b.n	8004f30 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6818      	ldr	r0, [r3, #0]
 8004eba:	683b      	ldr	r3, [r7, #0]
 8004ebc:	6859      	ldr	r1, [r3, #4]
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	68db      	ldr	r3, [r3, #12]
 8004ec2:	461a      	mov	r2, r3
 8004ec4:	f000 f8d4 	bl	8005070 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	2150      	movs	r1, #80	; 0x50
 8004ece:	4618      	mov	r0, r3
 8004ed0:	f000 f92b 	bl	800512a <TIM_ITRx_SetConfig>
      break;
 8004ed4:	e02c      	b.n	8004f30 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6818      	ldr	r0, [r3, #0]
 8004eda:	683b      	ldr	r3, [r7, #0]
 8004edc:	6859      	ldr	r1, [r3, #4]
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	68db      	ldr	r3, [r3, #12]
 8004ee2:	461a      	mov	r2, r3
 8004ee4:	f000 f8f2 	bl	80050cc <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	2160      	movs	r1, #96	; 0x60
 8004eee:	4618      	mov	r0, r3
 8004ef0:	f000 f91b 	bl	800512a <TIM_ITRx_SetConfig>
      break;
 8004ef4:	e01c      	b.n	8004f30 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6818      	ldr	r0, [r3, #0]
 8004efa:	683b      	ldr	r3, [r7, #0]
 8004efc:	6859      	ldr	r1, [r3, #4]
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	68db      	ldr	r3, [r3, #12]
 8004f02:	461a      	mov	r2, r3
 8004f04:	f000 f8b4 	bl	8005070 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	2140      	movs	r1, #64	; 0x40
 8004f0e:	4618      	mov	r0, r3
 8004f10:	f000 f90b 	bl	800512a <TIM_ITRx_SetConfig>
      break;
 8004f14:	e00c      	b.n	8004f30 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681a      	ldr	r2, [r3, #0]
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	4619      	mov	r1, r3
 8004f20:	4610      	mov	r0, r2
 8004f22:	f000 f902 	bl	800512a <TIM_ITRx_SetConfig>
      break;
 8004f26:	e003      	b.n	8004f30 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004f28:	2301      	movs	r3, #1
 8004f2a:	73fb      	strb	r3, [r7, #15]
      break;
 8004f2c:	e000      	b.n	8004f30 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004f2e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2201      	movs	r2, #1
 8004f34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004f40:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f42:	4618      	mov	r0, r3
 8004f44:	3710      	adds	r7, #16
 8004f46:	46bd      	mov	sp, r7
 8004f48:	bd80      	pop	{r7, pc}

08004f4a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004f4a:	b480      	push	{r7}
 8004f4c:	b083      	sub	sp, #12
 8004f4e:	af00      	add	r7, sp, #0
 8004f50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004f52:	bf00      	nop
 8004f54:	370c      	adds	r7, #12
 8004f56:	46bd      	mov	sp, r7
 8004f58:	bc80      	pop	{r7}
 8004f5a:	4770      	bx	lr

08004f5c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004f5c:	b480      	push	{r7}
 8004f5e:	b083      	sub	sp, #12
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004f64:	bf00      	nop
 8004f66:	370c      	adds	r7, #12
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	bc80      	pop	{r7}
 8004f6c:	4770      	bx	lr

08004f6e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004f6e:	b480      	push	{r7}
 8004f70:	b083      	sub	sp, #12
 8004f72:	af00      	add	r7, sp, #0
 8004f74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004f76:	bf00      	nop
 8004f78:	370c      	adds	r7, #12
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	bc80      	pop	{r7}
 8004f7e:	4770      	bx	lr

08004f80 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004f80:	b480      	push	{r7}
 8004f82:	b083      	sub	sp, #12
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004f88:	bf00      	nop
 8004f8a:	370c      	adds	r7, #12
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	bc80      	pop	{r7}
 8004f90:	4770      	bx	lr
	...

08004f94 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004f94:	b480      	push	{r7}
 8004f96:	b085      	sub	sp, #20
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
 8004f9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	4a2f      	ldr	r2, [pc, #188]	; (8005064 <TIM_Base_SetConfig+0xd0>)
 8004fa8:	4293      	cmp	r3, r2
 8004faa:	d00b      	beq.n	8004fc4 <TIM_Base_SetConfig+0x30>
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fb2:	d007      	beq.n	8004fc4 <TIM_Base_SetConfig+0x30>
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	4a2c      	ldr	r2, [pc, #176]	; (8005068 <TIM_Base_SetConfig+0xd4>)
 8004fb8:	4293      	cmp	r3, r2
 8004fba:	d003      	beq.n	8004fc4 <TIM_Base_SetConfig+0x30>
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	4a2b      	ldr	r2, [pc, #172]	; (800506c <TIM_Base_SetConfig+0xd8>)
 8004fc0:	4293      	cmp	r3, r2
 8004fc2:	d108      	bne.n	8004fd6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	685b      	ldr	r3, [r3, #4]
 8004fd0:	68fa      	ldr	r2, [r7, #12]
 8004fd2:	4313      	orrs	r3, r2
 8004fd4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	4a22      	ldr	r2, [pc, #136]	; (8005064 <TIM_Base_SetConfig+0xd0>)
 8004fda:	4293      	cmp	r3, r2
 8004fdc:	d00b      	beq.n	8004ff6 <TIM_Base_SetConfig+0x62>
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fe4:	d007      	beq.n	8004ff6 <TIM_Base_SetConfig+0x62>
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	4a1f      	ldr	r2, [pc, #124]	; (8005068 <TIM_Base_SetConfig+0xd4>)
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d003      	beq.n	8004ff6 <TIM_Base_SetConfig+0x62>
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	4a1e      	ldr	r2, [pc, #120]	; (800506c <TIM_Base_SetConfig+0xd8>)
 8004ff2:	4293      	cmp	r3, r2
 8004ff4:	d108      	bne.n	8005008 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ffc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	68db      	ldr	r3, [r3, #12]
 8005002:	68fa      	ldr	r2, [r7, #12]
 8005004:	4313      	orrs	r3, r2
 8005006:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	695b      	ldr	r3, [r3, #20]
 8005012:	4313      	orrs	r3, r2
 8005014:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	68fa      	ldr	r2, [r7, #12]
 800501a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	689a      	ldr	r2, [r3, #8]
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	681a      	ldr	r2, [r3, #0]
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	4a0d      	ldr	r2, [pc, #52]	; (8005064 <TIM_Base_SetConfig+0xd0>)
 8005030:	4293      	cmp	r3, r2
 8005032:	d103      	bne.n	800503c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	691a      	ldr	r2, [r3, #16]
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2201      	movs	r2, #1
 8005040:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	691b      	ldr	r3, [r3, #16]
 8005046:	f003 0301 	and.w	r3, r3, #1
 800504a:	2b00      	cmp	r3, #0
 800504c:	d005      	beq.n	800505a <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	691b      	ldr	r3, [r3, #16]
 8005052:	f023 0201 	bic.w	r2, r3, #1
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	611a      	str	r2, [r3, #16]
  }
}
 800505a:	bf00      	nop
 800505c:	3714      	adds	r7, #20
 800505e:	46bd      	mov	sp, r7
 8005060:	bc80      	pop	{r7}
 8005062:	4770      	bx	lr
 8005064:	40012c00 	.word	0x40012c00
 8005068:	40000400 	.word	0x40000400
 800506c:	40000800 	.word	0x40000800

08005070 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005070:	b480      	push	{r7}
 8005072:	b087      	sub	sp, #28
 8005074:	af00      	add	r7, sp, #0
 8005076:	60f8      	str	r0, [r7, #12]
 8005078:	60b9      	str	r1, [r7, #8]
 800507a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	6a1b      	ldr	r3, [r3, #32]
 8005080:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	6a1b      	ldr	r3, [r3, #32]
 8005086:	f023 0201 	bic.w	r2, r3, #1
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	699b      	ldr	r3, [r3, #24]
 8005092:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005094:	693b      	ldr	r3, [r7, #16]
 8005096:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800509a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	011b      	lsls	r3, r3, #4
 80050a0:	693a      	ldr	r2, [r7, #16]
 80050a2:	4313      	orrs	r3, r2
 80050a4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80050a6:	697b      	ldr	r3, [r7, #20]
 80050a8:	f023 030a 	bic.w	r3, r3, #10
 80050ac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80050ae:	697a      	ldr	r2, [r7, #20]
 80050b0:	68bb      	ldr	r3, [r7, #8]
 80050b2:	4313      	orrs	r3, r2
 80050b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	693a      	ldr	r2, [r7, #16]
 80050ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	697a      	ldr	r2, [r7, #20]
 80050c0:	621a      	str	r2, [r3, #32]
}
 80050c2:	bf00      	nop
 80050c4:	371c      	adds	r7, #28
 80050c6:	46bd      	mov	sp, r7
 80050c8:	bc80      	pop	{r7}
 80050ca:	4770      	bx	lr

080050cc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80050cc:	b480      	push	{r7}
 80050ce:	b087      	sub	sp, #28
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	60f8      	str	r0, [r7, #12]
 80050d4:	60b9      	str	r1, [r7, #8]
 80050d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	6a1b      	ldr	r3, [r3, #32]
 80050dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	6a1b      	ldr	r3, [r3, #32]
 80050e2:	f023 0210 	bic.w	r2, r3, #16
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	699b      	ldr	r3, [r3, #24]
 80050ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80050f0:	693b      	ldr	r3, [r7, #16]
 80050f2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80050f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	031b      	lsls	r3, r3, #12
 80050fc:	693a      	ldr	r2, [r7, #16]
 80050fe:	4313      	orrs	r3, r2
 8005100:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005102:	697b      	ldr	r3, [r7, #20]
 8005104:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005108:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800510a:	68bb      	ldr	r3, [r7, #8]
 800510c:	011b      	lsls	r3, r3, #4
 800510e:	697a      	ldr	r2, [r7, #20]
 8005110:	4313      	orrs	r3, r2
 8005112:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	693a      	ldr	r2, [r7, #16]
 8005118:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	697a      	ldr	r2, [r7, #20]
 800511e:	621a      	str	r2, [r3, #32]
}
 8005120:	bf00      	nop
 8005122:	371c      	adds	r7, #28
 8005124:	46bd      	mov	sp, r7
 8005126:	bc80      	pop	{r7}
 8005128:	4770      	bx	lr

0800512a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800512a:	b480      	push	{r7}
 800512c:	b085      	sub	sp, #20
 800512e:	af00      	add	r7, sp, #0
 8005130:	6078      	str	r0, [r7, #4]
 8005132:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	689b      	ldr	r3, [r3, #8]
 8005138:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005140:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005142:	683a      	ldr	r2, [r7, #0]
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	4313      	orrs	r3, r2
 8005148:	f043 0307 	orr.w	r3, r3, #7
 800514c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	68fa      	ldr	r2, [r7, #12]
 8005152:	609a      	str	r2, [r3, #8]
}
 8005154:	bf00      	nop
 8005156:	3714      	adds	r7, #20
 8005158:	46bd      	mov	sp, r7
 800515a:	bc80      	pop	{r7}
 800515c:	4770      	bx	lr

0800515e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800515e:	b480      	push	{r7}
 8005160:	b087      	sub	sp, #28
 8005162:	af00      	add	r7, sp, #0
 8005164:	60f8      	str	r0, [r7, #12]
 8005166:	60b9      	str	r1, [r7, #8]
 8005168:	607a      	str	r2, [r7, #4]
 800516a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	689b      	ldr	r3, [r3, #8]
 8005170:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005172:	697b      	ldr	r3, [r7, #20]
 8005174:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005178:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	021a      	lsls	r2, r3, #8
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	431a      	orrs	r2, r3
 8005182:	68bb      	ldr	r3, [r7, #8]
 8005184:	4313      	orrs	r3, r2
 8005186:	697a      	ldr	r2, [r7, #20]
 8005188:	4313      	orrs	r3, r2
 800518a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	697a      	ldr	r2, [r7, #20]
 8005190:	609a      	str	r2, [r3, #8]
}
 8005192:	bf00      	nop
 8005194:	371c      	adds	r7, #28
 8005196:	46bd      	mov	sp, r7
 8005198:	bc80      	pop	{r7}
 800519a:	4770      	bx	lr

0800519c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800519c:	b480      	push	{r7}
 800519e:	b085      	sub	sp, #20
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
 80051a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051ac:	2b01      	cmp	r3, #1
 80051ae:	d101      	bne.n	80051b4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80051b0:	2302      	movs	r3, #2
 80051b2:	e046      	b.n	8005242 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2201      	movs	r2, #1
 80051b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2202      	movs	r2, #2
 80051c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	685b      	ldr	r3, [r3, #4]
 80051ca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	689b      	ldr	r3, [r3, #8]
 80051d2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051da:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	68fa      	ldr	r2, [r7, #12]
 80051e2:	4313      	orrs	r3, r2
 80051e4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	68fa      	ldr	r2, [r7, #12]
 80051ec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	4a16      	ldr	r2, [pc, #88]	; (800524c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80051f4:	4293      	cmp	r3, r2
 80051f6:	d00e      	beq.n	8005216 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005200:	d009      	beq.n	8005216 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	4a12      	ldr	r2, [pc, #72]	; (8005250 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005208:	4293      	cmp	r3, r2
 800520a:	d004      	beq.n	8005216 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	4a10      	ldr	r2, [pc, #64]	; (8005254 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005212:	4293      	cmp	r3, r2
 8005214:	d10c      	bne.n	8005230 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005216:	68bb      	ldr	r3, [r7, #8]
 8005218:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800521c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800521e:	683b      	ldr	r3, [r7, #0]
 8005220:	685b      	ldr	r3, [r3, #4]
 8005222:	68ba      	ldr	r2, [r7, #8]
 8005224:	4313      	orrs	r3, r2
 8005226:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	68ba      	ldr	r2, [r7, #8]
 800522e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2201      	movs	r2, #1
 8005234:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2200      	movs	r2, #0
 800523c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005240:	2300      	movs	r3, #0
}
 8005242:	4618      	mov	r0, r3
 8005244:	3714      	adds	r7, #20
 8005246:	46bd      	mov	sp, r7
 8005248:	bc80      	pop	{r7}
 800524a:	4770      	bx	lr
 800524c:	40012c00 	.word	0x40012c00
 8005250:	40000400 	.word	0x40000400
 8005254:	40000800 	.word	0x40000800

08005258 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005258:	b480      	push	{r7}
 800525a:	b083      	sub	sp, #12
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005260:	bf00      	nop
 8005262:	370c      	adds	r7, #12
 8005264:	46bd      	mov	sp, r7
 8005266:	bc80      	pop	{r7}
 8005268:	4770      	bx	lr

0800526a <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800526a:	b480      	push	{r7}
 800526c:	b083      	sub	sp, #12
 800526e:	af00      	add	r7, sp, #0
 8005270:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005272:	bf00      	nop
 8005274:	370c      	adds	r7, #12
 8005276:	46bd      	mov	sp, r7
 8005278:	bc80      	pop	{r7}
 800527a:	4770      	bx	lr

0800527c <__errno>:
 800527c:	4b01      	ldr	r3, [pc, #4]	; (8005284 <__errno+0x8>)
 800527e:	6818      	ldr	r0, [r3, #0]
 8005280:	4770      	bx	lr
 8005282:	bf00      	nop
 8005284:	20000090 	.word	0x20000090

08005288 <__libc_init_array>:
 8005288:	b570      	push	{r4, r5, r6, lr}
 800528a:	2600      	movs	r6, #0
 800528c:	4d0c      	ldr	r5, [pc, #48]	; (80052c0 <__libc_init_array+0x38>)
 800528e:	4c0d      	ldr	r4, [pc, #52]	; (80052c4 <__libc_init_array+0x3c>)
 8005290:	1b64      	subs	r4, r4, r5
 8005292:	10a4      	asrs	r4, r4, #2
 8005294:	42a6      	cmp	r6, r4
 8005296:	d109      	bne.n	80052ac <__libc_init_array+0x24>
 8005298:	f000 fc70 	bl	8005b7c <_init>
 800529c:	2600      	movs	r6, #0
 800529e:	4d0a      	ldr	r5, [pc, #40]	; (80052c8 <__libc_init_array+0x40>)
 80052a0:	4c0a      	ldr	r4, [pc, #40]	; (80052cc <__libc_init_array+0x44>)
 80052a2:	1b64      	subs	r4, r4, r5
 80052a4:	10a4      	asrs	r4, r4, #2
 80052a6:	42a6      	cmp	r6, r4
 80052a8:	d105      	bne.n	80052b6 <__libc_init_array+0x2e>
 80052aa:	bd70      	pop	{r4, r5, r6, pc}
 80052ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80052b0:	4798      	blx	r3
 80052b2:	3601      	adds	r6, #1
 80052b4:	e7ee      	b.n	8005294 <__libc_init_array+0xc>
 80052b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80052ba:	4798      	blx	r3
 80052bc:	3601      	adds	r6, #1
 80052be:	e7f2      	b.n	80052a6 <__libc_init_array+0x1e>
 80052c0:	08005c7c 	.word	0x08005c7c
 80052c4:	08005c7c 	.word	0x08005c7c
 80052c8:	08005c7c 	.word	0x08005c7c
 80052cc:	08005c80 	.word	0x08005c80

080052d0 <memset>:
 80052d0:	4603      	mov	r3, r0
 80052d2:	4402      	add	r2, r0
 80052d4:	4293      	cmp	r3, r2
 80052d6:	d100      	bne.n	80052da <memset+0xa>
 80052d8:	4770      	bx	lr
 80052da:	f803 1b01 	strb.w	r1, [r3], #1
 80052de:	e7f9      	b.n	80052d4 <memset+0x4>

080052e0 <sniprintf>:
 80052e0:	b40c      	push	{r2, r3}
 80052e2:	b530      	push	{r4, r5, lr}
 80052e4:	4b17      	ldr	r3, [pc, #92]	; (8005344 <sniprintf+0x64>)
 80052e6:	1e0c      	subs	r4, r1, #0
 80052e8:	681d      	ldr	r5, [r3, #0]
 80052ea:	b09d      	sub	sp, #116	; 0x74
 80052ec:	da08      	bge.n	8005300 <sniprintf+0x20>
 80052ee:	238b      	movs	r3, #139	; 0x8b
 80052f0:	f04f 30ff 	mov.w	r0, #4294967295
 80052f4:	602b      	str	r3, [r5, #0]
 80052f6:	b01d      	add	sp, #116	; 0x74
 80052f8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80052fc:	b002      	add	sp, #8
 80052fe:	4770      	bx	lr
 8005300:	f44f 7302 	mov.w	r3, #520	; 0x208
 8005304:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005308:	bf0c      	ite	eq
 800530a:	4623      	moveq	r3, r4
 800530c:	f104 33ff 	addne.w	r3, r4, #4294967295
 8005310:	9304      	str	r3, [sp, #16]
 8005312:	9307      	str	r3, [sp, #28]
 8005314:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005318:	9002      	str	r0, [sp, #8]
 800531a:	9006      	str	r0, [sp, #24]
 800531c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005320:	4628      	mov	r0, r5
 8005322:	ab21      	add	r3, sp, #132	; 0x84
 8005324:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005326:	a902      	add	r1, sp, #8
 8005328:	9301      	str	r3, [sp, #4]
 800532a:	f000 f869 	bl	8005400 <_svfiprintf_r>
 800532e:	1c43      	adds	r3, r0, #1
 8005330:	bfbc      	itt	lt
 8005332:	238b      	movlt	r3, #139	; 0x8b
 8005334:	602b      	strlt	r3, [r5, #0]
 8005336:	2c00      	cmp	r4, #0
 8005338:	d0dd      	beq.n	80052f6 <sniprintf+0x16>
 800533a:	2200      	movs	r2, #0
 800533c:	9b02      	ldr	r3, [sp, #8]
 800533e:	701a      	strb	r2, [r3, #0]
 8005340:	e7d9      	b.n	80052f6 <sniprintf+0x16>
 8005342:	bf00      	nop
 8005344:	20000090 	.word	0x20000090

08005348 <__ssputs_r>:
 8005348:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800534c:	688e      	ldr	r6, [r1, #8]
 800534e:	4682      	mov	sl, r0
 8005350:	429e      	cmp	r6, r3
 8005352:	460c      	mov	r4, r1
 8005354:	4690      	mov	r8, r2
 8005356:	461f      	mov	r7, r3
 8005358:	d838      	bhi.n	80053cc <__ssputs_r+0x84>
 800535a:	898a      	ldrh	r2, [r1, #12]
 800535c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005360:	d032      	beq.n	80053c8 <__ssputs_r+0x80>
 8005362:	6825      	ldr	r5, [r4, #0]
 8005364:	6909      	ldr	r1, [r1, #16]
 8005366:	3301      	adds	r3, #1
 8005368:	eba5 0901 	sub.w	r9, r5, r1
 800536c:	6965      	ldr	r5, [r4, #20]
 800536e:	444b      	add	r3, r9
 8005370:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005374:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005378:	106d      	asrs	r5, r5, #1
 800537a:	429d      	cmp	r5, r3
 800537c:	bf38      	it	cc
 800537e:	461d      	movcc	r5, r3
 8005380:	0553      	lsls	r3, r2, #21
 8005382:	d531      	bpl.n	80053e8 <__ssputs_r+0xa0>
 8005384:	4629      	mov	r1, r5
 8005386:	f000 fb53 	bl	8005a30 <_malloc_r>
 800538a:	4606      	mov	r6, r0
 800538c:	b950      	cbnz	r0, 80053a4 <__ssputs_r+0x5c>
 800538e:	230c      	movs	r3, #12
 8005390:	f04f 30ff 	mov.w	r0, #4294967295
 8005394:	f8ca 3000 	str.w	r3, [sl]
 8005398:	89a3      	ldrh	r3, [r4, #12]
 800539a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800539e:	81a3      	strh	r3, [r4, #12]
 80053a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80053a4:	464a      	mov	r2, r9
 80053a6:	6921      	ldr	r1, [r4, #16]
 80053a8:	f000 face 	bl	8005948 <memcpy>
 80053ac:	89a3      	ldrh	r3, [r4, #12]
 80053ae:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80053b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80053b6:	81a3      	strh	r3, [r4, #12]
 80053b8:	6126      	str	r6, [r4, #16]
 80053ba:	444e      	add	r6, r9
 80053bc:	6026      	str	r6, [r4, #0]
 80053be:	463e      	mov	r6, r7
 80053c0:	6165      	str	r5, [r4, #20]
 80053c2:	eba5 0509 	sub.w	r5, r5, r9
 80053c6:	60a5      	str	r5, [r4, #8]
 80053c8:	42be      	cmp	r6, r7
 80053ca:	d900      	bls.n	80053ce <__ssputs_r+0x86>
 80053cc:	463e      	mov	r6, r7
 80053ce:	4632      	mov	r2, r6
 80053d0:	4641      	mov	r1, r8
 80053d2:	6820      	ldr	r0, [r4, #0]
 80053d4:	f000 fac6 	bl	8005964 <memmove>
 80053d8:	68a3      	ldr	r3, [r4, #8]
 80053da:	6822      	ldr	r2, [r4, #0]
 80053dc:	1b9b      	subs	r3, r3, r6
 80053de:	4432      	add	r2, r6
 80053e0:	2000      	movs	r0, #0
 80053e2:	60a3      	str	r3, [r4, #8]
 80053e4:	6022      	str	r2, [r4, #0]
 80053e6:	e7db      	b.n	80053a0 <__ssputs_r+0x58>
 80053e8:	462a      	mov	r2, r5
 80053ea:	f000 fb7b 	bl	8005ae4 <_realloc_r>
 80053ee:	4606      	mov	r6, r0
 80053f0:	2800      	cmp	r0, #0
 80053f2:	d1e1      	bne.n	80053b8 <__ssputs_r+0x70>
 80053f4:	4650      	mov	r0, sl
 80053f6:	6921      	ldr	r1, [r4, #16]
 80053f8:	f000 face 	bl	8005998 <_free_r>
 80053fc:	e7c7      	b.n	800538e <__ssputs_r+0x46>
	...

08005400 <_svfiprintf_r>:
 8005400:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005404:	4698      	mov	r8, r3
 8005406:	898b      	ldrh	r3, [r1, #12]
 8005408:	4607      	mov	r7, r0
 800540a:	061b      	lsls	r3, r3, #24
 800540c:	460d      	mov	r5, r1
 800540e:	4614      	mov	r4, r2
 8005410:	b09d      	sub	sp, #116	; 0x74
 8005412:	d50e      	bpl.n	8005432 <_svfiprintf_r+0x32>
 8005414:	690b      	ldr	r3, [r1, #16]
 8005416:	b963      	cbnz	r3, 8005432 <_svfiprintf_r+0x32>
 8005418:	2140      	movs	r1, #64	; 0x40
 800541a:	f000 fb09 	bl	8005a30 <_malloc_r>
 800541e:	6028      	str	r0, [r5, #0]
 8005420:	6128      	str	r0, [r5, #16]
 8005422:	b920      	cbnz	r0, 800542e <_svfiprintf_r+0x2e>
 8005424:	230c      	movs	r3, #12
 8005426:	603b      	str	r3, [r7, #0]
 8005428:	f04f 30ff 	mov.w	r0, #4294967295
 800542c:	e0d1      	b.n	80055d2 <_svfiprintf_r+0x1d2>
 800542e:	2340      	movs	r3, #64	; 0x40
 8005430:	616b      	str	r3, [r5, #20]
 8005432:	2300      	movs	r3, #0
 8005434:	9309      	str	r3, [sp, #36]	; 0x24
 8005436:	2320      	movs	r3, #32
 8005438:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800543c:	2330      	movs	r3, #48	; 0x30
 800543e:	f04f 0901 	mov.w	r9, #1
 8005442:	f8cd 800c 	str.w	r8, [sp, #12]
 8005446:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80055ec <_svfiprintf_r+0x1ec>
 800544a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800544e:	4623      	mov	r3, r4
 8005450:	469a      	mov	sl, r3
 8005452:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005456:	b10a      	cbz	r2, 800545c <_svfiprintf_r+0x5c>
 8005458:	2a25      	cmp	r2, #37	; 0x25
 800545a:	d1f9      	bne.n	8005450 <_svfiprintf_r+0x50>
 800545c:	ebba 0b04 	subs.w	fp, sl, r4
 8005460:	d00b      	beq.n	800547a <_svfiprintf_r+0x7a>
 8005462:	465b      	mov	r3, fp
 8005464:	4622      	mov	r2, r4
 8005466:	4629      	mov	r1, r5
 8005468:	4638      	mov	r0, r7
 800546a:	f7ff ff6d 	bl	8005348 <__ssputs_r>
 800546e:	3001      	adds	r0, #1
 8005470:	f000 80aa 	beq.w	80055c8 <_svfiprintf_r+0x1c8>
 8005474:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005476:	445a      	add	r2, fp
 8005478:	9209      	str	r2, [sp, #36]	; 0x24
 800547a:	f89a 3000 	ldrb.w	r3, [sl]
 800547e:	2b00      	cmp	r3, #0
 8005480:	f000 80a2 	beq.w	80055c8 <_svfiprintf_r+0x1c8>
 8005484:	2300      	movs	r3, #0
 8005486:	f04f 32ff 	mov.w	r2, #4294967295
 800548a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800548e:	f10a 0a01 	add.w	sl, sl, #1
 8005492:	9304      	str	r3, [sp, #16]
 8005494:	9307      	str	r3, [sp, #28]
 8005496:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800549a:	931a      	str	r3, [sp, #104]	; 0x68
 800549c:	4654      	mov	r4, sl
 800549e:	2205      	movs	r2, #5
 80054a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80054a4:	4851      	ldr	r0, [pc, #324]	; (80055ec <_svfiprintf_r+0x1ec>)
 80054a6:	f000 fa41 	bl	800592c <memchr>
 80054aa:	9a04      	ldr	r2, [sp, #16]
 80054ac:	b9d8      	cbnz	r0, 80054e6 <_svfiprintf_r+0xe6>
 80054ae:	06d0      	lsls	r0, r2, #27
 80054b0:	bf44      	itt	mi
 80054b2:	2320      	movmi	r3, #32
 80054b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80054b8:	0711      	lsls	r1, r2, #28
 80054ba:	bf44      	itt	mi
 80054bc:	232b      	movmi	r3, #43	; 0x2b
 80054be:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80054c2:	f89a 3000 	ldrb.w	r3, [sl]
 80054c6:	2b2a      	cmp	r3, #42	; 0x2a
 80054c8:	d015      	beq.n	80054f6 <_svfiprintf_r+0xf6>
 80054ca:	4654      	mov	r4, sl
 80054cc:	2000      	movs	r0, #0
 80054ce:	f04f 0c0a 	mov.w	ip, #10
 80054d2:	9a07      	ldr	r2, [sp, #28]
 80054d4:	4621      	mov	r1, r4
 80054d6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80054da:	3b30      	subs	r3, #48	; 0x30
 80054dc:	2b09      	cmp	r3, #9
 80054de:	d94e      	bls.n	800557e <_svfiprintf_r+0x17e>
 80054e0:	b1b0      	cbz	r0, 8005510 <_svfiprintf_r+0x110>
 80054e2:	9207      	str	r2, [sp, #28]
 80054e4:	e014      	b.n	8005510 <_svfiprintf_r+0x110>
 80054e6:	eba0 0308 	sub.w	r3, r0, r8
 80054ea:	fa09 f303 	lsl.w	r3, r9, r3
 80054ee:	4313      	orrs	r3, r2
 80054f0:	46a2      	mov	sl, r4
 80054f2:	9304      	str	r3, [sp, #16]
 80054f4:	e7d2      	b.n	800549c <_svfiprintf_r+0x9c>
 80054f6:	9b03      	ldr	r3, [sp, #12]
 80054f8:	1d19      	adds	r1, r3, #4
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	9103      	str	r1, [sp, #12]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	bfbb      	ittet	lt
 8005502:	425b      	neglt	r3, r3
 8005504:	f042 0202 	orrlt.w	r2, r2, #2
 8005508:	9307      	strge	r3, [sp, #28]
 800550a:	9307      	strlt	r3, [sp, #28]
 800550c:	bfb8      	it	lt
 800550e:	9204      	strlt	r2, [sp, #16]
 8005510:	7823      	ldrb	r3, [r4, #0]
 8005512:	2b2e      	cmp	r3, #46	; 0x2e
 8005514:	d10c      	bne.n	8005530 <_svfiprintf_r+0x130>
 8005516:	7863      	ldrb	r3, [r4, #1]
 8005518:	2b2a      	cmp	r3, #42	; 0x2a
 800551a:	d135      	bne.n	8005588 <_svfiprintf_r+0x188>
 800551c:	9b03      	ldr	r3, [sp, #12]
 800551e:	3402      	adds	r4, #2
 8005520:	1d1a      	adds	r2, r3, #4
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	9203      	str	r2, [sp, #12]
 8005526:	2b00      	cmp	r3, #0
 8005528:	bfb8      	it	lt
 800552a:	f04f 33ff 	movlt.w	r3, #4294967295
 800552e:	9305      	str	r3, [sp, #20]
 8005530:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80055fc <_svfiprintf_r+0x1fc>
 8005534:	2203      	movs	r2, #3
 8005536:	4650      	mov	r0, sl
 8005538:	7821      	ldrb	r1, [r4, #0]
 800553a:	f000 f9f7 	bl	800592c <memchr>
 800553e:	b140      	cbz	r0, 8005552 <_svfiprintf_r+0x152>
 8005540:	2340      	movs	r3, #64	; 0x40
 8005542:	eba0 000a 	sub.w	r0, r0, sl
 8005546:	fa03 f000 	lsl.w	r0, r3, r0
 800554a:	9b04      	ldr	r3, [sp, #16]
 800554c:	3401      	adds	r4, #1
 800554e:	4303      	orrs	r3, r0
 8005550:	9304      	str	r3, [sp, #16]
 8005552:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005556:	2206      	movs	r2, #6
 8005558:	4825      	ldr	r0, [pc, #148]	; (80055f0 <_svfiprintf_r+0x1f0>)
 800555a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800555e:	f000 f9e5 	bl	800592c <memchr>
 8005562:	2800      	cmp	r0, #0
 8005564:	d038      	beq.n	80055d8 <_svfiprintf_r+0x1d8>
 8005566:	4b23      	ldr	r3, [pc, #140]	; (80055f4 <_svfiprintf_r+0x1f4>)
 8005568:	bb1b      	cbnz	r3, 80055b2 <_svfiprintf_r+0x1b2>
 800556a:	9b03      	ldr	r3, [sp, #12]
 800556c:	3307      	adds	r3, #7
 800556e:	f023 0307 	bic.w	r3, r3, #7
 8005572:	3308      	adds	r3, #8
 8005574:	9303      	str	r3, [sp, #12]
 8005576:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005578:	4433      	add	r3, r6
 800557a:	9309      	str	r3, [sp, #36]	; 0x24
 800557c:	e767      	b.n	800544e <_svfiprintf_r+0x4e>
 800557e:	460c      	mov	r4, r1
 8005580:	2001      	movs	r0, #1
 8005582:	fb0c 3202 	mla	r2, ip, r2, r3
 8005586:	e7a5      	b.n	80054d4 <_svfiprintf_r+0xd4>
 8005588:	2300      	movs	r3, #0
 800558a:	f04f 0c0a 	mov.w	ip, #10
 800558e:	4619      	mov	r1, r3
 8005590:	3401      	adds	r4, #1
 8005592:	9305      	str	r3, [sp, #20]
 8005594:	4620      	mov	r0, r4
 8005596:	f810 2b01 	ldrb.w	r2, [r0], #1
 800559a:	3a30      	subs	r2, #48	; 0x30
 800559c:	2a09      	cmp	r2, #9
 800559e:	d903      	bls.n	80055a8 <_svfiprintf_r+0x1a8>
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d0c5      	beq.n	8005530 <_svfiprintf_r+0x130>
 80055a4:	9105      	str	r1, [sp, #20]
 80055a6:	e7c3      	b.n	8005530 <_svfiprintf_r+0x130>
 80055a8:	4604      	mov	r4, r0
 80055aa:	2301      	movs	r3, #1
 80055ac:	fb0c 2101 	mla	r1, ip, r1, r2
 80055b0:	e7f0      	b.n	8005594 <_svfiprintf_r+0x194>
 80055b2:	ab03      	add	r3, sp, #12
 80055b4:	9300      	str	r3, [sp, #0]
 80055b6:	462a      	mov	r2, r5
 80055b8:	4638      	mov	r0, r7
 80055ba:	4b0f      	ldr	r3, [pc, #60]	; (80055f8 <_svfiprintf_r+0x1f8>)
 80055bc:	a904      	add	r1, sp, #16
 80055be:	f3af 8000 	nop.w
 80055c2:	1c42      	adds	r2, r0, #1
 80055c4:	4606      	mov	r6, r0
 80055c6:	d1d6      	bne.n	8005576 <_svfiprintf_r+0x176>
 80055c8:	89ab      	ldrh	r3, [r5, #12]
 80055ca:	065b      	lsls	r3, r3, #25
 80055cc:	f53f af2c 	bmi.w	8005428 <_svfiprintf_r+0x28>
 80055d0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80055d2:	b01d      	add	sp, #116	; 0x74
 80055d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80055d8:	ab03      	add	r3, sp, #12
 80055da:	9300      	str	r3, [sp, #0]
 80055dc:	462a      	mov	r2, r5
 80055de:	4638      	mov	r0, r7
 80055e0:	4b05      	ldr	r3, [pc, #20]	; (80055f8 <_svfiprintf_r+0x1f8>)
 80055e2:	a904      	add	r1, sp, #16
 80055e4:	f000 f87c 	bl	80056e0 <_printf_i>
 80055e8:	e7eb      	b.n	80055c2 <_svfiprintf_r+0x1c2>
 80055ea:	bf00      	nop
 80055ec:	08005c46 	.word	0x08005c46
 80055f0:	08005c50 	.word	0x08005c50
 80055f4:	00000000 	.word	0x00000000
 80055f8:	08005349 	.word	0x08005349
 80055fc:	08005c4c 	.word	0x08005c4c

08005600 <_printf_common>:
 8005600:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005604:	4616      	mov	r6, r2
 8005606:	4699      	mov	r9, r3
 8005608:	688a      	ldr	r2, [r1, #8]
 800560a:	690b      	ldr	r3, [r1, #16]
 800560c:	4607      	mov	r7, r0
 800560e:	4293      	cmp	r3, r2
 8005610:	bfb8      	it	lt
 8005612:	4613      	movlt	r3, r2
 8005614:	6033      	str	r3, [r6, #0]
 8005616:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800561a:	460c      	mov	r4, r1
 800561c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005620:	b10a      	cbz	r2, 8005626 <_printf_common+0x26>
 8005622:	3301      	adds	r3, #1
 8005624:	6033      	str	r3, [r6, #0]
 8005626:	6823      	ldr	r3, [r4, #0]
 8005628:	0699      	lsls	r1, r3, #26
 800562a:	bf42      	ittt	mi
 800562c:	6833      	ldrmi	r3, [r6, #0]
 800562e:	3302      	addmi	r3, #2
 8005630:	6033      	strmi	r3, [r6, #0]
 8005632:	6825      	ldr	r5, [r4, #0]
 8005634:	f015 0506 	ands.w	r5, r5, #6
 8005638:	d106      	bne.n	8005648 <_printf_common+0x48>
 800563a:	f104 0a19 	add.w	sl, r4, #25
 800563e:	68e3      	ldr	r3, [r4, #12]
 8005640:	6832      	ldr	r2, [r6, #0]
 8005642:	1a9b      	subs	r3, r3, r2
 8005644:	42ab      	cmp	r3, r5
 8005646:	dc28      	bgt.n	800569a <_printf_common+0x9a>
 8005648:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800564c:	1e13      	subs	r3, r2, #0
 800564e:	6822      	ldr	r2, [r4, #0]
 8005650:	bf18      	it	ne
 8005652:	2301      	movne	r3, #1
 8005654:	0692      	lsls	r2, r2, #26
 8005656:	d42d      	bmi.n	80056b4 <_printf_common+0xb4>
 8005658:	4649      	mov	r1, r9
 800565a:	4638      	mov	r0, r7
 800565c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005660:	47c0      	blx	r8
 8005662:	3001      	adds	r0, #1
 8005664:	d020      	beq.n	80056a8 <_printf_common+0xa8>
 8005666:	6823      	ldr	r3, [r4, #0]
 8005668:	68e5      	ldr	r5, [r4, #12]
 800566a:	f003 0306 	and.w	r3, r3, #6
 800566e:	2b04      	cmp	r3, #4
 8005670:	bf18      	it	ne
 8005672:	2500      	movne	r5, #0
 8005674:	6832      	ldr	r2, [r6, #0]
 8005676:	f04f 0600 	mov.w	r6, #0
 800567a:	68a3      	ldr	r3, [r4, #8]
 800567c:	bf08      	it	eq
 800567e:	1aad      	subeq	r5, r5, r2
 8005680:	6922      	ldr	r2, [r4, #16]
 8005682:	bf08      	it	eq
 8005684:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005688:	4293      	cmp	r3, r2
 800568a:	bfc4      	itt	gt
 800568c:	1a9b      	subgt	r3, r3, r2
 800568e:	18ed      	addgt	r5, r5, r3
 8005690:	341a      	adds	r4, #26
 8005692:	42b5      	cmp	r5, r6
 8005694:	d11a      	bne.n	80056cc <_printf_common+0xcc>
 8005696:	2000      	movs	r0, #0
 8005698:	e008      	b.n	80056ac <_printf_common+0xac>
 800569a:	2301      	movs	r3, #1
 800569c:	4652      	mov	r2, sl
 800569e:	4649      	mov	r1, r9
 80056a0:	4638      	mov	r0, r7
 80056a2:	47c0      	blx	r8
 80056a4:	3001      	adds	r0, #1
 80056a6:	d103      	bne.n	80056b0 <_printf_common+0xb0>
 80056a8:	f04f 30ff 	mov.w	r0, #4294967295
 80056ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80056b0:	3501      	adds	r5, #1
 80056b2:	e7c4      	b.n	800563e <_printf_common+0x3e>
 80056b4:	2030      	movs	r0, #48	; 0x30
 80056b6:	18e1      	adds	r1, r4, r3
 80056b8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80056bc:	1c5a      	adds	r2, r3, #1
 80056be:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80056c2:	4422      	add	r2, r4
 80056c4:	3302      	adds	r3, #2
 80056c6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80056ca:	e7c5      	b.n	8005658 <_printf_common+0x58>
 80056cc:	2301      	movs	r3, #1
 80056ce:	4622      	mov	r2, r4
 80056d0:	4649      	mov	r1, r9
 80056d2:	4638      	mov	r0, r7
 80056d4:	47c0      	blx	r8
 80056d6:	3001      	adds	r0, #1
 80056d8:	d0e6      	beq.n	80056a8 <_printf_common+0xa8>
 80056da:	3601      	adds	r6, #1
 80056dc:	e7d9      	b.n	8005692 <_printf_common+0x92>
	...

080056e0 <_printf_i>:
 80056e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80056e4:	460c      	mov	r4, r1
 80056e6:	7e27      	ldrb	r7, [r4, #24]
 80056e8:	4691      	mov	r9, r2
 80056ea:	2f78      	cmp	r7, #120	; 0x78
 80056ec:	4680      	mov	r8, r0
 80056ee:	469a      	mov	sl, r3
 80056f0:	990c      	ldr	r1, [sp, #48]	; 0x30
 80056f2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80056f6:	d807      	bhi.n	8005708 <_printf_i+0x28>
 80056f8:	2f62      	cmp	r7, #98	; 0x62
 80056fa:	d80a      	bhi.n	8005712 <_printf_i+0x32>
 80056fc:	2f00      	cmp	r7, #0
 80056fe:	f000 80d9 	beq.w	80058b4 <_printf_i+0x1d4>
 8005702:	2f58      	cmp	r7, #88	; 0x58
 8005704:	f000 80a4 	beq.w	8005850 <_printf_i+0x170>
 8005708:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800570c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005710:	e03a      	b.n	8005788 <_printf_i+0xa8>
 8005712:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005716:	2b15      	cmp	r3, #21
 8005718:	d8f6      	bhi.n	8005708 <_printf_i+0x28>
 800571a:	a001      	add	r0, pc, #4	; (adr r0, 8005720 <_printf_i+0x40>)
 800571c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005720:	08005779 	.word	0x08005779
 8005724:	0800578d 	.word	0x0800578d
 8005728:	08005709 	.word	0x08005709
 800572c:	08005709 	.word	0x08005709
 8005730:	08005709 	.word	0x08005709
 8005734:	08005709 	.word	0x08005709
 8005738:	0800578d 	.word	0x0800578d
 800573c:	08005709 	.word	0x08005709
 8005740:	08005709 	.word	0x08005709
 8005744:	08005709 	.word	0x08005709
 8005748:	08005709 	.word	0x08005709
 800574c:	0800589b 	.word	0x0800589b
 8005750:	080057bd 	.word	0x080057bd
 8005754:	0800587d 	.word	0x0800587d
 8005758:	08005709 	.word	0x08005709
 800575c:	08005709 	.word	0x08005709
 8005760:	080058bd 	.word	0x080058bd
 8005764:	08005709 	.word	0x08005709
 8005768:	080057bd 	.word	0x080057bd
 800576c:	08005709 	.word	0x08005709
 8005770:	08005709 	.word	0x08005709
 8005774:	08005885 	.word	0x08005885
 8005778:	680b      	ldr	r3, [r1, #0]
 800577a:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800577e:	1d1a      	adds	r2, r3, #4
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	600a      	str	r2, [r1, #0]
 8005784:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005788:	2301      	movs	r3, #1
 800578a:	e0a4      	b.n	80058d6 <_printf_i+0x1f6>
 800578c:	6825      	ldr	r5, [r4, #0]
 800578e:	6808      	ldr	r0, [r1, #0]
 8005790:	062e      	lsls	r6, r5, #24
 8005792:	f100 0304 	add.w	r3, r0, #4
 8005796:	d50a      	bpl.n	80057ae <_printf_i+0xce>
 8005798:	6805      	ldr	r5, [r0, #0]
 800579a:	600b      	str	r3, [r1, #0]
 800579c:	2d00      	cmp	r5, #0
 800579e:	da03      	bge.n	80057a8 <_printf_i+0xc8>
 80057a0:	232d      	movs	r3, #45	; 0x2d
 80057a2:	426d      	negs	r5, r5
 80057a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80057a8:	230a      	movs	r3, #10
 80057aa:	485e      	ldr	r0, [pc, #376]	; (8005924 <_printf_i+0x244>)
 80057ac:	e019      	b.n	80057e2 <_printf_i+0x102>
 80057ae:	f015 0f40 	tst.w	r5, #64	; 0x40
 80057b2:	6805      	ldr	r5, [r0, #0]
 80057b4:	600b      	str	r3, [r1, #0]
 80057b6:	bf18      	it	ne
 80057b8:	b22d      	sxthne	r5, r5
 80057ba:	e7ef      	b.n	800579c <_printf_i+0xbc>
 80057bc:	680b      	ldr	r3, [r1, #0]
 80057be:	6825      	ldr	r5, [r4, #0]
 80057c0:	1d18      	adds	r0, r3, #4
 80057c2:	6008      	str	r0, [r1, #0]
 80057c4:	0628      	lsls	r0, r5, #24
 80057c6:	d501      	bpl.n	80057cc <_printf_i+0xec>
 80057c8:	681d      	ldr	r5, [r3, #0]
 80057ca:	e002      	b.n	80057d2 <_printf_i+0xf2>
 80057cc:	0669      	lsls	r1, r5, #25
 80057ce:	d5fb      	bpl.n	80057c8 <_printf_i+0xe8>
 80057d0:	881d      	ldrh	r5, [r3, #0]
 80057d2:	2f6f      	cmp	r7, #111	; 0x6f
 80057d4:	bf0c      	ite	eq
 80057d6:	2308      	moveq	r3, #8
 80057d8:	230a      	movne	r3, #10
 80057da:	4852      	ldr	r0, [pc, #328]	; (8005924 <_printf_i+0x244>)
 80057dc:	2100      	movs	r1, #0
 80057de:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80057e2:	6866      	ldr	r6, [r4, #4]
 80057e4:	2e00      	cmp	r6, #0
 80057e6:	bfa8      	it	ge
 80057e8:	6821      	ldrge	r1, [r4, #0]
 80057ea:	60a6      	str	r6, [r4, #8]
 80057ec:	bfa4      	itt	ge
 80057ee:	f021 0104 	bicge.w	r1, r1, #4
 80057f2:	6021      	strge	r1, [r4, #0]
 80057f4:	b90d      	cbnz	r5, 80057fa <_printf_i+0x11a>
 80057f6:	2e00      	cmp	r6, #0
 80057f8:	d04d      	beq.n	8005896 <_printf_i+0x1b6>
 80057fa:	4616      	mov	r6, r2
 80057fc:	fbb5 f1f3 	udiv	r1, r5, r3
 8005800:	fb03 5711 	mls	r7, r3, r1, r5
 8005804:	5dc7      	ldrb	r7, [r0, r7]
 8005806:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800580a:	462f      	mov	r7, r5
 800580c:	42bb      	cmp	r3, r7
 800580e:	460d      	mov	r5, r1
 8005810:	d9f4      	bls.n	80057fc <_printf_i+0x11c>
 8005812:	2b08      	cmp	r3, #8
 8005814:	d10b      	bne.n	800582e <_printf_i+0x14e>
 8005816:	6823      	ldr	r3, [r4, #0]
 8005818:	07df      	lsls	r7, r3, #31
 800581a:	d508      	bpl.n	800582e <_printf_i+0x14e>
 800581c:	6923      	ldr	r3, [r4, #16]
 800581e:	6861      	ldr	r1, [r4, #4]
 8005820:	4299      	cmp	r1, r3
 8005822:	bfde      	ittt	le
 8005824:	2330      	movle	r3, #48	; 0x30
 8005826:	f806 3c01 	strble.w	r3, [r6, #-1]
 800582a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800582e:	1b92      	subs	r2, r2, r6
 8005830:	6122      	str	r2, [r4, #16]
 8005832:	464b      	mov	r3, r9
 8005834:	4621      	mov	r1, r4
 8005836:	4640      	mov	r0, r8
 8005838:	f8cd a000 	str.w	sl, [sp]
 800583c:	aa03      	add	r2, sp, #12
 800583e:	f7ff fedf 	bl	8005600 <_printf_common>
 8005842:	3001      	adds	r0, #1
 8005844:	d14c      	bne.n	80058e0 <_printf_i+0x200>
 8005846:	f04f 30ff 	mov.w	r0, #4294967295
 800584a:	b004      	add	sp, #16
 800584c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005850:	4834      	ldr	r0, [pc, #208]	; (8005924 <_printf_i+0x244>)
 8005852:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005856:	680e      	ldr	r6, [r1, #0]
 8005858:	6823      	ldr	r3, [r4, #0]
 800585a:	f856 5b04 	ldr.w	r5, [r6], #4
 800585e:	061f      	lsls	r7, r3, #24
 8005860:	600e      	str	r6, [r1, #0]
 8005862:	d514      	bpl.n	800588e <_printf_i+0x1ae>
 8005864:	07d9      	lsls	r1, r3, #31
 8005866:	bf44      	itt	mi
 8005868:	f043 0320 	orrmi.w	r3, r3, #32
 800586c:	6023      	strmi	r3, [r4, #0]
 800586e:	b91d      	cbnz	r5, 8005878 <_printf_i+0x198>
 8005870:	6823      	ldr	r3, [r4, #0]
 8005872:	f023 0320 	bic.w	r3, r3, #32
 8005876:	6023      	str	r3, [r4, #0]
 8005878:	2310      	movs	r3, #16
 800587a:	e7af      	b.n	80057dc <_printf_i+0xfc>
 800587c:	6823      	ldr	r3, [r4, #0]
 800587e:	f043 0320 	orr.w	r3, r3, #32
 8005882:	6023      	str	r3, [r4, #0]
 8005884:	2378      	movs	r3, #120	; 0x78
 8005886:	4828      	ldr	r0, [pc, #160]	; (8005928 <_printf_i+0x248>)
 8005888:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800588c:	e7e3      	b.n	8005856 <_printf_i+0x176>
 800588e:	065e      	lsls	r6, r3, #25
 8005890:	bf48      	it	mi
 8005892:	b2ad      	uxthmi	r5, r5
 8005894:	e7e6      	b.n	8005864 <_printf_i+0x184>
 8005896:	4616      	mov	r6, r2
 8005898:	e7bb      	b.n	8005812 <_printf_i+0x132>
 800589a:	680b      	ldr	r3, [r1, #0]
 800589c:	6826      	ldr	r6, [r4, #0]
 800589e:	1d1d      	adds	r5, r3, #4
 80058a0:	6960      	ldr	r0, [r4, #20]
 80058a2:	600d      	str	r5, [r1, #0]
 80058a4:	0635      	lsls	r5, r6, #24
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	d501      	bpl.n	80058ae <_printf_i+0x1ce>
 80058aa:	6018      	str	r0, [r3, #0]
 80058ac:	e002      	b.n	80058b4 <_printf_i+0x1d4>
 80058ae:	0671      	lsls	r1, r6, #25
 80058b0:	d5fb      	bpl.n	80058aa <_printf_i+0x1ca>
 80058b2:	8018      	strh	r0, [r3, #0]
 80058b4:	2300      	movs	r3, #0
 80058b6:	4616      	mov	r6, r2
 80058b8:	6123      	str	r3, [r4, #16]
 80058ba:	e7ba      	b.n	8005832 <_printf_i+0x152>
 80058bc:	680b      	ldr	r3, [r1, #0]
 80058be:	1d1a      	adds	r2, r3, #4
 80058c0:	600a      	str	r2, [r1, #0]
 80058c2:	681e      	ldr	r6, [r3, #0]
 80058c4:	2100      	movs	r1, #0
 80058c6:	4630      	mov	r0, r6
 80058c8:	6862      	ldr	r2, [r4, #4]
 80058ca:	f000 f82f 	bl	800592c <memchr>
 80058ce:	b108      	cbz	r0, 80058d4 <_printf_i+0x1f4>
 80058d0:	1b80      	subs	r0, r0, r6
 80058d2:	6060      	str	r0, [r4, #4]
 80058d4:	6863      	ldr	r3, [r4, #4]
 80058d6:	6123      	str	r3, [r4, #16]
 80058d8:	2300      	movs	r3, #0
 80058da:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80058de:	e7a8      	b.n	8005832 <_printf_i+0x152>
 80058e0:	4632      	mov	r2, r6
 80058e2:	4649      	mov	r1, r9
 80058e4:	4640      	mov	r0, r8
 80058e6:	6923      	ldr	r3, [r4, #16]
 80058e8:	47d0      	blx	sl
 80058ea:	3001      	adds	r0, #1
 80058ec:	d0ab      	beq.n	8005846 <_printf_i+0x166>
 80058ee:	6823      	ldr	r3, [r4, #0]
 80058f0:	079b      	lsls	r3, r3, #30
 80058f2:	d413      	bmi.n	800591c <_printf_i+0x23c>
 80058f4:	68e0      	ldr	r0, [r4, #12]
 80058f6:	9b03      	ldr	r3, [sp, #12]
 80058f8:	4298      	cmp	r0, r3
 80058fa:	bfb8      	it	lt
 80058fc:	4618      	movlt	r0, r3
 80058fe:	e7a4      	b.n	800584a <_printf_i+0x16a>
 8005900:	2301      	movs	r3, #1
 8005902:	4632      	mov	r2, r6
 8005904:	4649      	mov	r1, r9
 8005906:	4640      	mov	r0, r8
 8005908:	47d0      	blx	sl
 800590a:	3001      	adds	r0, #1
 800590c:	d09b      	beq.n	8005846 <_printf_i+0x166>
 800590e:	3501      	adds	r5, #1
 8005910:	68e3      	ldr	r3, [r4, #12]
 8005912:	9903      	ldr	r1, [sp, #12]
 8005914:	1a5b      	subs	r3, r3, r1
 8005916:	42ab      	cmp	r3, r5
 8005918:	dcf2      	bgt.n	8005900 <_printf_i+0x220>
 800591a:	e7eb      	b.n	80058f4 <_printf_i+0x214>
 800591c:	2500      	movs	r5, #0
 800591e:	f104 0619 	add.w	r6, r4, #25
 8005922:	e7f5      	b.n	8005910 <_printf_i+0x230>
 8005924:	08005c57 	.word	0x08005c57
 8005928:	08005c68 	.word	0x08005c68

0800592c <memchr>:
 800592c:	4603      	mov	r3, r0
 800592e:	b510      	push	{r4, lr}
 8005930:	b2c9      	uxtb	r1, r1
 8005932:	4402      	add	r2, r0
 8005934:	4293      	cmp	r3, r2
 8005936:	4618      	mov	r0, r3
 8005938:	d101      	bne.n	800593e <memchr+0x12>
 800593a:	2000      	movs	r0, #0
 800593c:	e003      	b.n	8005946 <memchr+0x1a>
 800593e:	7804      	ldrb	r4, [r0, #0]
 8005940:	3301      	adds	r3, #1
 8005942:	428c      	cmp	r4, r1
 8005944:	d1f6      	bne.n	8005934 <memchr+0x8>
 8005946:	bd10      	pop	{r4, pc}

08005948 <memcpy>:
 8005948:	440a      	add	r2, r1
 800594a:	4291      	cmp	r1, r2
 800594c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005950:	d100      	bne.n	8005954 <memcpy+0xc>
 8005952:	4770      	bx	lr
 8005954:	b510      	push	{r4, lr}
 8005956:	f811 4b01 	ldrb.w	r4, [r1], #1
 800595a:	4291      	cmp	r1, r2
 800595c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005960:	d1f9      	bne.n	8005956 <memcpy+0xe>
 8005962:	bd10      	pop	{r4, pc}

08005964 <memmove>:
 8005964:	4288      	cmp	r0, r1
 8005966:	b510      	push	{r4, lr}
 8005968:	eb01 0402 	add.w	r4, r1, r2
 800596c:	d902      	bls.n	8005974 <memmove+0x10>
 800596e:	4284      	cmp	r4, r0
 8005970:	4623      	mov	r3, r4
 8005972:	d807      	bhi.n	8005984 <memmove+0x20>
 8005974:	1e43      	subs	r3, r0, #1
 8005976:	42a1      	cmp	r1, r4
 8005978:	d008      	beq.n	800598c <memmove+0x28>
 800597a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800597e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005982:	e7f8      	b.n	8005976 <memmove+0x12>
 8005984:	4601      	mov	r1, r0
 8005986:	4402      	add	r2, r0
 8005988:	428a      	cmp	r2, r1
 800598a:	d100      	bne.n	800598e <memmove+0x2a>
 800598c:	bd10      	pop	{r4, pc}
 800598e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005992:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005996:	e7f7      	b.n	8005988 <memmove+0x24>

08005998 <_free_r>:
 8005998:	b538      	push	{r3, r4, r5, lr}
 800599a:	4605      	mov	r5, r0
 800599c:	2900      	cmp	r1, #0
 800599e:	d043      	beq.n	8005a28 <_free_r+0x90>
 80059a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80059a4:	1f0c      	subs	r4, r1, #4
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	bfb8      	it	lt
 80059aa:	18e4      	addlt	r4, r4, r3
 80059ac:	f000 f8d0 	bl	8005b50 <__malloc_lock>
 80059b0:	4a1e      	ldr	r2, [pc, #120]	; (8005a2c <_free_r+0x94>)
 80059b2:	6813      	ldr	r3, [r2, #0]
 80059b4:	4610      	mov	r0, r2
 80059b6:	b933      	cbnz	r3, 80059c6 <_free_r+0x2e>
 80059b8:	6063      	str	r3, [r4, #4]
 80059ba:	6014      	str	r4, [r2, #0]
 80059bc:	4628      	mov	r0, r5
 80059be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80059c2:	f000 b8cb 	b.w	8005b5c <__malloc_unlock>
 80059c6:	42a3      	cmp	r3, r4
 80059c8:	d90a      	bls.n	80059e0 <_free_r+0x48>
 80059ca:	6821      	ldr	r1, [r4, #0]
 80059cc:	1862      	adds	r2, r4, r1
 80059ce:	4293      	cmp	r3, r2
 80059d0:	bf01      	itttt	eq
 80059d2:	681a      	ldreq	r2, [r3, #0]
 80059d4:	685b      	ldreq	r3, [r3, #4]
 80059d6:	1852      	addeq	r2, r2, r1
 80059d8:	6022      	streq	r2, [r4, #0]
 80059da:	6063      	str	r3, [r4, #4]
 80059dc:	6004      	str	r4, [r0, #0]
 80059de:	e7ed      	b.n	80059bc <_free_r+0x24>
 80059e0:	461a      	mov	r2, r3
 80059e2:	685b      	ldr	r3, [r3, #4]
 80059e4:	b10b      	cbz	r3, 80059ea <_free_r+0x52>
 80059e6:	42a3      	cmp	r3, r4
 80059e8:	d9fa      	bls.n	80059e0 <_free_r+0x48>
 80059ea:	6811      	ldr	r1, [r2, #0]
 80059ec:	1850      	adds	r0, r2, r1
 80059ee:	42a0      	cmp	r0, r4
 80059f0:	d10b      	bne.n	8005a0a <_free_r+0x72>
 80059f2:	6820      	ldr	r0, [r4, #0]
 80059f4:	4401      	add	r1, r0
 80059f6:	1850      	adds	r0, r2, r1
 80059f8:	4283      	cmp	r3, r0
 80059fa:	6011      	str	r1, [r2, #0]
 80059fc:	d1de      	bne.n	80059bc <_free_r+0x24>
 80059fe:	6818      	ldr	r0, [r3, #0]
 8005a00:	685b      	ldr	r3, [r3, #4]
 8005a02:	4401      	add	r1, r0
 8005a04:	6011      	str	r1, [r2, #0]
 8005a06:	6053      	str	r3, [r2, #4]
 8005a08:	e7d8      	b.n	80059bc <_free_r+0x24>
 8005a0a:	d902      	bls.n	8005a12 <_free_r+0x7a>
 8005a0c:	230c      	movs	r3, #12
 8005a0e:	602b      	str	r3, [r5, #0]
 8005a10:	e7d4      	b.n	80059bc <_free_r+0x24>
 8005a12:	6820      	ldr	r0, [r4, #0]
 8005a14:	1821      	adds	r1, r4, r0
 8005a16:	428b      	cmp	r3, r1
 8005a18:	bf01      	itttt	eq
 8005a1a:	6819      	ldreq	r1, [r3, #0]
 8005a1c:	685b      	ldreq	r3, [r3, #4]
 8005a1e:	1809      	addeq	r1, r1, r0
 8005a20:	6021      	streq	r1, [r4, #0]
 8005a22:	6063      	str	r3, [r4, #4]
 8005a24:	6054      	str	r4, [r2, #4]
 8005a26:	e7c9      	b.n	80059bc <_free_r+0x24>
 8005a28:	bd38      	pop	{r3, r4, r5, pc}
 8005a2a:	bf00      	nop
 8005a2c:	20000138 	.word	0x20000138

08005a30 <_malloc_r>:
 8005a30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a32:	1ccd      	adds	r5, r1, #3
 8005a34:	f025 0503 	bic.w	r5, r5, #3
 8005a38:	3508      	adds	r5, #8
 8005a3a:	2d0c      	cmp	r5, #12
 8005a3c:	bf38      	it	cc
 8005a3e:	250c      	movcc	r5, #12
 8005a40:	2d00      	cmp	r5, #0
 8005a42:	4606      	mov	r6, r0
 8005a44:	db01      	blt.n	8005a4a <_malloc_r+0x1a>
 8005a46:	42a9      	cmp	r1, r5
 8005a48:	d903      	bls.n	8005a52 <_malloc_r+0x22>
 8005a4a:	230c      	movs	r3, #12
 8005a4c:	6033      	str	r3, [r6, #0]
 8005a4e:	2000      	movs	r0, #0
 8005a50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005a52:	f000 f87d 	bl	8005b50 <__malloc_lock>
 8005a56:	4921      	ldr	r1, [pc, #132]	; (8005adc <_malloc_r+0xac>)
 8005a58:	680a      	ldr	r2, [r1, #0]
 8005a5a:	4614      	mov	r4, r2
 8005a5c:	b99c      	cbnz	r4, 8005a86 <_malloc_r+0x56>
 8005a5e:	4f20      	ldr	r7, [pc, #128]	; (8005ae0 <_malloc_r+0xb0>)
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	b923      	cbnz	r3, 8005a6e <_malloc_r+0x3e>
 8005a64:	4621      	mov	r1, r4
 8005a66:	4630      	mov	r0, r6
 8005a68:	f000 f862 	bl	8005b30 <_sbrk_r>
 8005a6c:	6038      	str	r0, [r7, #0]
 8005a6e:	4629      	mov	r1, r5
 8005a70:	4630      	mov	r0, r6
 8005a72:	f000 f85d 	bl	8005b30 <_sbrk_r>
 8005a76:	1c43      	adds	r3, r0, #1
 8005a78:	d123      	bne.n	8005ac2 <_malloc_r+0x92>
 8005a7a:	230c      	movs	r3, #12
 8005a7c:	4630      	mov	r0, r6
 8005a7e:	6033      	str	r3, [r6, #0]
 8005a80:	f000 f86c 	bl	8005b5c <__malloc_unlock>
 8005a84:	e7e3      	b.n	8005a4e <_malloc_r+0x1e>
 8005a86:	6823      	ldr	r3, [r4, #0]
 8005a88:	1b5b      	subs	r3, r3, r5
 8005a8a:	d417      	bmi.n	8005abc <_malloc_r+0x8c>
 8005a8c:	2b0b      	cmp	r3, #11
 8005a8e:	d903      	bls.n	8005a98 <_malloc_r+0x68>
 8005a90:	6023      	str	r3, [r4, #0]
 8005a92:	441c      	add	r4, r3
 8005a94:	6025      	str	r5, [r4, #0]
 8005a96:	e004      	b.n	8005aa2 <_malloc_r+0x72>
 8005a98:	6863      	ldr	r3, [r4, #4]
 8005a9a:	42a2      	cmp	r2, r4
 8005a9c:	bf0c      	ite	eq
 8005a9e:	600b      	streq	r3, [r1, #0]
 8005aa0:	6053      	strne	r3, [r2, #4]
 8005aa2:	4630      	mov	r0, r6
 8005aa4:	f000 f85a 	bl	8005b5c <__malloc_unlock>
 8005aa8:	f104 000b 	add.w	r0, r4, #11
 8005aac:	1d23      	adds	r3, r4, #4
 8005aae:	f020 0007 	bic.w	r0, r0, #7
 8005ab2:	1ac2      	subs	r2, r0, r3
 8005ab4:	d0cc      	beq.n	8005a50 <_malloc_r+0x20>
 8005ab6:	1a1b      	subs	r3, r3, r0
 8005ab8:	50a3      	str	r3, [r4, r2]
 8005aba:	e7c9      	b.n	8005a50 <_malloc_r+0x20>
 8005abc:	4622      	mov	r2, r4
 8005abe:	6864      	ldr	r4, [r4, #4]
 8005ac0:	e7cc      	b.n	8005a5c <_malloc_r+0x2c>
 8005ac2:	1cc4      	adds	r4, r0, #3
 8005ac4:	f024 0403 	bic.w	r4, r4, #3
 8005ac8:	42a0      	cmp	r0, r4
 8005aca:	d0e3      	beq.n	8005a94 <_malloc_r+0x64>
 8005acc:	1a21      	subs	r1, r4, r0
 8005ace:	4630      	mov	r0, r6
 8005ad0:	f000 f82e 	bl	8005b30 <_sbrk_r>
 8005ad4:	3001      	adds	r0, #1
 8005ad6:	d1dd      	bne.n	8005a94 <_malloc_r+0x64>
 8005ad8:	e7cf      	b.n	8005a7a <_malloc_r+0x4a>
 8005ada:	bf00      	nop
 8005adc:	20000138 	.word	0x20000138
 8005ae0:	2000013c 	.word	0x2000013c

08005ae4 <_realloc_r>:
 8005ae4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ae6:	4607      	mov	r7, r0
 8005ae8:	4614      	mov	r4, r2
 8005aea:	460e      	mov	r6, r1
 8005aec:	b921      	cbnz	r1, 8005af8 <_realloc_r+0x14>
 8005aee:	4611      	mov	r1, r2
 8005af0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005af4:	f7ff bf9c 	b.w	8005a30 <_malloc_r>
 8005af8:	b922      	cbnz	r2, 8005b04 <_realloc_r+0x20>
 8005afa:	f7ff ff4d 	bl	8005998 <_free_r>
 8005afe:	4625      	mov	r5, r4
 8005b00:	4628      	mov	r0, r5
 8005b02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005b04:	f000 f830 	bl	8005b68 <_malloc_usable_size_r>
 8005b08:	42a0      	cmp	r0, r4
 8005b0a:	d20f      	bcs.n	8005b2c <_realloc_r+0x48>
 8005b0c:	4621      	mov	r1, r4
 8005b0e:	4638      	mov	r0, r7
 8005b10:	f7ff ff8e 	bl	8005a30 <_malloc_r>
 8005b14:	4605      	mov	r5, r0
 8005b16:	2800      	cmp	r0, #0
 8005b18:	d0f2      	beq.n	8005b00 <_realloc_r+0x1c>
 8005b1a:	4631      	mov	r1, r6
 8005b1c:	4622      	mov	r2, r4
 8005b1e:	f7ff ff13 	bl	8005948 <memcpy>
 8005b22:	4631      	mov	r1, r6
 8005b24:	4638      	mov	r0, r7
 8005b26:	f7ff ff37 	bl	8005998 <_free_r>
 8005b2a:	e7e9      	b.n	8005b00 <_realloc_r+0x1c>
 8005b2c:	4635      	mov	r5, r6
 8005b2e:	e7e7      	b.n	8005b00 <_realloc_r+0x1c>

08005b30 <_sbrk_r>:
 8005b30:	b538      	push	{r3, r4, r5, lr}
 8005b32:	2300      	movs	r3, #0
 8005b34:	4d05      	ldr	r5, [pc, #20]	; (8005b4c <_sbrk_r+0x1c>)
 8005b36:	4604      	mov	r4, r0
 8005b38:	4608      	mov	r0, r1
 8005b3a:	602b      	str	r3, [r5, #0]
 8005b3c:	f7fb fdc0 	bl	80016c0 <_sbrk>
 8005b40:	1c43      	adds	r3, r0, #1
 8005b42:	d102      	bne.n	8005b4a <_sbrk_r+0x1a>
 8005b44:	682b      	ldr	r3, [r5, #0]
 8005b46:	b103      	cbz	r3, 8005b4a <_sbrk_r+0x1a>
 8005b48:	6023      	str	r3, [r4, #0]
 8005b4a:	bd38      	pop	{r3, r4, r5, pc}
 8005b4c:	20000240 	.word	0x20000240

08005b50 <__malloc_lock>:
 8005b50:	4801      	ldr	r0, [pc, #4]	; (8005b58 <__malloc_lock+0x8>)
 8005b52:	f000 b811 	b.w	8005b78 <__retarget_lock_acquire_recursive>
 8005b56:	bf00      	nop
 8005b58:	20000248 	.word	0x20000248

08005b5c <__malloc_unlock>:
 8005b5c:	4801      	ldr	r0, [pc, #4]	; (8005b64 <__malloc_unlock+0x8>)
 8005b5e:	f000 b80c 	b.w	8005b7a <__retarget_lock_release_recursive>
 8005b62:	bf00      	nop
 8005b64:	20000248 	.word	0x20000248

08005b68 <_malloc_usable_size_r>:
 8005b68:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005b6c:	1f18      	subs	r0, r3, #4
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	bfbc      	itt	lt
 8005b72:	580b      	ldrlt	r3, [r1, r0]
 8005b74:	18c0      	addlt	r0, r0, r3
 8005b76:	4770      	bx	lr

08005b78 <__retarget_lock_acquire_recursive>:
 8005b78:	4770      	bx	lr

08005b7a <__retarget_lock_release_recursive>:
 8005b7a:	4770      	bx	lr

08005b7c <_init>:
 8005b7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b7e:	bf00      	nop
 8005b80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b82:	bc08      	pop	{r3}
 8005b84:	469e      	mov	lr, r3
 8005b86:	4770      	bx	lr

08005b88 <_fini>:
 8005b88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b8a:	bf00      	nop
 8005b8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b8e:	bc08      	pop	{r3}
 8005b90:	469e      	mov	lr, r3
 8005b92:	4770      	bx	lr
