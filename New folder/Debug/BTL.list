
BTL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004538  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08004644  08004644  00005644  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080046ac  080046ac  000060e4  2**0
                  CONTENTS
  4 .ARM          00000000  080046ac  080046ac  000060e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  080046ac  080046ac  000060e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080046ac  080046ac  000056ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080046b0  080046b0  000056b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000e4  20000000  080046b4  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002c4  200000e4  08004798  000060e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003a8  08004798  000063a8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000060e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f38f  00000000  00000000  0000610d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002631  00000000  00000000  0001549c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fc0  00000000  00000000  00017ad0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c49  00000000  00000000  00018a90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018f18  00000000  00000000  000196d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014bc0  00000000  00000000  000325f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008d094  00000000  00000000  000471b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d4245  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000045a8  00000000  00000000  000d4288  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  000d8830  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000e4 	.word	0x200000e4
 8000128:	00000000 	.word	0x00000000
 800012c:	0800462c 	.word	0x0800462c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000e8 	.word	0x200000e8
 8000148:	0800462c 	.word	0x0800462c

0800014c <isButtonPressed>:
    {BUTTON0_GPIO_Port, BUTTON0_Pin, NORMAL_STATE, NORMAL_STATE, NORMAL_STATE, NORMAL_STATE, 500, 0, 0},
    {BUTTON1_GPIO_Port, BUTTON1_Pin, NORMAL_STATE, NORMAL_STATE, NORMAL_STATE, NORMAL_STATE, 500, 0, 0},
    {BUTTON2_GPIO_Port, BUTTON2_Pin, NORMAL_STATE, NORMAL_STATE, NORMAL_STATE, NORMAL_STATE, 500, 0, 0}
};

int isButtonPressed(int index){
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	if(buttons[index].flag == 1){
 8000154:	490e      	ldr	r1, [pc, #56]	@ (8000190 <isButtonPressed+0x44>)
 8000156:	687a      	ldr	r2, [r7, #4]
 8000158:	4613      	mov	r3, r2
 800015a:	009b      	lsls	r3, r3, #2
 800015c:	4413      	add	r3, r2
 800015e:	00db      	lsls	r3, r3, #3
 8000160:	440b      	add	r3, r1
 8000162:	331c      	adds	r3, #28
 8000164:	681b      	ldr	r3, [r3, #0]
 8000166:	2b01      	cmp	r3, #1
 8000168:	d10b      	bne.n	8000182 <isButtonPressed+0x36>
		buttons[index].flag = 0;
 800016a:	4909      	ldr	r1, [pc, #36]	@ (8000190 <isButtonPressed+0x44>)
 800016c:	687a      	ldr	r2, [r7, #4]
 800016e:	4613      	mov	r3, r2
 8000170:	009b      	lsls	r3, r3, #2
 8000172:	4413      	add	r3, r2
 8000174:	00db      	lsls	r3, r3, #3
 8000176:	440b      	add	r3, r1
 8000178:	331c      	adds	r3, #28
 800017a:	2200      	movs	r2, #0
 800017c:	601a      	str	r2, [r3, #0]
		return 1;
 800017e:	2301      	movs	r3, #1
 8000180:	e000      	b.n	8000184 <isButtonPressed+0x38>
	}
	return 0;
 8000182:	2300      	movs	r3, #0
}
 8000184:	4618      	mov	r0, r3
 8000186:	370c      	adds	r7, #12
 8000188:	46bd      	mov	sp, r7
 800018a:	bc80      	pop	{r7}
 800018c:	4770      	bx	lr
 800018e:	bf00      	nop
 8000190:	20000000 	.word	0x20000000

08000194 <isButtonLongPressed>:

int isButtonLongPressed(int index){
 8000194:	b480      	push	{r7}
 8000196:	b083      	sub	sp, #12
 8000198:	af00      	add	r7, sp, #0
 800019a:	6078      	str	r0, [r7, #4]
	if(buttons[index].long_pressed == 1){
 800019c:	490e      	ldr	r1, [pc, #56]	@ (80001d8 <isButtonLongPressed+0x44>)
 800019e:	687a      	ldr	r2, [r7, #4]
 80001a0:	4613      	mov	r3, r2
 80001a2:	009b      	lsls	r3, r3, #2
 80001a4:	4413      	add	r3, r2
 80001a6:	00db      	lsls	r3, r3, #3
 80001a8:	440b      	add	r3, r1
 80001aa:	3320      	adds	r3, #32
 80001ac:	681b      	ldr	r3, [r3, #0]
 80001ae:	2b01      	cmp	r3, #1
 80001b0:	d10b      	bne.n	80001ca <isButtonLongPressed+0x36>
		buttons[index].long_pressed = 0;
 80001b2:	4909      	ldr	r1, [pc, #36]	@ (80001d8 <isButtonLongPressed+0x44>)
 80001b4:	687a      	ldr	r2, [r7, #4]
 80001b6:	4613      	mov	r3, r2
 80001b8:	009b      	lsls	r3, r3, #2
 80001ba:	4413      	add	r3, r2
 80001bc:	00db      	lsls	r3, r3, #3
 80001be:	440b      	add	r3, r1
 80001c0:	3320      	adds	r3, #32
 80001c2:	2200      	movs	r2, #0
 80001c4:	601a      	str	r2, [r3, #0]
		return 1;
 80001c6:	2301      	movs	r3, #1
 80001c8:	e000      	b.n	80001cc <isButtonLongPressed+0x38>
	}
	return 0;
 80001ca:	2300      	movs	r3, #0
}
 80001cc:	4618      	mov	r0, r3
 80001ce:	370c      	adds	r7, #12
 80001d0:	46bd      	mov	sp, r7
 80001d2:	bc80      	pop	{r7}
 80001d4:	4770      	bx	lr
 80001d6:	bf00      	nop
 80001d8:	20000000 	.word	0x20000000

080001dc <getKeyInput>:
void getKeyInput() {
 80001dc:	b580      	push	{r7, lr}
 80001de:	b082      	sub	sp, #8
 80001e0:	af00      	add	r7, sp, #0
    for (int index = 0; index < NUM_BUTTONS; index++) {
 80001e2:	2300      	movs	r3, #0
 80001e4:	607b      	str	r3, [r7, #4]
 80001e6:	e0f4      	b.n	80003d2 <getKeyInput+0x1f6>
        buttons[index].KeyReg2 = buttons[index].KeyReg1;
 80001e8:	497e      	ldr	r1, [pc, #504]	@ (80003e4 <getKeyInput+0x208>)
 80001ea:	687a      	ldr	r2, [r7, #4]
 80001ec:	4613      	mov	r3, r2
 80001ee:	009b      	lsls	r3, r3, #2
 80001f0:	4413      	add	r3, r2
 80001f2:	00db      	lsls	r3, r3, #3
 80001f4:	440b      	add	r3, r1
 80001f6:	330c      	adds	r3, #12
 80001f8:	6819      	ldr	r1, [r3, #0]
 80001fa:	487a      	ldr	r0, [pc, #488]	@ (80003e4 <getKeyInput+0x208>)
 80001fc:	687a      	ldr	r2, [r7, #4]
 80001fe:	4613      	mov	r3, r2
 8000200:	009b      	lsls	r3, r3, #2
 8000202:	4413      	add	r3, r2
 8000204:	00db      	lsls	r3, r3, #3
 8000206:	4403      	add	r3, r0
 8000208:	3310      	adds	r3, #16
 800020a:	6019      	str	r1, [r3, #0]
        buttons[index].KeyReg1 = buttons[index].KeyReg0;
 800020c:	4975      	ldr	r1, [pc, #468]	@ (80003e4 <getKeyInput+0x208>)
 800020e:	687a      	ldr	r2, [r7, #4]
 8000210:	4613      	mov	r3, r2
 8000212:	009b      	lsls	r3, r3, #2
 8000214:	4413      	add	r3, r2
 8000216:	00db      	lsls	r3, r3, #3
 8000218:	440b      	add	r3, r1
 800021a:	3308      	adds	r3, #8
 800021c:	6819      	ldr	r1, [r3, #0]
 800021e:	4871      	ldr	r0, [pc, #452]	@ (80003e4 <getKeyInput+0x208>)
 8000220:	687a      	ldr	r2, [r7, #4]
 8000222:	4613      	mov	r3, r2
 8000224:	009b      	lsls	r3, r3, #2
 8000226:	4413      	add	r3, r2
 8000228:	00db      	lsls	r3, r3, #3
 800022a:	4403      	add	r3, r0
 800022c:	330c      	adds	r3, #12
 800022e:	6019      	str	r1, [r3, #0]
        // Read the current state of the button
        buttons[index].KeyReg0 = HAL_GPIO_ReadPin(buttons[index].GPIO_Port, buttons[index].GPIO_Pin);
 8000230:	496c      	ldr	r1, [pc, #432]	@ (80003e4 <getKeyInput+0x208>)
 8000232:	687a      	ldr	r2, [r7, #4]
 8000234:	4613      	mov	r3, r2
 8000236:	009b      	lsls	r3, r3, #2
 8000238:	4413      	add	r3, r2
 800023a:	00db      	lsls	r3, r3, #3
 800023c:	440b      	add	r3, r1
 800023e:	6818      	ldr	r0, [r3, #0]
 8000240:	4968      	ldr	r1, [pc, #416]	@ (80003e4 <getKeyInput+0x208>)
 8000242:	687a      	ldr	r2, [r7, #4]
 8000244:	4613      	mov	r3, r2
 8000246:	009b      	lsls	r3, r3, #2
 8000248:	4413      	add	r3, r2
 800024a:	00db      	lsls	r3, r3, #3
 800024c:	440b      	add	r3, r1
 800024e:	3304      	adds	r3, #4
 8000250:	881b      	ldrh	r3, [r3, #0]
 8000252:	4619      	mov	r1, r3
 8000254:	f001 ff62 	bl	800211c <HAL_GPIO_ReadPin>
 8000258:	4603      	mov	r3, r0
 800025a:	4618      	mov	r0, r3
 800025c:	4961      	ldr	r1, [pc, #388]	@ (80003e4 <getKeyInput+0x208>)
 800025e:	687a      	ldr	r2, [r7, #4]
 8000260:	4613      	mov	r3, r2
 8000262:	009b      	lsls	r3, r3, #2
 8000264:	4413      	add	r3, r2
 8000266:	00db      	lsls	r3, r3, #3
 8000268:	440b      	add	r3, r1
 800026a:	3308      	adds	r3, #8
 800026c:	6018      	str	r0, [r3, #0]

        // Check for stable button state
        if ((buttons[index].KeyReg1 == buttons[index].KeyReg0) && (buttons[index].KeyReg1 == buttons[index].KeyReg2)) {
 800026e:	495d      	ldr	r1, [pc, #372]	@ (80003e4 <getKeyInput+0x208>)
 8000270:	687a      	ldr	r2, [r7, #4]
 8000272:	4613      	mov	r3, r2
 8000274:	009b      	lsls	r3, r3, #2
 8000276:	4413      	add	r3, r2
 8000278:	00db      	lsls	r3, r3, #3
 800027a:	440b      	add	r3, r1
 800027c:	330c      	adds	r3, #12
 800027e:	6819      	ldr	r1, [r3, #0]
 8000280:	4858      	ldr	r0, [pc, #352]	@ (80003e4 <getKeyInput+0x208>)
 8000282:	687a      	ldr	r2, [r7, #4]
 8000284:	4613      	mov	r3, r2
 8000286:	009b      	lsls	r3, r3, #2
 8000288:	4413      	add	r3, r2
 800028a:	00db      	lsls	r3, r3, #3
 800028c:	4403      	add	r3, r0
 800028e:	3308      	adds	r3, #8
 8000290:	681b      	ldr	r3, [r3, #0]
 8000292:	4299      	cmp	r1, r3
 8000294:	f040 809a 	bne.w	80003cc <getKeyInput+0x1f0>
 8000298:	4952      	ldr	r1, [pc, #328]	@ (80003e4 <getKeyInput+0x208>)
 800029a:	687a      	ldr	r2, [r7, #4]
 800029c:	4613      	mov	r3, r2
 800029e:	009b      	lsls	r3, r3, #2
 80002a0:	4413      	add	r3, r2
 80002a2:	00db      	lsls	r3, r3, #3
 80002a4:	440b      	add	r3, r1
 80002a6:	330c      	adds	r3, #12
 80002a8:	6819      	ldr	r1, [r3, #0]
 80002aa:	484e      	ldr	r0, [pc, #312]	@ (80003e4 <getKeyInput+0x208>)
 80002ac:	687a      	ldr	r2, [r7, #4]
 80002ae:	4613      	mov	r3, r2
 80002b0:	009b      	lsls	r3, r3, #2
 80002b2:	4413      	add	r3, r2
 80002b4:	00db      	lsls	r3, r3, #3
 80002b6:	4403      	add	r3, r0
 80002b8:	3310      	adds	r3, #16
 80002ba:	681b      	ldr	r3, [r3, #0]
 80002bc:	4299      	cmp	r1, r3
 80002be:	f040 8085 	bne.w	80003cc <getKeyInput+0x1f0>
            if (buttons[index].KeyReg2 != buttons[index].KeyReg3) {
 80002c2:	4948      	ldr	r1, [pc, #288]	@ (80003e4 <getKeyInput+0x208>)
 80002c4:	687a      	ldr	r2, [r7, #4]
 80002c6:	4613      	mov	r3, r2
 80002c8:	009b      	lsls	r3, r3, #2
 80002ca:	4413      	add	r3, r2
 80002cc:	00db      	lsls	r3, r3, #3
 80002ce:	440b      	add	r3, r1
 80002d0:	3310      	adds	r3, #16
 80002d2:	6819      	ldr	r1, [r3, #0]
 80002d4:	4843      	ldr	r0, [pc, #268]	@ (80003e4 <getKeyInput+0x208>)
 80002d6:	687a      	ldr	r2, [r7, #4]
 80002d8:	4613      	mov	r3, r2
 80002da:	009b      	lsls	r3, r3, #2
 80002dc:	4413      	add	r3, r2
 80002de:	00db      	lsls	r3, r3, #3
 80002e0:	4403      	add	r3, r0
 80002e2:	3314      	adds	r3, #20
 80002e4:	681b      	ldr	r3, [r3, #0]
 80002e6:	4299      	cmp	r1, r3
 80002e8:	d032      	beq.n	8000350 <getKeyInput+0x174>
                buttons[index].KeyReg3 = buttons[index].KeyReg2;
 80002ea:	493e      	ldr	r1, [pc, #248]	@ (80003e4 <getKeyInput+0x208>)
 80002ec:	687a      	ldr	r2, [r7, #4]
 80002ee:	4613      	mov	r3, r2
 80002f0:	009b      	lsls	r3, r3, #2
 80002f2:	4413      	add	r3, r2
 80002f4:	00db      	lsls	r3, r3, #3
 80002f6:	440b      	add	r3, r1
 80002f8:	3310      	adds	r3, #16
 80002fa:	6819      	ldr	r1, [r3, #0]
 80002fc:	4839      	ldr	r0, [pc, #228]	@ (80003e4 <getKeyInput+0x208>)
 80002fe:	687a      	ldr	r2, [r7, #4]
 8000300:	4613      	mov	r3, r2
 8000302:	009b      	lsls	r3, r3, #2
 8000304:	4413      	add	r3, r2
 8000306:	00db      	lsls	r3, r3, #3
 8000308:	4403      	add	r3, r0
 800030a:	3314      	adds	r3, #20
 800030c:	6019      	str	r1, [r3, #0]

                // Check if button is in pressed state
                if (buttons[index].KeyReg3 == PRESSED_STATE) {
 800030e:	4935      	ldr	r1, [pc, #212]	@ (80003e4 <getKeyInput+0x208>)
 8000310:	687a      	ldr	r2, [r7, #4]
 8000312:	4613      	mov	r3, r2
 8000314:	009b      	lsls	r3, r3, #2
 8000316:	4413      	add	r3, r2
 8000318:	00db      	lsls	r3, r3, #3
 800031a:	440b      	add	r3, r1
 800031c:	3314      	adds	r3, #20
 800031e:	681b      	ldr	r3, [r3, #0]
 8000320:	2b00      	cmp	r3, #0
 8000322:	d153      	bne.n	80003cc <getKeyInput+0x1f0>
                    buttons[index].TimeOutForKeyPress = 500;
 8000324:	492f      	ldr	r1, [pc, #188]	@ (80003e4 <getKeyInput+0x208>)
 8000326:	687a      	ldr	r2, [r7, #4]
 8000328:	4613      	mov	r3, r2
 800032a:	009b      	lsls	r3, r3, #2
 800032c:	4413      	add	r3, r2
 800032e:	00db      	lsls	r3, r3, #3
 8000330:	440b      	add	r3, r1
 8000332:	3318      	adds	r3, #24
 8000334:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000338:	601a      	str	r2, [r3, #0]
                    buttons[index].flag = 1;
 800033a:	492a      	ldr	r1, [pc, #168]	@ (80003e4 <getKeyInput+0x208>)
 800033c:	687a      	ldr	r2, [r7, #4]
 800033e:	4613      	mov	r3, r2
 8000340:	009b      	lsls	r3, r3, #2
 8000342:	4413      	add	r3, r2
 8000344:	00db      	lsls	r3, r3, #3
 8000346:	440b      	add	r3, r1
 8000348:	331c      	adds	r3, #28
 800034a:	2201      	movs	r2, #1
 800034c:	601a      	str	r2, [r3, #0]
 800034e:	e03d      	b.n	80003cc <getKeyInput+0x1f0>
                }

            } else {
                // Decrease timeout if button is held down
                buttons[index].TimeOutForKeyPress--;
 8000350:	4924      	ldr	r1, [pc, #144]	@ (80003e4 <getKeyInput+0x208>)
 8000352:	687a      	ldr	r2, [r7, #4]
 8000354:	4613      	mov	r3, r2
 8000356:	009b      	lsls	r3, r3, #2
 8000358:	4413      	add	r3, r2
 800035a:	00db      	lsls	r3, r3, #3
 800035c:	440b      	add	r3, r1
 800035e:	3318      	adds	r3, #24
 8000360:	681b      	ldr	r3, [r3, #0]
 8000362:	1e59      	subs	r1, r3, #1
 8000364:	481f      	ldr	r0, [pc, #124]	@ (80003e4 <getKeyInput+0x208>)
 8000366:	687a      	ldr	r2, [r7, #4]
 8000368:	4613      	mov	r3, r2
 800036a:	009b      	lsls	r3, r3, #2
 800036c:	4413      	add	r3, r2
 800036e:	00db      	lsls	r3, r3, #3
 8000370:	4403      	add	r3, r0
 8000372:	3318      	adds	r3, #24
 8000374:	6019      	str	r1, [r3, #0]
                if (buttons[index].TimeOutForKeyPress == 0) {
 8000376:	491b      	ldr	r1, [pc, #108]	@ (80003e4 <getKeyInput+0x208>)
 8000378:	687a      	ldr	r2, [r7, #4]
 800037a:	4613      	mov	r3, r2
 800037c:	009b      	lsls	r3, r3, #2
 800037e:	4413      	add	r3, r2
 8000380:	00db      	lsls	r3, r3, #3
 8000382:	440b      	add	r3, r1
 8000384:	3318      	adds	r3, #24
 8000386:	681b      	ldr	r3, [r3, #0]
 8000388:	2b00      	cmp	r3, #0
 800038a:	d11f      	bne.n	80003cc <getKeyInput+0x1f0>
                    buttons[index].TimeOutForKeyPress = 500;
 800038c:	4915      	ldr	r1, [pc, #84]	@ (80003e4 <getKeyInput+0x208>)
 800038e:	687a      	ldr	r2, [r7, #4]
 8000390:	4613      	mov	r3, r2
 8000392:	009b      	lsls	r3, r3, #2
 8000394:	4413      	add	r3, r2
 8000396:	00db      	lsls	r3, r3, #3
 8000398:	440b      	add	r3, r1
 800039a:	3318      	adds	r3, #24
 800039c:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80003a0:	601a      	str	r2, [r3, #0]
                    if (buttons[index].KeyReg3 == PRESSED_STATE) {
 80003a2:	4910      	ldr	r1, [pc, #64]	@ (80003e4 <getKeyInput+0x208>)
 80003a4:	687a      	ldr	r2, [r7, #4]
 80003a6:	4613      	mov	r3, r2
 80003a8:	009b      	lsls	r3, r3, #2
 80003aa:	4413      	add	r3, r2
 80003ac:	00db      	lsls	r3, r3, #3
 80003ae:	440b      	add	r3, r1
 80003b0:	3314      	adds	r3, #20
 80003b2:	681b      	ldr	r3, [r3, #0]
 80003b4:	2b00      	cmp	r3, #0
 80003b6:	d109      	bne.n	80003cc <getKeyInput+0x1f0>
                        buttons[index].long_pressed = 1;
 80003b8:	490a      	ldr	r1, [pc, #40]	@ (80003e4 <getKeyInput+0x208>)
 80003ba:	687a      	ldr	r2, [r7, #4]
 80003bc:	4613      	mov	r3, r2
 80003be:	009b      	lsls	r3, r3, #2
 80003c0:	4413      	add	r3, r2
 80003c2:	00db      	lsls	r3, r3, #3
 80003c4:	440b      	add	r3, r1
 80003c6:	3320      	adds	r3, #32
 80003c8:	2201      	movs	r2, #1
 80003ca:	601a      	str	r2, [r3, #0]
    for (int index = 0; index < NUM_BUTTONS; index++) {
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	3301      	adds	r3, #1
 80003d0:	607b      	str	r3, [r7, #4]
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	2b02      	cmp	r3, #2
 80003d6:	f77f af07 	ble.w	80001e8 <getKeyInput+0xc>
                    }
                }
            }
        }
    }
}
 80003da:	bf00      	nop
 80003dc:	bf00      	nop
 80003de:	3708      	adds	r7, #8
 80003e0:	46bd      	mov	sp, r7
 80003e2:	bd80      	pop	{r7, pc}
 80003e4:	20000000 	.word	0x20000000

080003e8 <fsm_auto_run>:
extern int TIME_FOR_RED;
extern int TIME_FOR_AMBER;
extern int time_green;
extern int time_red;
extern int time_amber;
void fsm_auto_run(){
 80003e8:	b580      	push	{r7, lr}
 80003ea:	af00      	add	r7, sp, #0
	switch(status){
 80003ec:	4ba4      	ldr	r3, [pc, #656]	@ (8000680 <fsm_auto_run+0x298>)
 80003ee:	681b      	ldr	r3, [r3, #0]
 80003f0:	3b01      	subs	r3, #1
 80003f2:	2b04      	cmp	r3, #4
 80003f4:	f200 8226 	bhi.w	8000844 <fsm_auto_run+0x45c>
 80003f8:	a201      	add	r2, pc, #4	@ (adr r2, 8000400 <fsm_auto_run+0x18>)
 80003fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003fe:	bf00      	nop
 8000400:	08000415 	.word	0x08000415
 8000404:	080004d9 	.word	0x080004d9
 8000408:	080005b1 	.word	0x080005b1
 800040c:	080006a1 	.word	0x080006a1
 8000410:	08000777 	.word	0x08000777
	case INIT:
		init();
 8000414:	f000 fcd2 	bl	8000dbc <init>
		if(1){

			setTimer(0, (time_green+1)*1000);
 8000418:	4b9a      	ldr	r3, [pc, #616]	@ (8000684 <fsm_auto_run+0x29c>)
 800041a:	681b      	ldr	r3, [r3, #0]
 800041c:	3301      	adds	r3, #1
 800041e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000422:	fb02 f303 	mul.w	r3, r2, r3
 8000426:	4619      	mov	r1, r3
 8000428:	2000      	movs	r0, #0
 800042a:	f001 f983 	bl	8001734 <setTimer>
		    setTimer(9, 100); // for scan led
 800042e:	2164      	movs	r1, #100	@ 0x64
 8000430:	2009      	movs	r0, #9
 8000432:	f001 f97f 	bl	8001734 <setTimer>
		    setTimer(1, 1000); // for display 7 seg
 8000436:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800043a:	2001      	movs	r0, #1
 800043c:	f001 f97a 	bl	8001734 <setTimer>
		    setTimer(8, 1000); // signal timer
 8000440:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000444:	2008      	movs	r0, #8
 8000446:	f001 f975 	bl	8001734 <setTimer>
		    status = AUTO_GREEN_RED;
 800044a:	4b8d      	ldr	r3, [pc, #564]	@ (8000680 <fsm_auto_run+0x298>)
 800044c:	2202      	movs	r2, #2
 800044e:	601a      	str	r2, [r3, #0]
		}
		if(isButtonPressed(0) || isButtonLongPressed(0)){
 8000450:	2000      	movs	r0, #0
 8000452:	f7ff fe7b 	bl	800014c <isButtonPressed>
 8000456:	4603      	mov	r3, r0
 8000458:	2b00      	cmp	r3, #0
 800045a:	d105      	bne.n	8000468 <fsm_auto_run+0x80>
 800045c:	2000      	movs	r0, #0
 800045e:	f7ff fe99 	bl	8000194 <isButtonLongPressed>
 8000462:	4603      	mov	r3, r0
 8000464:	2b00      	cmp	r3, #0
 8000466:	d00e      	beq.n	8000486 <fsm_auto_run+0x9e>
			HAL_GPIO_TogglePin(SIGNAL_BUTTON_GPIO_Port, SIGNAL_BUTTON_Pin);
 8000468:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800046c:	4886      	ldr	r0, [pc, #536]	@ (8000688 <fsm_auto_run+0x2a0>)
 800046e:	f001 fe84 	bl	800217a <HAL_GPIO_TogglePin>
			status = MODIFY_RED;
 8000472:	4b83      	ldr	r3, [pc, #524]	@ (8000680 <fsm_auto_run+0x298>)
 8000474:	2216      	movs	r2, #22
 8000476:	601a      	str	r2, [r3, #0]
			clear_all_led();
 8000478:	f000 ff00 	bl	800127c <clear_all_led>
			setTimer(3, 500); // timer for bliking led 2hz on mode modify
 800047c:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8000480:	2003      	movs	r0, #3
 8000482:	f001 f957 	bl	8001734 <setTimer>
		}
		if(isButtonPressed(1) || isButtonLongPressed(1)){
 8000486:	2001      	movs	r0, #1
 8000488:	f7ff fe60 	bl	800014c <isButtonPressed>
 800048c:	4603      	mov	r3, r0
 800048e:	2b00      	cmp	r3, #0
 8000490:	d105      	bne.n	800049e <fsm_auto_run+0xb6>
 8000492:	2001      	movs	r0, #1
 8000494:	f7ff fe7e 	bl	8000194 <isButtonLongPressed>
 8000498:	4603      	mov	r3, r0
 800049a:	2b00      	cmp	r3, #0
 800049c:	d009      	beq.n	80004b2 <fsm_auto_run+0xca>
			HAL_GPIO_TogglePin(SIGNAL_BUTTON_GPIO_Port, SIGNAL_BUTTON_Pin);
 800049e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80004a2:	4879      	ldr	r0, [pc, #484]	@ (8000688 <fsm_auto_run+0x2a0>)
 80004a4:	f001 fe69 	bl	800217a <HAL_GPIO_TogglePin>
			clear_all_led();
 80004a8:	f000 fee8 	bl	800127c <clear_all_led>
			status = MANUAL_GREEN_RED;
 80004ac:	4b74      	ldr	r3, [pc, #464]	@ (8000680 <fsm_auto_run+0x298>)
 80004ae:	2220      	movs	r2, #32
 80004b0:	601a      	str	r2, [r3, #0]
		}
		if(isButtonPressed(2) || isButtonLongPressed(2)){
 80004b2:	2002      	movs	r0, #2
 80004b4:	f7ff fe4a 	bl	800014c <isButtonPressed>
 80004b8:	4603      	mov	r3, r0
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	d106      	bne.n	80004cc <fsm_auto_run+0xe4>
 80004be:	2002      	movs	r0, #2
 80004c0:	f7ff fe68 	bl	8000194 <isButtonLongPressed>
 80004c4:	4603      	mov	r3, r0
 80004c6:	2b00      	cmp	r3, #0
 80004c8:	f000 81be 	beq.w	8000848 <fsm_auto_run+0x460>
			HAL_GPIO_TogglePin(SIGNAL_BUTTON_GPIO_Port, SIGNAL_BUTTON_Pin);
 80004cc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80004d0:	486d      	ldr	r0, [pc, #436]	@ (8000688 <fsm_auto_run+0x2a0>)
 80004d2:	f001 fe52 	bl	800217a <HAL_GPIO_TogglePin>
		}
		break;
 80004d6:	e1b7      	b.n	8000848 <fsm_auto_run+0x460>
	case AUTO_GREEN_RED:
		auto_green_red();
 80004d8:	f000 fca0 	bl	8000e1c <auto_green_red>
		if(timers[0].flag == 1) // flag for transition
 80004dc:	4b6b      	ldr	r3, [pc, #428]	@ (800068c <fsm_auto_run+0x2a4>)
 80004de:	685b      	ldr	r3, [r3, #4]
 80004e0:	2b01      	cmp	r3, #1
 80004e2:	d121      	bne.n	8000528 <fsm_auto_run+0x140>
		{
			time_green = TIME_FOR_GREEN;
 80004e4:	4b6a      	ldr	r3, [pc, #424]	@ (8000690 <fsm_auto_run+0x2a8>)
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	4a66      	ldr	r2, [pc, #408]	@ (8000684 <fsm_auto_run+0x29c>)
 80004ea:	6013      	str	r3, [r2, #0]
			time_amber = TIME_FOR_RED - TIME_FOR_GREEN - 1 ;
 80004ec:	4b69      	ldr	r3, [pc, #420]	@ (8000694 <fsm_auto_run+0x2ac>)
 80004ee:	681a      	ldr	r2, [r3, #0]
 80004f0:	4b67      	ldr	r3, [pc, #412]	@ (8000690 <fsm_auto_run+0x2a8>)
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	1ad3      	subs	r3, r2, r3
 80004f6:	3b01      	subs	r3, #1
 80004f8:	4a67      	ldr	r2, [pc, #412]	@ (8000698 <fsm_auto_run+0x2b0>)
 80004fa:	6013      	str	r3, [r2, #0]
			time_red = TIME_FOR_RED - TIME_FOR_GREEN - 1;
 80004fc:	4b65      	ldr	r3, [pc, #404]	@ (8000694 <fsm_auto_run+0x2ac>)
 80004fe:	681a      	ldr	r2, [r3, #0]
 8000500:	4b63      	ldr	r3, [pc, #396]	@ (8000690 <fsm_auto_run+0x2a8>)
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	1ad3      	subs	r3, r2, r3
 8000506:	3b01      	subs	r3, #1
 8000508:	4a64      	ldr	r2, [pc, #400]	@ (800069c <fsm_auto_run+0x2b4>)
 800050a:	6013      	str	r3, [r2, #0]
			setTimer(0, (time_amber+1)*1000);
 800050c:	4b62      	ldr	r3, [pc, #392]	@ (8000698 <fsm_auto_run+0x2b0>)
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	3301      	adds	r3, #1
 8000512:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000516:	fb02 f303 	mul.w	r3, r2, r3
 800051a:	4619      	mov	r1, r3
 800051c:	2000      	movs	r0, #0
 800051e:	f001 f909 	bl	8001734 <setTimer>
			status = AUTO_AMBER_RED;
 8000522:	4b57      	ldr	r3, [pc, #348]	@ (8000680 <fsm_auto_run+0x298>)
 8000524:	2203      	movs	r2, #3
 8000526:	601a      	str	r2, [r3, #0]
		}
		if(isButtonPressed(0) || isButtonLongPressed(0)){
 8000528:	2000      	movs	r0, #0
 800052a:	f7ff fe0f 	bl	800014c <isButtonPressed>
 800052e:	4603      	mov	r3, r0
 8000530:	2b00      	cmp	r3, #0
 8000532:	d105      	bne.n	8000540 <fsm_auto_run+0x158>
 8000534:	2000      	movs	r0, #0
 8000536:	f7ff fe2d 	bl	8000194 <isButtonLongPressed>
 800053a:	4603      	mov	r3, r0
 800053c:	2b00      	cmp	r3, #0
 800053e:	d00e      	beq.n	800055e <fsm_auto_run+0x176>
			HAL_GPIO_TogglePin(SIGNAL_BUTTON_GPIO_Port, SIGNAL_BUTTON_Pin);
 8000540:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000544:	4850      	ldr	r0, [pc, #320]	@ (8000688 <fsm_auto_run+0x2a0>)
 8000546:	f001 fe18 	bl	800217a <HAL_GPIO_TogglePin>
			status = MODIFY_RED;
 800054a:	4b4d      	ldr	r3, [pc, #308]	@ (8000680 <fsm_auto_run+0x298>)
 800054c:	2216      	movs	r2, #22
 800054e:	601a      	str	r2, [r3, #0]
			clear_all_led();
 8000550:	f000 fe94 	bl	800127c <clear_all_led>
			setTimer(3, 500); // timer for bliking led 2hz on mode modify
 8000554:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8000558:	2003      	movs	r0, #3
 800055a:	f001 f8eb 	bl	8001734 <setTimer>
		}
		if(isButtonPressed(1) || isButtonLongPressed(1)){
 800055e:	2001      	movs	r0, #1
 8000560:	f7ff fdf4 	bl	800014c <isButtonPressed>
 8000564:	4603      	mov	r3, r0
 8000566:	2b00      	cmp	r3, #0
 8000568:	d105      	bne.n	8000576 <fsm_auto_run+0x18e>
 800056a:	2001      	movs	r0, #1
 800056c:	f7ff fe12 	bl	8000194 <isButtonLongPressed>
 8000570:	4603      	mov	r3, r0
 8000572:	2b00      	cmp	r3, #0
 8000574:	d009      	beq.n	800058a <fsm_auto_run+0x1a2>
			HAL_GPIO_TogglePin(SIGNAL_BUTTON_GPIO_Port, SIGNAL_BUTTON_Pin);
 8000576:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800057a:	4843      	ldr	r0, [pc, #268]	@ (8000688 <fsm_auto_run+0x2a0>)
 800057c:	f001 fdfd 	bl	800217a <HAL_GPIO_TogglePin>
			clear_all_led();
 8000580:	f000 fe7c 	bl	800127c <clear_all_led>
			status = MANUAL_GREEN_RED;
 8000584:	4b3e      	ldr	r3, [pc, #248]	@ (8000680 <fsm_auto_run+0x298>)
 8000586:	2220      	movs	r2, #32
 8000588:	601a      	str	r2, [r3, #0]
		}
		if(isButtonPressed(2) || isButtonLongPressed(2)){
 800058a:	2002      	movs	r0, #2
 800058c:	f7ff fdde 	bl	800014c <isButtonPressed>
 8000590:	4603      	mov	r3, r0
 8000592:	2b00      	cmp	r3, #0
 8000594:	d106      	bne.n	80005a4 <fsm_auto_run+0x1bc>
 8000596:	2002      	movs	r0, #2
 8000598:	f7ff fdfc 	bl	8000194 <isButtonLongPressed>
 800059c:	4603      	mov	r3, r0
 800059e:	2b00      	cmp	r3, #0
 80005a0:	f000 8154 	beq.w	800084c <fsm_auto_run+0x464>
			HAL_GPIO_TogglePin(SIGNAL_BUTTON_GPIO_Port, SIGNAL_BUTTON_Pin);
 80005a4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80005a8:	4837      	ldr	r0, [pc, #220]	@ (8000688 <fsm_auto_run+0x2a0>)
 80005aa:	f001 fde6 	bl	800217a <HAL_GPIO_TogglePin>
		}
		break;
 80005ae:	e14d      	b.n	800084c <fsm_auto_run+0x464>
	case AUTO_AMBER_RED:
		auto_amber_red();
 80005b0:	f000 fc8a 	bl	8000ec8 <auto_amber_red>
		if(timers[0].flag == 1){
 80005b4:	4b35      	ldr	r3, [pc, #212]	@ (800068c <fsm_auto_run+0x2a4>)
 80005b6:	685b      	ldr	r3, [r3, #4]
 80005b8:	2b01      	cmp	r3, #1
 80005ba:	d11d      	bne.n	80005f8 <fsm_auto_run+0x210>
			time_red = TIME_FOR_RED;
 80005bc:	4b35      	ldr	r3, [pc, #212]	@ (8000694 <fsm_auto_run+0x2ac>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	4a36      	ldr	r2, [pc, #216]	@ (800069c <fsm_auto_run+0x2b4>)
 80005c2:	6013      	str	r3, [r2, #0]
			time_amber = TIME_FOR_RED - TIME_FOR_GREEN - 1;
 80005c4:	4b33      	ldr	r3, [pc, #204]	@ (8000694 <fsm_auto_run+0x2ac>)
 80005c6:	681a      	ldr	r2, [r3, #0]
 80005c8:	4b31      	ldr	r3, [pc, #196]	@ (8000690 <fsm_auto_run+0x2a8>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	1ad3      	subs	r3, r2, r3
 80005ce:	3b01      	subs	r3, #1
 80005d0:	4a31      	ldr	r2, [pc, #196]	@ (8000698 <fsm_auto_run+0x2b0>)
 80005d2:	6013      	str	r3, [r2, #0]
			time_green = TIME_FOR_GREEN;
 80005d4:	4b2e      	ldr	r3, [pc, #184]	@ (8000690 <fsm_auto_run+0x2a8>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	4a2a      	ldr	r2, [pc, #168]	@ (8000684 <fsm_auto_run+0x29c>)
 80005da:	6013      	str	r3, [r2, #0]
			setTimer(0, (time_green+1)*1000);
 80005dc:	4b29      	ldr	r3, [pc, #164]	@ (8000684 <fsm_auto_run+0x29c>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	3301      	adds	r3, #1
 80005e2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80005e6:	fb02 f303 	mul.w	r3, r2, r3
 80005ea:	4619      	mov	r1, r3
 80005ec:	2000      	movs	r0, #0
 80005ee:	f001 f8a1 	bl	8001734 <setTimer>
			status = AUTO_RED_GREEN;
 80005f2:	4b23      	ldr	r3, [pc, #140]	@ (8000680 <fsm_auto_run+0x298>)
 80005f4:	2204      	movs	r2, #4
 80005f6:	601a      	str	r2, [r3, #0]
		}
		if(isButtonPressed(0) || isButtonLongPressed(0)){
 80005f8:	2000      	movs	r0, #0
 80005fa:	f7ff fda7 	bl	800014c <isButtonPressed>
 80005fe:	4603      	mov	r3, r0
 8000600:	2b00      	cmp	r3, #0
 8000602:	d105      	bne.n	8000610 <fsm_auto_run+0x228>
 8000604:	2000      	movs	r0, #0
 8000606:	f7ff fdc5 	bl	8000194 <isButtonLongPressed>
 800060a:	4603      	mov	r3, r0
 800060c:	2b00      	cmp	r3, #0
 800060e:	d00e      	beq.n	800062e <fsm_auto_run+0x246>
			HAL_GPIO_TogglePin(SIGNAL_BUTTON_GPIO_Port, SIGNAL_BUTTON_Pin);
 8000610:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000614:	481c      	ldr	r0, [pc, #112]	@ (8000688 <fsm_auto_run+0x2a0>)
 8000616:	f001 fdb0 	bl	800217a <HAL_GPIO_TogglePin>
			status = MODIFY_RED;
 800061a:	4b19      	ldr	r3, [pc, #100]	@ (8000680 <fsm_auto_run+0x298>)
 800061c:	2216      	movs	r2, #22
 800061e:	601a      	str	r2, [r3, #0]
			clear_all_led();
 8000620:	f000 fe2c 	bl	800127c <clear_all_led>
			setTimer(3, 500); // timer for bliking led 2hz on mode modify
 8000624:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8000628:	2003      	movs	r0, #3
 800062a:	f001 f883 	bl	8001734 <setTimer>
		}
		if(isButtonPressed(1) || isButtonLongPressed(1)){
 800062e:	2001      	movs	r0, #1
 8000630:	f7ff fd8c 	bl	800014c <isButtonPressed>
 8000634:	4603      	mov	r3, r0
 8000636:	2b00      	cmp	r3, #0
 8000638:	d105      	bne.n	8000646 <fsm_auto_run+0x25e>
 800063a:	2001      	movs	r0, #1
 800063c:	f7ff fdaa 	bl	8000194 <isButtonLongPressed>
 8000640:	4603      	mov	r3, r0
 8000642:	2b00      	cmp	r3, #0
 8000644:	d009      	beq.n	800065a <fsm_auto_run+0x272>
			HAL_GPIO_TogglePin(SIGNAL_BUTTON_GPIO_Port, SIGNAL_BUTTON_Pin);
 8000646:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800064a:	480f      	ldr	r0, [pc, #60]	@ (8000688 <fsm_auto_run+0x2a0>)
 800064c:	f001 fd95 	bl	800217a <HAL_GPIO_TogglePin>
			clear_all_led();
 8000650:	f000 fe14 	bl	800127c <clear_all_led>
			status = MANUAL_GREEN_RED;
 8000654:	4b0a      	ldr	r3, [pc, #40]	@ (8000680 <fsm_auto_run+0x298>)
 8000656:	2220      	movs	r2, #32
 8000658:	601a      	str	r2, [r3, #0]
		}
		if(isButtonPressed(2) || isButtonLongPressed(2)){
 800065a:	2002      	movs	r0, #2
 800065c:	f7ff fd76 	bl	800014c <isButtonPressed>
 8000660:	4603      	mov	r3, r0
 8000662:	2b00      	cmp	r3, #0
 8000664:	d106      	bne.n	8000674 <fsm_auto_run+0x28c>
 8000666:	2002      	movs	r0, #2
 8000668:	f7ff fd94 	bl	8000194 <isButtonLongPressed>
 800066c:	4603      	mov	r3, r0
 800066e:	2b00      	cmp	r3, #0
 8000670:	f000 80ee 	beq.w	8000850 <fsm_auto_run+0x468>
			HAL_GPIO_TogglePin(SIGNAL_BUTTON_GPIO_Port, SIGNAL_BUTTON_Pin);
 8000674:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000678:	4803      	ldr	r0, [pc, #12]	@ (8000688 <fsm_auto_run+0x2a0>)
 800067a:	f001 fd7e 	bl	800217a <HAL_GPIO_TogglePin>
		}
		break;
 800067e:	e0e7      	b.n	8000850 <fsm_auto_run+0x468>
 8000680:	20000100 	.word	0x20000100
 8000684:	20000118 	.word	0x20000118
 8000688:	40011000 	.word	0x40011000
 800068c:	20000208 	.word	0x20000208
 8000690:	20000078 	.word	0x20000078
 8000694:	2000007c 	.word	0x2000007c
 8000698:	2000011c 	.word	0x2000011c
 800069c:	20000114 	.word	0x20000114
	case AUTO_RED_GREEN:
		auto_red_green();
 80006a0:	f000 fc68 	bl	8000f74 <auto_red_green>
		if(timers[0].flag == 1){
 80006a4:	4b6e      	ldr	r3, [pc, #440]	@ (8000860 <fsm_auto_run+0x478>)
 80006a6:	685b      	ldr	r3, [r3, #4]
 80006a8:	2b01      	cmp	r3, #1
 80006aa:	d121      	bne.n	80006f0 <fsm_auto_run+0x308>
			time_amber = TIME_FOR_RED - TIME_FOR_GREEN - 1;
 80006ac:	4b6d      	ldr	r3, [pc, #436]	@ (8000864 <fsm_auto_run+0x47c>)
 80006ae:	681a      	ldr	r2, [r3, #0]
 80006b0:	4b6d      	ldr	r3, [pc, #436]	@ (8000868 <fsm_auto_run+0x480>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	1ad3      	subs	r3, r2, r3
 80006b6:	3b01      	subs	r3, #1
 80006b8:	4a6c      	ldr	r2, [pc, #432]	@ (800086c <fsm_auto_run+0x484>)
 80006ba:	6013      	str	r3, [r2, #0]
			time_red = TIME_FOR_RED-TIME_FOR_GREEN - 1;
 80006bc:	4b69      	ldr	r3, [pc, #420]	@ (8000864 <fsm_auto_run+0x47c>)
 80006be:	681a      	ldr	r2, [r3, #0]
 80006c0:	4b69      	ldr	r3, [pc, #420]	@ (8000868 <fsm_auto_run+0x480>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	1ad3      	subs	r3, r2, r3
 80006c6:	3b01      	subs	r3, #1
 80006c8:	4a69      	ldr	r2, [pc, #420]	@ (8000870 <fsm_auto_run+0x488>)
 80006ca:	6013      	str	r3, [r2, #0]
			time_green = TIME_FOR_GREEN;
 80006cc:	4b66      	ldr	r3, [pc, #408]	@ (8000868 <fsm_auto_run+0x480>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	4a68      	ldr	r2, [pc, #416]	@ (8000874 <fsm_auto_run+0x48c>)
 80006d2:	6013      	str	r3, [r2, #0]
			setTimer(0, (time_amber+1)*1000);
 80006d4:	4b65      	ldr	r3, [pc, #404]	@ (800086c <fsm_auto_run+0x484>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	3301      	adds	r3, #1
 80006da:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80006de:	fb02 f303 	mul.w	r3, r2, r3
 80006e2:	4619      	mov	r1, r3
 80006e4:	2000      	movs	r0, #0
 80006e6:	f001 f825 	bl	8001734 <setTimer>
			status = AUTO_RED_AMBER;
 80006ea:	4b63      	ldr	r3, [pc, #396]	@ (8000878 <fsm_auto_run+0x490>)
 80006ec:	2205      	movs	r2, #5
 80006ee:	601a      	str	r2, [r3, #0]
		}
		if(isButtonPressed(0) || isButtonLongPressed(0)){
 80006f0:	2000      	movs	r0, #0
 80006f2:	f7ff fd2b 	bl	800014c <isButtonPressed>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d105      	bne.n	8000708 <fsm_auto_run+0x320>
 80006fc:	2000      	movs	r0, #0
 80006fe:	f7ff fd49 	bl	8000194 <isButtonLongPressed>
 8000702:	4603      	mov	r3, r0
 8000704:	2b00      	cmp	r3, #0
 8000706:	d00e      	beq.n	8000726 <fsm_auto_run+0x33e>
			HAL_GPIO_TogglePin(SIGNAL_BUTTON_GPIO_Port, SIGNAL_BUTTON_Pin);
 8000708:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800070c:	485b      	ldr	r0, [pc, #364]	@ (800087c <fsm_auto_run+0x494>)
 800070e:	f001 fd34 	bl	800217a <HAL_GPIO_TogglePin>
			status = MODIFY_RED;
 8000712:	4b59      	ldr	r3, [pc, #356]	@ (8000878 <fsm_auto_run+0x490>)
 8000714:	2216      	movs	r2, #22
 8000716:	601a      	str	r2, [r3, #0]
			clear_all_led();
 8000718:	f000 fdb0 	bl	800127c <clear_all_led>
			setTimer(3, 500); // timer for bliking led 2hz on mode modify
 800071c:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8000720:	2003      	movs	r0, #3
 8000722:	f001 f807 	bl	8001734 <setTimer>
		}
		if(isButtonPressed(1) || isButtonLongPressed(1)){
 8000726:	2001      	movs	r0, #1
 8000728:	f7ff fd10 	bl	800014c <isButtonPressed>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d105      	bne.n	800073e <fsm_auto_run+0x356>
 8000732:	2001      	movs	r0, #1
 8000734:	f7ff fd2e 	bl	8000194 <isButtonLongPressed>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d009      	beq.n	8000752 <fsm_auto_run+0x36a>
			HAL_GPIO_TogglePin(SIGNAL_BUTTON_GPIO_Port, SIGNAL_BUTTON_Pin);
 800073e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000742:	484e      	ldr	r0, [pc, #312]	@ (800087c <fsm_auto_run+0x494>)
 8000744:	f001 fd19 	bl	800217a <HAL_GPIO_TogglePin>
			clear_all_led();
 8000748:	f000 fd98 	bl	800127c <clear_all_led>
			status = MANUAL_GREEN_RED;
 800074c:	4b4a      	ldr	r3, [pc, #296]	@ (8000878 <fsm_auto_run+0x490>)
 800074e:	2220      	movs	r2, #32
 8000750:	601a      	str	r2, [r3, #0]
		}
		if(isButtonPressed(2) || isButtonLongPressed(2)){
 8000752:	2002      	movs	r0, #2
 8000754:	f7ff fcfa 	bl	800014c <isButtonPressed>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d105      	bne.n	800076a <fsm_auto_run+0x382>
 800075e:	2002      	movs	r0, #2
 8000760:	f7ff fd18 	bl	8000194 <isButtonLongPressed>
 8000764:	4603      	mov	r3, r0
 8000766:	2b00      	cmp	r3, #0
 8000768:	d074      	beq.n	8000854 <fsm_auto_run+0x46c>
			HAL_GPIO_TogglePin(SIGNAL_BUTTON_GPIO_Port, SIGNAL_BUTTON_Pin);
 800076a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800076e:	4843      	ldr	r0, [pc, #268]	@ (800087c <fsm_auto_run+0x494>)
 8000770:	f001 fd03 	bl	800217a <HAL_GPIO_TogglePin>
		}
		break;
 8000774:	e06e      	b.n	8000854 <fsm_auto_run+0x46c>
	case AUTO_RED_AMBER:
		auto_red_amber();
 8000776:	f000 fc53 	bl	8001020 <auto_red_amber>
		if(timers[0].flag == 1){
 800077a:	4b39      	ldr	r3, [pc, #228]	@ (8000860 <fsm_auto_run+0x478>)
 800077c:	685b      	ldr	r3, [r3, #4]
 800077e:	2b01      	cmp	r3, #1
 8000780:	d11d      	bne.n	80007be <fsm_auto_run+0x3d6>
			time_green = TIME_FOR_GREEN;
 8000782:	4b39      	ldr	r3, [pc, #228]	@ (8000868 <fsm_auto_run+0x480>)
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	4a3b      	ldr	r2, [pc, #236]	@ (8000874 <fsm_auto_run+0x48c>)
 8000788:	6013      	str	r3, [r2, #0]
			time_amber = TIME_FOR_RED - TIME_FOR_GREEN - 1;
 800078a:	4b36      	ldr	r3, [pc, #216]	@ (8000864 <fsm_auto_run+0x47c>)
 800078c:	681a      	ldr	r2, [r3, #0]
 800078e:	4b36      	ldr	r3, [pc, #216]	@ (8000868 <fsm_auto_run+0x480>)
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	1ad3      	subs	r3, r2, r3
 8000794:	3b01      	subs	r3, #1
 8000796:	4a35      	ldr	r2, [pc, #212]	@ (800086c <fsm_auto_run+0x484>)
 8000798:	6013      	str	r3, [r2, #0]
			time_red = TIME_FOR_RED;
 800079a:	4b32      	ldr	r3, [pc, #200]	@ (8000864 <fsm_auto_run+0x47c>)
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	4a34      	ldr	r2, [pc, #208]	@ (8000870 <fsm_auto_run+0x488>)
 80007a0:	6013      	str	r3, [r2, #0]
			setTimer(0, (time_green+1)*1000);
 80007a2:	4b34      	ldr	r3, [pc, #208]	@ (8000874 <fsm_auto_run+0x48c>)
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	3301      	adds	r3, #1
 80007a8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80007ac:	fb02 f303 	mul.w	r3, r2, r3
 80007b0:	4619      	mov	r1, r3
 80007b2:	2000      	movs	r0, #0
 80007b4:	f000 ffbe 	bl	8001734 <setTimer>
			status = AUTO_GREEN_RED;
 80007b8:	4b2f      	ldr	r3, [pc, #188]	@ (8000878 <fsm_auto_run+0x490>)
 80007ba:	2202      	movs	r2, #2
 80007bc:	601a      	str	r2, [r3, #0]
		}
		if(isButtonPressed(0) || isButtonLongPressed(0)){
 80007be:	2000      	movs	r0, #0
 80007c0:	f7ff fcc4 	bl	800014c <isButtonPressed>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d105      	bne.n	80007d6 <fsm_auto_run+0x3ee>
 80007ca:	2000      	movs	r0, #0
 80007cc:	f7ff fce2 	bl	8000194 <isButtonLongPressed>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d00e      	beq.n	80007f4 <fsm_auto_run+0x40c>
			HAL_GPIO_TogglePin(SIGNAL_BUTTON_GPIO_Port, SIGNAL_BUTTON_Pin);
 80007d6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80007da:	4828      	ldr	r0, [pc, #160]	@ (800087c <fsm_auto_run+0x494>)
 80007dc:	f001 fccd 	bl	800217a <HAL_GPIO_TogglePin>
			status = MODIFY_RED;
 80007e0:	4b25      	ldr	r3, [pc, #148]	@ (8000878 <fsm_auto_run+0x490>)
 80007e2:	2216      	movs	r2, #22
 80007e4:	601a      	str	r2, [r3, #0]
			clear_all_led();
 80007e6:	f000 fd49 	bl	800127c <clear_all_led>
			setTimer(3, 500); // timer for bliking led 2hz on mode modify
 80007ea:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 80007ee:	2003      	movs	r0, #3
 80007f0:	f000 ffa0 	bl	8001734 <setTimer>
		}
		if(isButtonPressed(1) || isButtonLongPressed(1)){
 80007f4:	2001      	movs	r0, #1
 80007f6:	f7ff fca9 	bl	800014c <isButtonPressed>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d105      	bne.n	800080c <fsm_auto_run+0x424>
 8000800:	2001      	movs	r0, #1
 8000802:	f7ff fcc7 	bl	8000194 <isButtonLongPressed>
 8000806:	4603      	mov	r3, r0
 8000808:	2b00      	cmp	r3, #0
 800080a:	d009      	beq.n	8000820 <fsm_auto_run+0x438>
			HAL_GPIO_TogglePin(SIGNAL_BUTTON_GPIO_Port, SIGNAL_BUTTON_Pin);
 800080c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000810:	481a      	ldr	r0, [pc, #104]	@ (800087c <fsm_auto_run+0x494>)
 8000812:	f001 fcb2 	bl	800217a <HAL_GPIO_TogglePin>
			clear_all_led();
 8000816:	f000 fd31 	bl	800127c <clear_all_led>
			status = MANUAL_GREEN_RED;
 800081a:	4b17      	ldr	r3, [pc, #92]	@ (8000878 <fsm_auto_run+0x490>)
 800081c:	2220      	movs	r2, #32
 800081e:	601a      	str	r2, [r3, #0]
		}
		if(isButtonPressed(2) || isButtonLongPressed(2)){
 8000820:	2002      	movs	r0, #2
 8000822:	f7ff fc93 	bl	800014c <isButtonPressed>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d105      	bne.n	8000838 <fsm_auto_run+0x450>
 800082c:	2002      	movs	r0, #2
 800082e:	f7ff fcb1 	bl	8000194 <isButtonLongPressed>
 8000832:	4603      	mov	r3, r0
 8000834:	2b00      	cmp	r3, #0
 8000836:	d00f      	beq.n	8000858 <fsm_auto_run+0x470>
			HAL_GPIO_TogglePin(SIGNAL_BUTTON_GPIO_Port, SIGNAL_BUTTON_Pin);
 8000838:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800083c:	480f      	ldr	r0, [pc, #60]	@ (800087c <fsm_auto_run+0x494>)
 800083e:	f001 fc9c 	bl	800217a <HAL_GPIO_TogglePin>
		}
		break;
 8000842:	e009      	b.n	8000858 <fsm_auto_run+0x470>
	default:
		break;
 8000844:	bf00      	nop
 8000846:	e008      	b.n	800085a <fsm_auto_run+0x472>
		break;
 8000848:	bf00      	nop
 800084a:	e006      	b.n	800085a <fsm_auto_run+0x472>
		break;
 800084c:	bf00      	nop
 800084e:	e004      	b.n	800085a <fsm_auto_run+0x472>
		break;
 8000850:	bf00      	nop
 8000852:	e002      	b.n	800085a <fsm_auto_run+0x472>
		break;
 8000854:	bf00      	nop
 8000856:	e000      	b.n	800085a <fsm_auto_run+0x472>
		break;
 8000858:	bf00      	nop
	}
}
 800085a:	bf00      	nop
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	20000208 	.word	0x20000208
 8000864:	2000007c 	.word	0x2000007c
 8000868:	20000078 	.word	0x20000078
 800086c:	2000011c 	.word	0x2000011c
 8000870:	20000114 	.word	0x20000114
 8000874:	20000118 	.word	0x20000118
 8000878:	20000100 	.word	0x20000100
 800087c:	40011000 	.word	0x40011000

08000880 <fsm_manual_run>:
 *  Created on: Dec 27, 2024
 *      Author: ADMIN
 */
#include "fsm_manual.h"

void fsm_manual_run(){
 8000880:	b580      	push	{r7, lr}
 8000882:	af00      	add	r7, sp, #0
	switch(status){
 8000884:	4b41      	ldr	r3, [pc, #260]	@ (800098c <fsm_manual_run+0x10c>)
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	2b20      	cmp	r3, #32
 800088a:	d002      	beq.n	8000892 <fsm_manual_run+0x12>
 800088c:	2b21      	cmp	r3, #33	@ 0x21
 800088e:	d03c      	beq.n	800090a <fsm_manual_run+0x8a>
			HAL_GPIO_TogglePin(SIGNAL_BUTTON_GPIO_Port, SIGNAL_BUTTON_Pin);
			status = INIT;
		}
		break;
	default:
		break;
 8000890:	e07a      	b.n	8000988 <fsm_manual_run+0x108>
		manual_green_red();
 8000892:	f000 fd29 	bl	80012e8 <manual_green_red>
		if(isButtonPressed(0) || isButtonLongPressed(0)){
 8000896:	2000      	movs	r0, #0
 8000898:	f7ff fc58 	bl	800014c <isButtonPressed>
 800089c:	4603      	mov	r3, r0
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d105      	bne.n	80008ae <fsm_manual_run+0x2e>
 80008a2:	2000      	movs	r0, #0
 80008a4:	f7ff fc76 	bl	8000194 <isButtonLongPressed>
 80008a8:	4603      	mov	r3, r0
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d004      	beq.n	80008b8 <fsm_manual_run+0x38>
			HAL_GPIO_TogglePin(SIGNAL_BUTTON_GPIO_Port, SIGNAL_BUTTON_Pin);
 80008ae:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80008b2:	4837      	ldr	r0, [pc, #220]	@ (8000990 <fsm_manual_run+0x110>)
 80008b4:	f001 fc61 	bl	800217a <HAL_GPIO_TogglePin>
		if(isButtonPressed(1) || isButtonLongPressed(1)){
 80008b8:	2001      	movs	r0, #1
 80008ba:	f7ff fc47 	bl	800014c <isButtonPressed>
 80008be:	4603      	mov	r3, r0
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d105      	bne.n	80008d0 <fsm_manual_run+0x50>
 80008c4:	2001      	movs	r0, #1
 80008c6:	f7ff fc65 	bl	8000194 <isButtonLongPressed>
 80008ca:	4603      	mov	r3, r0
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d007      	beq.n	80008e0 <fsm_manual_run+0x60>
			HAL_GPIO_TogglePin(SIGNAL_BUTTON_GPIO_Port, SIGNAL_BUTTON_Pin);
 80008d0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80008d4:	482e      	ldr	r0, [pc, #184]	@ (8000990 <fsm_manual_run+0x110>)
 80008d6:	f001 fc50 	bl	800217a <HAL_GPIO_TogglePin>
			status = MANUAL_RED_GREEN;
 80008da:	4b2c      	ldr	r3, [pc, #176]	@ (800098c <fsm_manual_run+0x10c>)
 80008dc:	2221      	movs	r2, #33	@ 0x21
 80008de:	601a      	str	r2, [r3, #0]
		if(isButtonPressed(2) || isButtonLongPressed(2)){
 80008e0:	2002      	movs	r0, #2
 80008e2:	f7ff fc33 	bl	800014c <isButtonPressed>
 80008e6:	4603      	mov	r3, r0
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d105      	bne.n	80008f8 <fsm_manual_run+0x78>
 80008ec:	2002      	movs	r0, #2
 80008ee:	f7ff fc51 	bl	8000194 <isButtonLongPressed>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d044      	beq.n	8000982 <fsm_manual_run+0x102>
			HAL_GPIO_TogglePin(SIGNAL_BUTTON_GPIO_Port, SIGNAL_BUTTON_Pin);
 80008f8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80008fc:	4824      	ldr	r0, [pc, #144]	@ (8000990 <fsm_manual_run+0x110>)
 80008fe:	f001 fc3c 	bl	800217a <HAL_GPIO_TogglePin>
			status = INIT;
 8000902:	4b22      	ldr	r3, [pc, #136]	@ (800098c <fsm_manual_run+0x10c>)
 8000904:	2201      	movs	r2, #1
 8000906:	601a      	str	r2, [r3, #0]
		break;
 8000908:	e03b      	b.n	8000982 <fsm_manual_run+0x102>
		manual_red_green();
 800090a:	f000 fd27 	bl	800135c <manual_red_green>
		if(isButtonPressed(0) || isButtonLongPressed(0)){
 800090e:	2000      	movs	r0, #0
 8000910:	f7ff fc1c 	bl	800014c <isButtonPressed>
 8000914:	4603      	mov	r3, r0
 8000916:	2b00      	cmp	r3, #0
 8000918:	d105      	bne.n	8000926 <fsm_manual_run+0xa6>
 800091a:	2000      	movs	r0, #0
 800091c:	f7ff fc3a 	bl	8000194 <isButtonLongPressed>
 8000920:	4603      	mov	r3, r0
 8000922:	2b00      	cmp	r3, #0
 8000924:	d004      	beq.n	8000930 <fsm_manual_run+0xb0>
			HAL_GPIO_TogglePin(SIGNAL_BUTTON_GPIO_Port, SIGNAL_BUTTON_Pin);
 8000926:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800092a:	4819      	ldr	r0, [pc, #100]	@ (8000990 <fsm_manual_run+0x110>)
 800092c:	f001 fc25 	bl	800217a <HAL_GPIO_TogglePin>
		if(isButtonPressed(1) || isButtonLongPressed(1)){
 8000930:	2001      	movs	r0, #1
 8000932:	f7ff fc0b 	bl	800014c <isButtonPressed>
 8000936:	4603      	mov	r3, r0
 8000938:	2b00      	cmp	r3, #0
 800093a:	d105      	bne.n	8000948 <fsm_manual_run+0xc8>
 800093c:	2001      	movs	r0, #1
 800093e:	f7ff fc29 	bl	8000194 <isButtonLongPressed>
 8000942:	4603      	mov	r3, r0
 8000944:	2b00      	cmp	r3, #0
 8000946:	d007      	beq.n	8000958 <fsm_manual_run+0xd8>
			HAL_GPIO_TogglePin(SIGNAL_BUTTON_GPIO_Port, SIGNAL_BUTTON_Pin);
 8000948:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800094c:	4810      	ldr	r0, [pc, #64]	@ (8000990 <fsm_manual_run+0x110>)
 800094e:	f001 fc14 	bl	800217a <HAL_GPIO_TogglePin>
			status = MANUAL_GREEN_RED;
 8000952:	4b0e      	ldr	r3, [pc, #56]	@ (800098c <fsm_manual_run+0x10c>)
 8000954:	2220      	movs	r2, #32
 8000956:	601a      	str	r2, [r3, #0]
		if(isButtonPressed(2) || isButtonLongPressed(2)){
 8000958:	2002      	movs	r0, #2
 800095a:	f7ff fbf7 	bl	800014c <isButtonPressed>
 800095e:	4603      	mov	r3, r0
 8000960:	2b00      	cmp	r3, #0
 8000962:	d105      	bne.n	8000970 <fsm_manual_run+0xf0>
 8000964:	2002      	movs	r0, #2
 8000966:	f7ff fc15 	bl	8000194 <isButtonLongPressed>
 800096a:	4603      	mov	r3, r0
 800096c:	2b00      	cmp	r3, #0
 800096e:	d00a      	beq.n	8000986 <fsm_manual_run+0x106>
			HAL_GPIO_TogglePin(SIGNAL_BUTTON_GPIO_Port, SIGNAL_BUTTON_Pin);
 8000970:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000974:	4806      	ldr	r0, [pc, #24]	@ (8000990 <fsm_manual_run+0x110>)
 8000976:	f001 fc00 	bl	800217a <HAL_GPIO_TogglePin>
			status = INIT;
 800097a:	4b04      	ldr	r3, [pc, #16]	@ (800098c <fsm_manual_run+0x10c>)
 800097c:	2201      	movs	r2, #1
 800097e:	601a      	str	r2, [r3, #0]
		break;
 8000980:	e001      	b.n	8000986 <fsm_manual_run+0x106>
		break;
 8000982:	bf00      	nop
 8000984:	e000      	b.n	8000988 <fsm_manual_run+0x108>
		break;
 8000986:	bf00      	nop
	}
}
 8000988:	bf00      	nop
 800098a:	bd80      	pop	{r7, pc}
 800098c:	20000100 	.word	0x20000100
 8000990:	40011000 	.word	0x40011000

08000994 <fsm_modify_run>:
extern int TIME_FOR_RED;
extern int TIME_FOR_AMBER;
extern int time_green;
extern int time_red;
extern int time_amber;
void fsm_modify_run(){
 8000994:	b580      	push	{r7, lr}
 8000996:	af00      	add	r7, sp, #0
	switch(status){
 8000998:	4b8b      	ldr	r3, [pc, #556]	@ (8000bc8 <fsm_modify_run+0x234>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	2b18      	cmp	r3, #24
 800099e:	f000 80b7 	beq.w	8000b10 <fsm_modify_run+0x17c>
 80009a2:	2b18      	cmp	r3, #24
 80009a4:	f300 8106 	bgt.w	8000bb4 <fsm_modify_run+0x220>
 80009a8:	2b16      	cmp	r3, #22
 80009aa:	d002      	beq.n	80009b2 <fsm_modify_run+0x1e>
 80009ac:	2b17      	cmp	r3, #23
 80009ae:	d058      	beq.n	8000a62 <fsm_modify_run+0xce>
			newTime = 0;
			status = INIT;
		}
		break;
	default:
		break;
 80009b0:	e100      	b.n	8000bb4 <fsm_modify_run+0x220>
		modify_red_led();
 80009b2:	f000 fb8b 	bl	80010cc <modify_red_led>
		if(isButtonPressed(0) || isButtonLongPressed(0)){
 80009b6:	2000      	movs	r0, #0
 80009b8:	f7ff fbc8 	bl	800014c <isButtonPressed>
 80009bc:	4603      	mov	r3, r0
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d105      	bne.n	80009ce <fsm_modify_run+0x3a>
 80009c2:	2000      	movs	r0, #0
 80009c4:	f7ff fbe6 	bl	8000194 <isButtonLongPressed>
 80009c8:	4603      	mov	r3, r0
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d00f      	beq.n	80009ee <fsm_modify_run+0x5a>
			HAL_GPIO_TogglePin(SIGNAL_BUTTON_GPIO_Port, SIGNAL_BUTTON_Pin);
 80009ce:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80009d2:	487e      	ldr	r0, [pc, #504]	@ (8000bcc <fsm_modify_run+0x238>)
 80009d4:	f001 fbd1 	bl	800217a <HAL_GPIO_TogglePin>
			status = MODIFY_GREEN;
 80009d8:	4b7b      	ldr	r3, [pc, #492]	@ (8000bc8 <fsm_modify_run+0x234>)
 80009da:	2217      	movs	r2, #23
 80009dc:	601a      	str	r2, [r3, #0]
			setTimer(3, 500); // timer for bliking led 2hz on mode modify
 80009de:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 80009e2:	2003      	movs	r0, #3
 80009e4:	f000 fea6 	bl	8001734 <setTimer>
			newTime = 0;
 80009e8:	4b79      	ldr	r3, [pc, #484]	@ (8000bd0 <fsm_modify_run+0x23c>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	601a      	str	r2, [r3, #0]
		if(isButtonPressed(1) || isButtonLongPressed(1)){
 80009ee:	2001      	movs	r0, #1
 80009f0:	f7ff fbac 	bl	800014c <isButtonPressed>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d105      	bne.n	8000a06 <fsm_modify_run+0x72>
 80009fa:	2001      	movs	r0, #1
 80009fc:	f7ff fbca 	bl	8000194 <isButtonLongPressed>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d010      	beq.n	8000a28 <fsm_modify_run+0x94>
			HAL_GPIO_TogglePin(SIGNAL_BUTTON_GPIO_Port, SIGNAL_BUTTON_Pin);
 8000a06:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000a0a:	4870      	ldr	r0, [pc, #448]	@ (8000bcc <fsm_modify_run+0x238>)
 8000a0c:	f001 fbb5 	bl	800217a <HAL_GPIO_TogglePin>
			newTime++;
 8000a10:	4b6f      	ldr	r3, [pc, #444]	@ (8000bd0 <fsm_modify_run+0x23c>)
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	3301      	adds	r3, #1
 8000a16:	4a6e      	ldr	r2, [pc, #440]	@ (8000bd0 <fsm_modify_run+0x23c>)
 8000a18:	6013      	str	r3, [r2, #0]
			if(newTime > 99){
 8000a1a:	4b6d      	ldr	r3, [pc, #436]	@ (8000bd0 <fsm_modify_run+0x23c>)
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	2b63      	cmp	r3, #99	@ 0x63
 8000a20:	dd02      	ble.n	8000a28 <fsm_modify_run+0x94>
				newTime = 0;
 8000a22:	4b6b      	ldr	r3, [pc, #428]	@ (8000bd0 <fsm_modify_run+0x23c>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	601a      	str	r2, [r3, #0]
		if(isButtonPressed(2) || isButtonLongPressed(2)){
 8000a28:	2002      	movs	r0, #2
 8000a2a:	f7ff fb8f 	bl	800014c <isButtonPressed>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d106      	bne.n	8000a42 <fsm_modify_run+0xae>
 8000a34:	2002      	movs	r0, #2
 8000a36:	f7ff fbad 	bl	8000194 <isButtonLongPressed>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	f000 80bb 	beq.w	8000bb8 <fsm_modify_run+0x224>
			HAL_GPIO_TogglePin(SIGNAL_BUTTON_GPIO_Port, SIGNAL_BUTTON_Pin);
 8000a42:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000a46:	4861      	ldr	r0, [pc, #388]	@ (8000bcc <fsm_modify_run+0x238>)
 8000a48:	f001 fb97 	bl	800217a <HAL_GPIO_TogglePin>
			TIME_FOR_RED = newTime;
 8000a4c:	4b60      	ldr	r3, [pc, #384]	@ (8000bd0 <fsm_modify_run+0x23c>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	4a60      	ldr	r2, [pc, #384]	@ (8000bd4 <fsm_modify_run+0x240>)
 8000a52:	6013      	str	r3, [r2, #0]
			newTime = 0;
 8000a54:	4b5e      	ldr	r3, [pc, #376]	@ (8000bd0 <fsm_modify_run+0x23c>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	601a      	str	r2, [r3, #0]
			status = MODIFY_GREEN;
 8000a5a:	4b5b      	ldr	r3, [pc, #364]	@ (8000bc8 <fsm_modify_run+0x234>)
 8000a5c:	2217      	movs	r2, #23
 8000a5e:	601a      	str	r2, [r3, #0]
		break;
 8000a60:	e0aa      	b.n	8000bb8 <fsm_modify_run+0x224>
		modify_green_led();
 8000a62:	f000 fb7b 	bl	800115c <modify_green_led>
		if(isButtonPressed(0) || isButtonLongPressed(0)){
 8000a66:	2000      	movs	r0, #0
 8000a68:	f7ff fb70 	bl	800014c <isButtonPressed>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d105      	bne.n	8000a7e <fsm_modify_run+0xea>
 8000a72:	2000      	movs	r0, #0
 8000a74:	f7ff fb8e 	bl	8000194 <isButtonLongPressed>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d00f      	beq.n	8000a9e <fsm_modify_run+0x10a>
			HAL_GPIO_TogglePin(SIGNAL_BUTTON_GPIO_Port, SIGNAL_BUTTON_Pin);
 8000a7e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000a82:	4852      	ldr	r0, [pc, #328]	@ (8000bcc <fsm_modify_run+0x238>)
 8000a84:	f001 fb79 	bl	800217a <HAL_GPIO_TogglePin>
			status = MODIFY_AMBER;
 8000a88:	4b4f      	ldr	r3, [pc, #316]	@ (8000bc8 <fsm_modify_run+0x234>)
 8000a8a:	2218      	movs	r2, #24
 8000a8c:	601a      	str	r2, [r3, #0]
			setTimer(3, 500); // timer for bliking led 2hz on mode modify
 8000a8e:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8000a92:	2003      	movs	r0, #3
 8000a94:	f000 fe4e 	bl	8001734 <setTimer>
			newTime = 0;
 8000a98:	4b4d      	ldr	r3, [pc, #308]	@ (8000bd0 <fsm_modify_run+0x23c>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	601a      	str	r2, [r3, #0]
		if(isButtonPressed(1) || isButtonLongPressed(1)){
 8000a9e:	2001      	movs	r0, #1
 8000aa0:	f7ff fb54 	bl	800014c <isButtonPressed>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d105      	bne.n	8000ab6 <fsm_modify_run+0x122>
 8000aaa:	2001      	movs	r0, #1
 8000aac:	f7ff fb72 	bl	8000194 <isButtonLongPressed>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d010      	beq.n	8000ad8 <fsm_modify_run+0x144>
			HAL_GPIO_TogglePin(SIGNAL_BUTTON_GPIO_Port, SIGNAL_BUTTON_Pin);
 8000ab6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000aba:	4844      	ldr	r0, [pc, #272]	@ (8000bcc <fsm_modify_run+0x238>)
 8000abc:	f001 fb5d 	bl	800217a <HAL_GPIO_TogglePin>
			newTime++;
 8000ac0:	4b43      	ldr	r3, [pc, #268]	@ (8000bd0 <fsm_modify_run+0x23c>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	3301      	adds	r3, #1
 8000ac6:	4a42      	ldr	r2, [pc, #264]	@ (8000bd0 <fsm_modify_run+0x23c>)
 8000ac8:	6013      	str	r3, [r2, #0]
			if(newTime > 99){
 8000aca:	4b41      	ldr	r3, [pc, #260]	@ (8000bd0 <fsm_modify_run+0x23c>)
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	2b63      	cmp	r3, #99	@ 0x63
 8000ad0:	dd02      	ble.n	8000ad8 <fsm_modify_run+0x144>
				newTime = 0;
 8000ad2:	4b3f      	ldr	r3, [pc, #252]	@ (8000bd0 <fsm_modify_run+0x23c>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	601a      	str	r2, [r3, #0]
		if(isButtonPressed(2) || isButtonLongPressed(2)){
 8000ad8:	2002      	movs	r0, #2
 8000ada:	f7ff fb37 	bl	800014c <isButtonPressed>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d105      	bne.n	8000af0 <fsm_modify_run+0x15c>
 8000ae4:	2002      	movs	r0, #2
 8000ae6:	f7ff fb55 	bl	8000194 <isButtonLongPressed>
 8000aea:	4603      	mov	r3, r0
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d065      	beq.n	8000bbc <fsm_modify_run+0x228>
			HAL_GPIO_TogglePin(SIGNAL_BUTTON_GPIO_Port, SIGNAL_BUTTON_Pin);
 8000af0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000af4:	4835      	ldr	r0, [pc, #212]	@ (8000bcc <fsm_modify_run+0x238>)
 8000af6:	f001 fb40 	bl	800217a <HAL_GPIO_TogglePin>
			TIME_FOR_GREEN = newTime;
 8000afa:	4b35      	ldr	r3, [pc, #212]	@ (8000bd0 <fsm_modify_run+0x23c>)
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	4a36      	ldr	r2, [pc, #216]	@ (8000bd8 <fsm_modify_run+0x244>)
 8000b00:	6013      	str	r3, [r2, #0]
			newTime = 0;
 8000b02:	4b33      	ldr	r3, [pc, #204]	@ (8000bd0 <fsm_modify_run+0x23c>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	601a      	str	r2, [r3, #0]
			status = MODIFY_AMBER;
 8000b08:	4b2f      	ldr	r3, [pc, #188]	@ (8000bc8 <fsm_modify_run+0x234>)
 8000b0a:	2218      	movs	r2, #24
 8000b0c:	601a      	str	r2, [r3, #0]
		break;
 8000b0e:	e055      	b.n	8000bbc <fsm_modify_run+0x228>
		modify_amber_led();
 8000b10:	f000 fb6c 	bl	80011ec <modify_amber_led>
		if(isButtonPressed(0) || isButtonLongPressed(0)){
 8000b14:	2000      	movs	r0, #0
 8000b16:	f7ff fb19 	bl	800014c <isButtonPressed>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d105      	bne.n	8000b2c <fsm_modify_run+0x198>
 8000b20:	2000      	movs	r0, #0
 8000b22:	f7ff fb37 	bl	8000194 <isButtonLongPressed>
 8000b26:	4603      	mov	r3, r0
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d00a      	beq.n	8000b42 <fsm_modify_run+0x1ae>
			HAL_GPIO_TogglePin(SIGNAL_BUTTON_GPIO_Port, SIGNAL_BUTTON_Pin);
 8000b2c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000b30:	4826      	ldr	r0, [pc, #152]	@ (8000bcc <fsm_modify_run+0x238>)
 8000b32:	f001 fb22 	bl	800217a <HAL_GPIO_TogglePin>
			status = INIT;
 8000b36:	4b24      	ldr	r3, [pc, #144]	@ (8000bc8 <fsm_modify_run+0x234>)
 8000b38:	2201      	movs	r2, #1
 8000b3a:	601a      	str	r2, [r3, #0]
			newTime = 0;
 8000b3c:	4b24      	ldr	r3, [pc, #144]	@ (8000bd0 <fsm_modify_run+0x23c>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	601a      	str	r2, [r3, #0]
		if(isButtonPressed(1) || isButtonLongPressed(1)){
 8000b42:	2001      	movs	r0, #1
 8000b44:	f7ff fb02 	bl	800014c <isButtonPressed>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d105      	bne.n	8000b5a <fsm_modify_run+0x1c6>
 8000b4e:	2001      	movs	r0, #1
 8000b50:	f7ff fb20 	bl	8000194 <isButtonLongPressed>
 8000b54:	4603      	mov	r3, r0
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d010      	beq.n	8000b7c <fsm_modify_run+0x1e8>
			HAL_GPIO_TogglePin(SIGNAL_BUTTON_GPIO_Port, SIGNAL_BUTTON_Pin);
 8000b5a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000b5e:	481b      	ldr	r0, [pc, #108]	@ (8000bcc <fsm_modify_run+0x238>)
 8000b60:	f001 fb0b 	bl	800217a <HAL_GPIO_TogglePin>
			newTime++;
 8000b64:	4b1a      	ldr	r3, [pc, #104]	@ (8000bd0 <fsm_modify_run+0x23c>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	3301      	adds	r3, #1
 8000b6a:	4a19      	ldr	r2, [pc, #100]	@ (8000bd0 <fsm_modify_run+0x23c>)
 8000b6c:	6013      	str	r3, [r2, #0]
			if(newTime > 99){
 8000b6e:	4b18      	ldr	r3, [pc, #96]	@ (8000bd0 <fsm_modify_run+0x23c>)
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	2b63      	cmp	r3, #99	@ 0x63
 8000b74:	dd02      	ble.n	8000b7c <fsm_modify_run+0x1e8>
				newTime = 0;
 8000b76:	4b16      	ldr	r3, [pc, #88]	@ (8000bd0 <fsm_modify_run+0x23c>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	601a      	str	r2, [r3, #0]
		if(isButtonPressed(2) || isButtonLongPressed(2)){
 8000b7c:	2002      	movs	r0, #2
 8000b7e:	f7ff fae5 	bl	800014c <isButtonPressed>
 8000b82:	4603      	mov	r3, r0
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d105      	bne.n	8000b94 <fsm_modify_run+0x200>
 8000b88:	2002      	movs	r0, #2
 8000b8a:	f7ff fb03 	bl	8000194 <isButtonLongPressed>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d015      	beq.n	8000bc0 <fsm_modify_run+0x22c>
			HAL_GPIO_TogglePin(SIGNAL_BUTTON_GPIO_Port, SIGNAL_BUTTON_Pin);
 8000b94:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000b98:	480c      	ldr	r0, [pc, #48]	@ (8000bcc <fsm_modify_run+0x238>)
 8000b9a:	f001 faee 	bl	800217a <HAL_GPIO_TogglePin>
			TIME_FOR_AMBER = newTime;
 8000b9e:	4b0c      	ldr	r3, [pc, #48]	@ (8000bd0 <fsm_modify_run+0x23c>)
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	4a0e      	ldr	r2, [pc, #56]	@ (8000bdc <fsm_modify_run+0x248>)
 8000ba4:	6013      	str	r3, [r2, #0]
			newTime = 0;
 8000ba6:	4b0a      	ldr	r3, [pc, #40]	@ (8000bd0 <fsm_modify_run+0x23c>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	601a      	str	r2, [r3, #0]
			status = INIT;
 8000bac:	4b06      	ldr	r3, [pc, #24]	@ (8000bc8 <fsm_modify_run+0x234>)
 8000bae:	2201      	movs	r2, #1
 8000bb0:	601a      	str	r2, [r3, #0]
		break;
 8000bb2:	e005      	b.n	8000bc0 <fsm_modify_run+0x22c>
		break;
 8000bb4:	bf00      	nop
 8000bb6:	e004      	b.n	8000bc2 <fsm_modify_run+0x22e>
		break;
 8000bb8:	bf00      	nop
 8000bba:	e002      	b.n	8000bc2 <fsm_modify_run+0x22e>
		break;
 8000bbc:	bf00      	nop
 8000bbe:	e000      	b.n	8000bc2 <fsm_modify_run+0x22e>
		break;
 8000bc0:	bf00      	nop
	}
}
 8000bc2:	bf00      	nop
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	20000100 	.word	0x20000100
 8000bcc:	40011000 	.word	0x40011000
 8000bd0:	20000120 	.word	0x20000120
 8000bd4:	2000007c 	.word	0x2000007c
 8000bd8:	20000078 	.word	0x20000078
 8000bdc:	20000080 	.word	0x20000080

08000be0 <display_lcd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD ( 0x21 << 1 ) // change this according to your setup

char buffer[16] = {0};
void display_lcd(int time1, int time2){
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b082      	sub	sp, #8
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
 8000be8:	6039      	str	r1, [r7, #0]
	snprintf(buffer, sizeof(buffer), "%02d", time1);
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	4a0e      	ldr	r2, [pc, #56]	@ (8000c28 <display_lcd+0x48>)
 8000bee:	2110      	movs	r1, #16
 8000bf0:	480e      	ldr	r0, [pc, #56]	@ (8000c2c <display_lcd+0x4c>)
 8000bf2:	f003 f857 	bl	8003ca4 <sniprintf>
	lcd_goto_XY(0, 0);
 8000bf6:	2100      	movs	r1, #0
 8000bf8:	2000      	movs	r0, #0
 8000bfa:	f000 f8bc 	bl	8000d76 <lcd_goto_XY>
	lcd_send_string(buffer);
 8000bfe:	480b      	ldr	r0, [pc, #44]	@ (8000c2c <display_lcd+0x4c>)
 8000c00:	f000 f8a4 	bl	8000d4c <lcd_send_string>
	snprintf(buffer, sizeof(buffer), "%02d", time2);
 8000c04:	683b      	ldr	r3, [r7, #0]
 8000c06:	4a08      	ldr	r2, [pc, #32]	@ (8000c28 <display_lcd+0x48>)
 8000c08:	2110      	movs	r1, #16
 8000c0a:	4808      	ldr	r0, [pc, #32]	@ (8000c2c <display_lcd+0x4c>)
 8000c0c:	f003 f84a 	bl	8003ca4 <sniprintf>
	lcd_goto_XY(1, 0);
 8000c10:	2100      	movs	r1, #0
 8000c12:	2001      	movs	r0, #1
 8000c14:	f000 f8af 	bl	8000d76 <lcd_goto_XY>
	lcd_send_string(buffer);
 8000c18:	4804      	ldr	r0, [pc, #16]	@ (8000c2c <display_lcd+0x4c>)
 8000c1a:	f000 f897 	bl	8000d4c <lcd_send_string>
}
 8000c1e:	bf00      	nop
 8000c20:	3708      	adds	r7, #8
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	08004644 	.word	0x08004644
 8000c2c:	20000104 	.word	0x20000104

08000c30 <lcd_send_cmd>:

void lcd_send_cmd (char cmd)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b086      	sub	sp, #24
 8000c34:	af02      	add	r7, sp, #8
 8000c36:	4603      	mov	r3, r0
 8000c38:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000c3a:	79fb      	ldrb	r3, [r7, #7]
 8000c3c:	f023 030f 	bic.w	r3, r3, #15
 8000c40:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8000c42:	79fb      	ldrb	r3, [r7, #7]
 8000c44:	011b      	lsls	r3, r3, #4
 8000c46:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000c48:	7bfb      	ldrb	r3, [r7, #15]
 8000c4a:	f043 030c 	orr.w	r3, r3, #12
 8000c4e:	b2db      	uxtb	r3, r3
 8000c50:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8000c52:	7bfb      	ldrb	r3, [r7, #15]
 8000c54:	f043 0308 	orr.w	r3, r3, #8
 8000c58:	b2db      	uxtb	r3, r3
 8000c5a:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000c5c:	7bbb      	ldrb	r3, [r7, #14]
 8000c5e:	f043 030c 	orr.w	r3, r3, #12
 8000c62:	b2db      	uxtb	r3, r3
 8000c64:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8000c66:	7bbb      	ldrb	r3, [r7, #14]
 8000c68:	f043 0308 	orr.w	r3, r3, #8
 8000c6c:	b2db      	uxtb	r3, r3
 8000c6e:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000c70:	f107 0208 	add.w	r2, r7, #8
 8000c74:	2364      	movs	r3, #100	@ 0x64
 8000c76:	9300      	str	r3, [sp, #0]
 8000c78:	2304      	movs	r3, #4
 8000c7a:	2142      	movs	r1, #66	@ 0x42
 8000c7c:	4803      	ldr	r0, [pc, #12]	@ (8000c8c <lcd_send_cmd+0x5c>)
 8000c7e:	f001 fbd9 	bl	8002434 <HAL_I2C_Master_Transmit>
}
 8000c82:	bf00      	nop
 8000c84:	3710      	adds	r7, #16
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	20000124 	.word	0x20000124

08000c90 <lcd_send_data>:

void lcd_send_data (char data)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b086      	sub	sp, #24
 8000c94:	af02      	add	r7, sp, #8
 8000c96:	4603      	mov	r3, r0
 8000c98:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8000c9a:	79fb      	ldrb	r3, [r7, #7]
 8000c9c:	f023 030f 	bic.w	r3, r3, #15
 8000ca0:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8000ca2:	79fb      	ldrb	r3, [r7, #7]
 8000ca4:	011b      	lsls	r3, r3, #4
 8000ca6:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8000ca8:	7bfb      	ldrb	r3, [r7, #15]
 8000caa:	f043 030d 	orr.w	r3, r3, #13
 8000cae:	b2db      	uxtb	r3, r3
 8000cb0:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8000cb2:	7bfb      	ldrb	r3, [r7, #15]
 8000cb4:	f043 0309 	orr.w	r3, r3, #9
 8000cb8:	b2db      	uxtb	r3, r3
 8000cba:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8000cbc:	7bbb      	ldrb	r3, [r7, #14]
 8000cbe:	f043 030d 	orr.w	r3, r3, #13
 8000cc2:	b2db      	uxtb	r3, r3
 8000cc4:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8000cc6:	7bbb      	ldrb	r3, [r7, #14]
 8000cc8:	f043 0309 	orr.w	r3, r3, #9
 8000ccc:	b2db      	uxtb	r3, r3
 8000cce:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000cd0:	f107 0208 	add.w	r2, r7, #8
 8000cd4:	2364      	movs	r3, #100	@ 0x64
 8000cd6:	9300      	str	r3, [sp, #0]
 8000cd8:	2304      	movs	r3, #4
 8000cda:	2142      	movs	r1, #66	@ 0x42
 8000cdc:	4803      	ldr	r0, [pc, #12]	@ (8000cec <lcd_send_data+0x5c>)
 8000cde:	f001 fba9 	bl	8002434 <HAL_I2C_Master_Transmit>
}
 8000ce2:	bf00      	nop
 8000ce4:	3710      	adds	r7, #16
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	20000124 	.word	0x20000124

08000cf0 <lcd_init>:

void lcd_init (void) {
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x33); /* set 4-bits interface */
 8000cf4:	2033      	movs	r0, #51	@ 0x33
 8000cf6:	f7ff ff9b 	bl	8000c30 <lcd_send_cmd>
	lcd_send_cmd (0x32);
 8000cfa:	2032      	movs	r0, #50	@ 0x32
 8000cfc:	f7ff ff98 	bl	8000c30 <lcd_send_cmd>
	HAL_Delay(50);
 8000d00:	2032      	movs	r0, #50	@ 0x32
 8000d02:	f000 ff55 	bl	8001bb0 <HAL_Delay>
	lcd_send_cmd (0x28); /* start to set LCD function */
 8000d06:	2028      	movs	r0, #40	@ 0x28
 8000d08:	f7ff ff92 	bl	8000c30 <lcd_send_cmd>
	HAL_Delay(50);
 8000d0c:	2032      	movs	r0, #50	@ 0x32
 8000d0e:	f000 ff4f 	bl	8001bb0 <HAL_Delay>
	lcd_send_cmd (0x01); /* clear display */
 8000d12:	2001      	movs	r0, #1
 8000d14:	f7ff ff8c 	bl	8000c30 <lcd_send_cmd>
	HAL_Delay(50);
 8000d18:	2032      	movs	r0, #50	@ 0x32
 8000d1a:	f000 ff49 	bl	8001bb0 <HAL_Delay>
	lcd_send_cmd (0x06); /* set entry mode */
 8000d1e:	2006      	movs	r0, #6
 8000d20:	f7ff ff86 	bl	8000c30 <lcd_send_cmd>
	HAL_Delay(50);
 8000d24:	2032      	movs	r0, #50	@ 0x32
 8000d26:	f000 ff43 	bl	8001bb0 <HAL_Delay>
	lcd_send_cmd (0x0c); /* set display to on */
 8000d2a:	200c      	movs	r0, #12
 8000d2c:	f7ff ff80 	bl	8000c30 <lcd_send_cmd>
	HAL_Delay(50);
 8000d30:	2032      	movs	r0, #50	@ 0x32
 8000d32:	f000 ff3d 	bl	8001bb0 <HAL_Delay>
	lcd_send_cmd (0x02); /* move cursor to home and set data address to 0 */
 8000d36:	2002      	movs	r0, #2
 8000d38:	f7ff ff7a 	bl	8000c30 <lcd_send_cmd>
	HAL_Delay(50);
 8000d3c:	2032      	movs	r0, #50	@ 0x32
 8000d3e:	f000 ff37 	bl	8001bb0 <HAL_Delay>
	lcd_send_cmd (0x80);
 8000d42:	2080      	movs	r0, #128	@ 0x80
 8000d44:	f7ff ff74 	bl	8000c30 <lcd_send_cmd>
}
 8000d48:	bf00      	nop
 8000d4a:	bd80      	pop	{r7, pc}

08000d4c <lcd_send_string>:

void lcd_send_string (char *str)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b082      	sub	sp, #8
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8000d54:	e006      	b.n	8000d64 <lcd_send_string+0x18>
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	1c5a      	adds	r2, r3, #1
 8000d5a:	607a      	str	r2, [r7, #4]
 8000d5c:	781b      	ldrb	r3, [r3, #0]
 8000d5e:	4618      	mov	r0, r3
 8000d60:	f7ff ff96 	bl	8000c90 <lcd_send_data>
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	781b      	ldrb	r3, [r3, #0]
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d1f4      	bne.n	8000d56 <lcd_send_string+0xa>
}
 8000d6c:	bf00      	nop
 8000d6e:	bf00      	nop
 8000d70:	3708      	adds	r7, #8
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}

08000d76 <lcd_goto_XY>:
{
	lcd_send_cmd (0x01); //clear display
}

void lcd_goto_XY (int row, int col)
{
 8000d76:	b580      	push	{r7, lr}
 8000d78:	b084      	sub	sp, #16
 8000d7a:	af00      	add	r7, sp, #0
 8000d7c:	6078      	str	r0, [r7, #4]
 8000d7e:	6039      	str	r1, [r7, #0]
	uint8_t pos_Addr;
	if(row == 1)
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	2b01      	cmp	r3, #1
 8000d84:	d108      	bne.n	8000d98 <lcd_goto_XY+0x22>
	{
		pos_Addr = 0x80 + row - 1 + col;
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	b2da      	uxtb	r2, r3
 8000d8a:	683b      	ldr	r3, [r7, #0]
 8000d8c:	b2db      	uxtb	r3, r3
 8000d8e:	4413      	add	r3, r2
 8000d90:	b2db      	uxtb	r3, r3
 8000d92:	337f      	adds	r3, #127	@ 0x7f
 8000d94:	73fb      	strb	r3, [r7, #15]
 8000d96:	e008      	b.n	8000daa <lcd_goto_XY+0x34>
	}
	else
	{
		pos_Addr = 0x80 | (0x40 + col);
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	b2db      	uxtb	r3, r3
 8000d9c:	3340      	adds	r3, #64	@ 0x40
 8000d9e:	b2db      	uxtb	r3, r3
 8000da0:	b25b      	sxtb	r3, r3
 8000da2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000da6:	b25b      	sxtb	r3, r3
 8000da8:	73fb      	strb	r3, [r7, #15]
	}
	lcd_send_cmd(pos_Addr);
 8000daa:	7bfb      	ldrb	r3, [r7, #15]
 8000dac:	4618      	mov	r0, r3
 8000dae:	f7ff ff3f 	bl	8000c30 <lcd_send_cmd>
}
 8000db2:	bf00      	nop
 8000db4:	3710      	adds	r7, #16
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}
	...

08000dbc <init>:
int time_red;
int time_green;
int time_amber;
int newTime = 0;

void init(){
 8000dbc:	b480      	push	{r7}
 8000dbe:	af00      	add	r7, sp, #0
	// HAL_GPIO_TogglePin(GPIOA, SIGNAL_Pin);
	if(TIME_FOR_GREEN < TIME_FOR_RED){
 8000dc0:	4b11      	ldr	r3, [pc, #68]	@ (8000e08 <init+0x4c>)
 8000dc2:	681a      	ldr	r2, [r3, #0]
 8000dc4:	4b11      	ldr	r3, [pc, #68]	@ (8000e0c <init+0x50>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	429a      	cmp	r2, r3
 8000dca:	da10      	bge.n	8000dee <init+0x32>
		 time_red = TIME_FOR_RED;
 8000dcc:	4b0f      	ldr	r3, [pc, #60]	@ (8000e0c <init+0x50>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	4a0f      	ldr	r2, [pc, #60]	@ (8000e10 <init+0x54>)
 8000dd2:	6013      	str	r3, [r2, #0]
		 time_green = TIME_FOR_GREEN;
 8000dd4:	4b0c      	ldr	r3, [pc, #48]	@ (8000e08 <init+0x4c>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	4a0e      	ldr	r2, [pc, #56]	@ (8000e14 <init+0x58>)
 8000dda:	6013      	str	r3, [r2, #0]
		 time_amber = TIME_FOR_RED - TIME_FOR_GREEN - 1;
 8000ddc:	4b0b      	ldr	r3, [pc, #44]	@ (8000e0c <init+0x50>)
 8000dde:	681a      	ldr	r2, [r3, #0]
 8000de0:	4b09      	ldr	r3, [pc, #36]	@ (8000e08 <init+0x4c>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	1ad3      	subs	r3, r2, r3
 8000de6:	3b01      	subs	r3, #1
 8000de8:	4a0b      	ldr	r2, [pc, #44]	@ (8000e18 <init+0x5c>)
 8000dea:	6013      	str	r3, [r2, #0]
	else {
	 time_red = 5;
	 time_green = 3;
	 time_amber = 2;
	}
}
 8000dec:	e008      	b.n	8000e00 <init+0x44>
	 time_red = 5;
 8000dee:	4b08      	ldr	r3, [pc, #32]	@ (8000e10 <init+0x54>)
 8000df0:	2205      	movs	r2, #5
 8000df2:	601a      	str	r2, [r3, #0]
	 time_green = 3;
 8000df4:	4b07      	ldr	r3, [pc, #28]	@ (8000e14 <init+0x58>)
 8000df6:	2203      	movs	r2, #3
 8000df8:	601a      	str	r2, [r3, #0]
	 time_amber = 2;
 8000dfa:	4b07      	ldr	r3, [pc, #28]	@ (8000e18 <init+0x5c>)
 8000dfc:	2202      	movs	r2, #2
 8000dfe:	601a      	str	r2, [r3, #0]
}
 8000e00:	bf00      	nop
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bc80      	pop	{r7}
 8000e06:	4770      	bx	lr
 8000e08:	20000078 	.word	0x20000078
 8000e0c:	2000007c 	.word	0x2000007c
 8000e10:	20000114 	.word	0x20000114
 8000e14:	20000118 	.word	0x20000118
 8000e18:	2000011c 	.word	0x2000011c

08000e1c <auto_green_red>:
void auto_green_red(){
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(LED0_A_GPIO_Port, LED0_A_Pin, RESET);
 8000e20:	2200      	movs	r2, #0
 8000e22:	2120      	movs	r1, #32
 8000e24:	4822      	ldr	r0, [pc, #136]	@ (8000eb0 <auto_green_red+0x94>)
 8000e26:	f001 f990 	bl	800214a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED0_B_GPIO_Port, LED0_B_Pin, SET);
 8000e2a:	2201      	movs	r2, #1
 8000e2c:	2108      	movs	r1, #8
 8000e2e:	4820      	ldr	r0, [pc, #128]	@ (8000eb0 <auto_green_red+0x94>)
 8000e30:	f001 f98b 	bl	800214a <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LED2_A_GPIO_Port, LED2_A_Pin, RESET);
 8000e34:	2200      	movs	r2, #0
 8000e36:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000e3a:	481e      	ldr	r0, [pc, #120]	@ (8000eb4 <auto_green_red+0x98>)
 8000e3c:	f001 f985 	bl	800214a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_B_GPIO_Port, LED2_B_Pin, SET);
 8000e40:	2201      	movs	r2, #1
 8000e42:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000e46:	481b      	ldr	r0, [pc, #108]	@ (8000eb4 <auto_green_red+0x98>)
 8000e48:	f001 f97f 	bl	800214a <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LED1_A_GPIO_Port, LED1_A_Pin, SET);
 8000e4c:	2201      	movs	r2, #1
 8000e4e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000e52:	4817      	ldr	r0, [pc, #92]	@ (8000eb0 <auto_green_red+0x94>)
 8000e54:	f001 f979 	bl	800214a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED1_B_GPIO_Port, LED1_B_Pin, SET);
 8000e58:	2201      	movs	r2, #1
 8000e5a:	2110      	movs	r1, #16
 8000e5c:	4814      	ldr	r0, [pc, #80]	@ (8000eb0 <auto_green_red+0x94>)
 8000e5e:	f001 f974 	bl	800214a <HAL_GPIO_WritePin>


	HAL_GPIO_WritePin(LED3_A_GPIO_Port, LED3_A_Pin, SET);
 8000e62:	2201      	movs	r2, #1
 8000e64:	2140      	movs	r1, #64	@ 0x40
 8000e66:	4812      	ldr	r0, [pc, #72]	@ (8000eb0 <auto_green_red+0x94>)
 8000e68:	f001 f96f 	bl	800214a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED3_B_GPIO_Port, LED3_B_Pin, SET);
 8000e6c:	2201      	movs	r2, #1
 8000e6e:	2180      	movs	r1, #128	@ 0x80
 8000e70:	4811      	ldr	r0, [pc, #68]	@ (8000eb8 <auto_green_red+0x9c>)
 8000e72:	f001 f96a 	bl	800214a <HAL_GPIO_WritePin>

//	update_led_buffer_A(time_green);
//	update_led_buffer_B(time_red);
	display_lcd(time_green, time_red);
 8000e76:	4b11      	ldr	r3, [pc, #68]	@ (8000ebc <auto_green_red+0xa0>)
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	4a11      	ldr	r2, [pc, #68]	@ (8000ec0 <auto_green_red+0xa4>)
 8000e7c:	6812      	ldr	r2, [r2, #0]
 8000e7e:	4611      	mov	r1, r2
 8000e80:	4618      	mov	r0, r3
 8000e82:	f7ff fead 	bl	8000be0 <display_lcd>
	if(timers[1].flag == 1) // flag for display 7
 8000e86:	4b0f      	ldr	r3, [pc, #60]	@ (8000ec4 <auto_green_red+0xa8>)
 8000e88:	68db      	ldr	r3, [r3, #12]
 8000e8a:	2b01      	cmp	r3, #1
 8000e8c:	d10e      	bne.n	8000eac <auto_green_red+0x90>
		{
			time_green--;
 8000e8e:	4b0b      	ldr	r3, [pc, #44]	@ (8000ebc <auto_green_red+0xa0>)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	3b01      	subs	r3, #1
 8000e94:	4a09      	ldr	r2, [pc, #36]	@ (8000ebc <auto_green_red+0xa0>)
 8000e96:	6013      	str	r3, [r2, #0]
			time_red--;
 8000e98:	4b09      	ldr	r3, [pc, #36]	@ (8000ec0 <auto_green_red+0xa4>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	3b01      	subs	r3, #1
 8000e9e:	4a08      	ldr	r2, [pc, #32]	@ (8000ec0 <auto_green_red+0xa4>)
 8000ea0:	6013      	str	r3, [r2, #0]
			setTimer(1, 1000);
 8000ea2:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000ea6:	2001      	movs	r0, #1
 8000ea8:	f000 fc44 	bl	8001734 <setTimer>
		}
}
 8000eac:	bf00      	nop
 8000eae:	bd80      	pop	{r7, pc}
 8000eb0:	40010c00 	.word	0x40010c00
 8000eb4:	40010800 	.word	0x40010800
 8000eb8:	40011000 	.word	0x40011000
 8000ebc:	20000118 	.word	0x20000118
 8000ec0:	20000114 	.word	0x20000114
 8000ec4:	20000208 	.word	0x20000208

08000ec8 <auto_amber_red>:
void auto_amber_red(){
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(LED0_A_GPIO_Port, LED0_A_Pin, SET);
 8000ecc:	2201      	movs	r2, #1
 8000ece:	2120      	movs	r1, #32
 8000ed0:	4822      	ldr	r0, [pc, #136]	@ (8000f5c <auto_amber_red+0x94>)
 8000ed2:	f001 f93a 	bl	800214a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED0_B_GPIO_Port, LED0_B_Pin, RESET);
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	2108      	movs	r1, #8
 8000eda:	4820      	ldr	r0, [pc, #128]	@ (8000f5c <auto_amber_red+0x94>)
 8000edc:	f001 f935 	bl	800214a <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LED2_A_GPIO_Port, LED2_A_Pin, SET);
 8000ee0:	2201      	movs	r2, #1
 8000ee2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000ee6:	481e      	ldr	r0, [pc, #120]	@ (8000f60 <auto_amber_red+0x98>)
 8000ee8:	f001 f92f 	bl	800214a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_B_GPIO_Port, LED2_B_Pin, RESET);
 8000eec:	2200      	movs	r2, #0
 8000eee:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000ef2:	481b      	ldr	r0, [pc, #108]	@ (8000f60 <auto_amber_red+0x98>)
 8000ef4:	f001 f929 	bl	800214a <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LED1_A_GPIO_Port, LED1_A_Pin, SET);
 8000ef8:	2201      	movs	r2, #1
 8000efa:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000efe:	4817      	ldr	r0, [pc, #92]	@ (8000f5c <auto_amber_red+0x94>)
 8000f00:	f001 f923 	bl	800214a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED1_B_GPIO_Port, LED1_B_Pin, SET);
 8000f04:	2201      	movs	r2, #1
 8000f06:	2110      	movs	r1, #16
 8000f08:	4814      	ldr	r0, [pc, #80]	@ (8000f5c <auto_amber_red+0x94>)
 8000f0a:	f001 f91e 	bl	800214a <HAL_GPIO_WritePin>


	HAL_GPIO_WritePin(LED3_A_GPIO_Port, LED3_A_Pin, SET);
 8000f0e:	2201      	movs	r2, #1
 8000f10:	2140      	movs	r1, #64	@ 0x40
 8000f12:	4812      	ldr	r0, [pc, #72]	@ (8000f5c <auto_amber_red+0x94>)
 8000f14:	f001 f919 	bl	800214a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED3_B_GPIO_Port, LED3_B_Pin, SET);
 8000f18:	2201      	movs	r2, #1
 8000f1a:	2180      	movs	r1, #128	@ 0x80
 8000f1c:	4811      	ldr	r0, [pc, #68]	@ (8000f64 <auto_amber_red+0x9c>)
 8000f1e:	f001 f914 	bl	800214a <HAL_GPIO_WritePin>

//	update_led_buffer_A(time_amber);
//	update_led_buffer_B(time_red);
//	display();
	display_lcd(time_amber, time_red);
 8000f22:	4b11      	ldr	r3, [pc, #68]	@ (8000f68 <auto_amber_red+0xa0>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	4a11      	ldr	r2, [pc, #68]	@ (8000f6c <auto_amber_red+0xa4>)
 8000f28:	6812      	ldr	r2, [r2, #0]
 8000f2a:	4611      	mov	r1, r2
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f7ff fe57 	bl	8000be0 <display_lcd>
	if(timers[1].flag == 1) // flag for display 7
 8000f32:	4b0f      	ldr	r3, [pc, #60]	@ (8000f70 <auto_amber_red+0xa8>)
 8000f34:	68db      	ldr	r3, [r3, #12]
 8000f36:	2b01      	cmp	r3, #1
 8000f38:	d10e      	bne.n	8000f58 <auto_amber_red+0x90>
		{
			time_amber--;
 8000f3a:	4b0b      	ldr	r3, [pc, #44]	@ (8000f68 <auto_amber_red+0xa0>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	3b01      	subs	r3, #1
 8000f40:	4a09      	ldr	r2, [pc, #36]	@ (8000f68 <auto_amber_red+0xa0>)
 8000f42:	6013      	str	r3, [r2, #0]
			time_red--;
 8000f44:	4b09      	ldr	r3, [pc, #36]	@ (8000f6c <auto_amber_red+0xa4>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	3b01      	subs	r3, #1
 8000f4a:	4a08      	ldr	r2, [pc, #32]	@ (8000f6c <auto_amber_red+0xa4>)
 8000f4c:	6013      	str	r3, [r2, #0]
			setTimer(1, 1000);
 8000f4e:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000f52:	2001      	movs	r0, #1
 8000f54:	f000 fbee 	bl	8001734 <setTimer>
		}
}
 8000f58:	bf00      	nop
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	40010c00 	.word	0x40010c00
 8000f60:	40010800 	.word	0x40010800
 8000f64:	40011000 	.word	0x40011000
 8000f68:	2000011c 	.word	0x2000011c
 8000f6c:	20000114 	.word	0x20000114
 8000f70:	20000208 	.word	0x20000208

08000f74 <auto_red_green>:
void auto_red_green(){
 8000f74:	b580      	push	{r7, lr}
 8000f76:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(LED0_A_GPIO_Port, LED0_A_Pin, SET);
 8000f78:	2201      	movs	r2, #1
 8000f7a:	2120      	movs	r1, #32
 8000f7c:	4822      	ldr	r0, [pc, #136]	@ (8001008 <auto_red_green+0x94>)
 8000f7e:	f001 f8e4 	bl	800214a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED0_B_GPIO_Port, LED0_B_Pin, SET);
 8000f82:	2201      	movs	r2, #1
 8000f84:	2108      	movs	r1, #8
 8000f86:	4820      	ldr	r0, [pc, #128]	@ (8001008 <auto_red_green+0x94>)
 8000f88:	f001 f8df 	bl	800214a <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LED2_A_GPIO_Port, LED2_A_Pin, SET);
 8000f8c:	2201      	movs	r2, #1
 8000f8e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000f92:	481e      	ldr	r0, [pc, #120]	@ (800100c <auto_red_green+0x98>)
 8000f94:	f001 f8d9 	bl	800214a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_B_GPIO_Port, LED2_B_Pin, SET);
 8000f98:	2201      	movs	r2, #1
 8000f9a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000f9e:	481b      	ldr	r0, [pc, #108]	@ (800100c <auto_red_green+0x98>)
 8000fa0:	f001 f8d3 	bl	800214a <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LED1_A_GPIO_Port, LED1_A_Pin, RESET);
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000faa:	4817      	ldr	r0, [pc, #92]	@ (8001008 <auto_red_green+0x94>)
 8000fac:	f001 f8cd 	bl	800214a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED1_B_GPIO_Port, LED1_B_Pin, SET);
 8000fb0:	2201      	movs	r2, #1
 8000fb2:	2110      	movs	r1, #16
 8000fb4:	4814      	ldr	r0, [pc, #80]	@ (8001008 <auto_red_green+0x94>)
 8000fb6:	f001 f8c8 	bl	800214a <HAL_GPIO_WritePin>


	HAL_GPIO_WritePin(LED3_A_GPIO_Port, LED3_A_Pin, RESET);
 8000fba:	2200      	movs	r2, #0
 8000fbc:	2140      	movs	r1, #64	@ 0x40
 8000fbe:	4812      	ldr	r0, [pc, #72]	@ (8001008 <auto_red_green+0x94>)
 8000fc0:	f001 f8c3 	bl	800214a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED3_B_GPIO_Port, LED3_B_Pin, SET);
 8000fc4:	2201      	movs	r2, #1
 8000fc6:	2180      	movs	r1, #128	@ 0x80
 8000fc8:	4811      	ldr	r0, [pc, #68]	@ (8001010 <auto_red_green+0x9c>)
 8000fca:	f001 f8be 	bl	800214a <HAL_GPIO_WritePin>

//	update_led_buffer_A(time_red);
//	update_led_buffer_B(time_green);
//	display();
	display_lcd(time_red, time_green);
 8000fce:	4b11      	ldr	r3, [pc, #68]	@ (8001014 <auto_red_green+0xa0>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	4a11      	ldr	r2, [pc, #68]	@ (8001018 <auto_red_green+0xa4>)
 8000fd4:	6812      	ldr	r2, [r2, #0]
 8000fd6:	4611      	mov	r1, r2
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f7ff fe01 	bl	8000be0 <display_lcd>
	if(timers[1].flag == 1) // flag for display 7
 8000fde:	4b0f      	ldr	r3, [pc, #60]	@ (800101c <auto_red_green+0xa8>)
 8000fe0:	68db      	ldr	r3, [r3, #12]
 8000fe2:	2b01      	cmp	r3, #1
 8000fe4:	d10e      	bne.n	8001004 <auto_red_green+0x90>
		{
			time_red--;
 8000fe6:	4b0b      	ldr	r3, [pc, #44]	@ (8001014 <auto_red_green+0xa0>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	3b01      	subs	r3, #1
 8000fec:	4a09      	ldr	r2, [pc, #36]	@ (8001014 <auto_red_green+0xa0>)
 8000fee:	6013      	str	r3, [r2, #0]
			time_green--;
 8000ff0:	4b09      	ldr	r3, [pc, #36]	@ (8001018 <auto_red_green+0xa4>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	3b01      	subs	r3, #1
 8000ff6:	4a08      	ldr	r2, [pc, #32]	@ (8001018 <auto_red_green+0xa4>)
 8000ff8:	6013      	str	r3, [r2, #0]
			setTimer(1, 1000);
 8000ffa:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000ffe:	2001      	movs	r0, #1
 8001000:	f000 fb98 	bl	8001734 <setTimer>
		}
}
 8001004:	bf00      	nop
 8001006:	bd80      	pop	{r7, pc}
 8001008:	40010c00 	.word	0x40010c00
 800100c:	40010800 	.word	0x40010800
 8001010:	40011000 	.word	0x40011000
 8001014:	20000114 	.word	0x20000114
 8001018:	20000118 	.word	0x20000118
 800101c:	20000208 	.word	0x20000208

08001020 <auto_red_amber>:
void auto_red_amber(){
 8001020:	b580      	push	{r7, lr}
 8001022:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(LED0_A_GPIO_Port, LED0_A_Pin, SET);
 8001024:	2201      	movs	r2, #1
 8001026:	2120      	movs	r1, #32
 8001028:	4822      	ldr	r0, [pc, #136]	@ (80010b4 <auto_red_amber+0x94>)
 800102a:	f001 f88e 	bl	800214a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED0_B_GPIO_Port, LED0_B_Pin, SET);
 800102e:	2201      	movs	r2, #1
 8001030:	2108      	movs	r1, #8
 8001032:	4820      	ldr	r0, [pc, #128]	@ (80010b4 <auto_red_amber+0x94>)
 8001034:	f001 f889 	bl	800214a <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LED2_A_GPIO_Port, LED2_A_Pin, SET);
 8001038:	2201      	movs	r2, #1
 800103a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800103e:	481e      	ldr	r0, [pc, #120]	@ (80010b8 <auto_red_amber+0x98>)
 8001040:	f001 f883 	bl	800214a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_B_GPIO_Port, LED2_B_Pin, SET);
 8001044:	2201      	movs	r2, #1
 8001046:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800104a:	481b      	ldr	r0, [pc, #108]	@ (80010b8 <auto_red_amber+0x98>)
 800104c:	f001 f87d 	bl	800214a <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LED1_A_GPIO_Port, LED1_A_Pin, SET);
 8001050:	2201      	movs	r2, #1
 8001052:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001056:	4817      	ldr	r0, [pc, #92]	@ (80010b4 <auto_red_amber+0x94>)
 8001058:	f001 f877 	bl	800214a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED1_B_GPIO_Port, LED1_B_Pin, RESET);
 800105c:	2200      	movs	r2, #0
 800105e:	2110      	movs	r1, #16
 8001060:	4814      	ldr	r0, [pc, #80]	@ (80010b4 <auto_red_amber+0x94>)
 8001062:	f001 f872 	bl	800214a <HAL_GPIO_WritePin>


	HAL_GPIO_WritePin(LED3_A_GPIO_Port, LED3_A_Pin, SET);
 8001066:	2201      	movs	r2, #1
 8001068:	2140      	movs	r1, #64	@ 0x40
 800106a:	4812      	ldr	r0, [pc, #72]	@ (80010b4 <auto_red_amber+0x94>)
 800106c:	f001 f86d 	bl	800214a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED3_B_GPIO_Port, LED3_B_Pin, RESET);
 8001070:	2200      	movs	r2, #0
 8001072:	2180      	movs	r1, #128	@ 0x80
 8001074:	4811      	ldr	r0, [pc, #68]	@ (80010bc <auto_red_amber+0x9c>)
 8001076:	f001 f868 	bl	800214a <HAL_GPIO_WritePin>

//	update_led_buffer_A(time_red);
//	update_led_buffer_B(time_amber);
//	display();
	display_lcd(time_red, time_amber);
 800107a:	4b11      	ldr	r3, [pc, #68]	@ (80010c0 <auto_red_amber+0xa0>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	4a11      	ldr	r2, [pc, #68]	@ (80010c4 <auto_red_amber+0xa4>)
 8001080:	6812      	ldr	r2, [r2, #0]
 8001082:	4611      	mov	r1, r2
 8001084:	4618      	mov	r0, r3
 8001086:	f7ff fdab 	bl	8000be0 <display_lcd>
	if(timers[1].flag == 1) // flag for display 7
 800108a:	4b0f      	ldr	r3, [pc, #60]	@ (80010c8 <auto_red_amber+0xa8>)
 800108c:	68db      	ldr	r3, [r3, #12]
 800108e:	2b01      	cmp	r3, #1
 8001090:	d10e      	bne.n	80010b0 <auto_red_amber+0x90>
		{
			time_red--;
 8001092:	4b0b      	ldr	r3, [pc, #44]	@ (80010c0 <auto_red_amber+0xa0>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	3b01      	subs	r3, #1
 8001098:	4a09      	ldr	r2, [pc, #36]	@ (80010c0 <auto_red_amber+0xa0>)
 800109a:	6013      	str	r3, [r2, #0]
			time_amber--;
 800109c:	4b09      	ldr	r3, [pc, #36]	@ (80010c4 <auto_red_amber+0xa4>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	3b01      	subs	r3, #1
 80010a2:	4a08      	ldr	r2, [pc, #32]	@ (80010c4 <auto_red_amber+0xa4>)
 80010a4:	6013      	str	r3, [r2, #0]
			setTimer(1, 1000);
 80010a6:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80010aa:	2001      	movs	r0, #1
 80010ac:	f000 fb42 	bl	8001734 <setTimer>
		}
}
 80010b0:	bf00      	nop
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	40010c00 	.word	0x40010c00
 80010b8:	40010800 	.word	0x40010800
 80010bc:	40011000 	.word	0x40011000
 80010c0:	20000114 	.word	0x20000114
 80010c4:	2000011c 	.word	0x2000011c
 80010c8:	20000208 	.word	0x20000208

080010cc <modify_red_led>:

// use timer 3
void modify_red_led(){
 80010cc:	b580      	push	{r7, lr}
 80010ce:	af00      	add	r7, sp, #0

	if(timers[3].flag == 1){
 80010d0:	4b1d      	ldr	r3, [pc, #116]	@ (8001148 <modify_red_led+0x7c>)
 80010d2:	69db      	ldr	r3, [r3, #28]
 80010d4:	2b01      	cmp	r3, #1
 80010d6:	d12f      	bne.n	8001138 <modify_red_led+0x6c>

		HAL_GPIO_WritePin(LED0_A_GPIO_Port, LED0_A_Pin, SET);
 80010d8:	2201      	movs	r2, #1
 80010da:	2120      	movs	r1, #32
 80010dc:	481b      	ldr	r0, [pc, #108]	@ (800114c <modify_red_led+0x80>)
 80010de:	f001 f834 	bl	800214a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED0_B_GPIO_Port, LED0_B_Pin, SET);
 80010e2:	2201      	movs	r2, #1
 80010e4:	2108      	movs	r1, #8
 80010e6:	4819      	ldr	r0, [pc, #100]	@ (800114c <modify_red_led+0x80>)
 80010e8:	f001 f82f 	bl	800214a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(LED1_A_GPIO_Port, LED1_A_Pin, SET);
 80010ec:	2201      	movs	r2, #1
 80010ee:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80010f2:	4816      	ldr	r0, [pc, #88]	@ (800114c <modify_red_led+0x80>)
 80010f4:	f001 f829 	bl	800214a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED1_B_GPIO_Port, LED1_B_Pin, SET);
 80010f8:	2201      	movs	r2, #1
 80010fa:	2110      	movs	r1, #16
 80010fc:	4813      	ldr	r0, [pc, #76]	@ (800114c <modify_red_led+0x80>)
 80010fe:	f001 f824 	bl	800214a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(LED2_A_GPIO_Port, LED2_A_Pin, SET);
 8001102:	2201      	movs	r2, #1
 8001104:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001108:	4811      	ldr	r0, [pc, #68]	@ (8001150 <modify_red_led+0x84>)
 800110a:	f001 f81e 	bl	800214a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED2_B_GPIO_Port, LED2_B_Pin, SET);
 800110e:	2201      	movs	r2, #1
 8001110:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001114:	480e      	ldr	r0, [pc, #56]	@ (8001150 <modify_red_led+0x84>)
 8001116:	f001 f818 	bl	800214a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(LED3_A_GPIO_Port, LED3_A_Pin, SET);
 800111a:	2201      	movs	r2, #1
 800111c:	2140      	movs	r1, #64	@ 0x40
 800111e:	480b      	ldr	r0, [pc, #44]	@ (800114c <modify_red_led+0x80>)
 8001120:	f001 f813 	bl	800214a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED3_B_GPIO_Port, LED3_B_Pin, SET);
 8001124:	2201      	movs	r2, #1
 8001126:	2180      	movs	r1, #128	@ 0x80
 8001128:	480a      	ldr	r0, [pc, #40]	@ (8001154 <modify_red_led+0x88>)
 800112a:	f001 f80e 	bl	800214a <HAL_GPIO_WritePin>
		setTimer(3, 500);
 800112e:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8001132:	2003      	movs	r0, #3
 8001134:	f000 fafe 	bl	8001734 <setTimer>
	}
//	update_led_buffer_B(2); // mode name
//	update_led_buffer_A(newTime); //new time
//	display();
	display_lcd(2, newTime);
 8001138:	4b07      	ldr	r3, [pc, #28]	@ (8001158 <modify_red_led+0x8c>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	4619      	mov	r1, r3
 800113e:	2002      	movs	r0, #2
 8001140:	f7ff fd4e 	bl	8000be0 <display_lcd>
}
 8001144:	bf00      	nop
 8001146:	bd80      	pop	{r7, pc}
 8001148:	20000208 	.word	0x20000208
 800114c:	40010c00 	.word	0x40010c00
 8001150:	40010800 	.word	0x40010800
 8001154:	40011000 	.word	0x40011000
 8001158:	20000120 	.word	0x20000120

0800115c <modify_green_led>:
void modify_green_led(){
 800115c:	b580      	push	{r7, lr}
 800115e:	af00      	add	r7, sp, #0
	if(timers[3].flag == 1){
 8001160:	4b1d      	ldr	r3, [pc, #116]	@ (80011d8 <modify_green_led+0x7c>)
 8001162:	69db      	ldr	r3, [r3, #28]
 8001164:	2b01      	cmp	r3, #1
 8001166:	d12f      	bne.n	80011c8 <modify_green_led+0x6c>

		HAL_GPIO_WritePin(LED0_A_GPIO_Port, LED0_A_Pin, RESET);
 8001168:	2200      	movs	r2, #0
 800116a:	2120      	movs	r1, #32
 800116c:	481b      	ldr	r0, [pc, #108]	@ (80011dc <modify_green_led+0x80>)
 800116e:	f000 ffec 	bl	800214a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED0_B_GPIO_Port, LED0_B_Pin, SET);
 8001172:	2201      	movs	r2, #1
 8001174:	2108      	movs	r1, #8
 8001176:	4819      	ldr	r0, [pc, #100]	@ (80011dc <modify_green_led+0x80>)
 8001178:	f000 ffe7 	bl	800214a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(LED1_A_GPIO_Port, LED1_A_Pin, RESET);
 800117c:	2200      	movs	r2, #0
 800117e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001182:	4816      	ldr	r0, [pc, #88]	@ (80011dc <modify_green_led+0x80>)
 8001184:	f000 ffe1 	bl	800214a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED1_B_GPIO_Port, LED1_B_Pin, SET);
 8001188:	2201      	movs	r2, #1
 800118a:	2110      	movs	r1, #16
 800118c:	4813      	ldr	r0, [pc, #76]	@ (80011dc <modify_green_led+0x80>)
 800118e:	f000 ffdc 	bl	800214a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(LED2_A_GPIO_Port, LED2_A_Pin, RESET);
 8001192:	2200      	movs	r2, #0
 8001194:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001198:	4811      	ldr	r0, [pc, #68]	@ (80011e0 <modify_green_led+0x84>)
 800119a:	f000 ffd6 	bl	800214a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED2_B_GPIO_Port, LED2_B_Pin, SET);
 800119e:	2201      	movs	r2, #1
 80011a0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80011a4:	480e      	ldr	r0, [pc, #56]	@ (80011e0 <modify_green_led+0x84>)
 80011a6:	f000 ffd0 	bl	800214a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(LED3_A_GPIO_Port, LED3_A_Pin, RESET);
 80011aa:	2200      	movs	r2, #0
 80011ac:	2140      	movs	r1, #64	@ 0x40
 80011ae:	480b      	ldr	r0, [pc, #44]	@ (80011dc <modify_green_led+0x80>)
 80011b0:	f000 ffcb 	bl	800214a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED3_B_GPIO_Port, LED3_B_Pin, SET);
 80011b4:	2201      	movs	r2, #1
 80011b6:	2180      	movs	r1, #128	@ 0x80
 80011b8:	480a      	ldr	r0, [pc, #40]	@ (80011e4 <modify_green_led+0x88>)
 80011ba:	f000 ffc6 	bl	800214a <HAL_GPIO_WritePin>
		setTimer(3, 500);
 80011be:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 80011c2:	2003      	movs	r0, #3
 80011c4:	f000 fab6 	bl	8001734 <setTimer>
	}
//	update_led_buffer_B(3); // mode name
//	update_led_buffer_A(newTime); // new time
//	display();
	display_lcd(3, newTime);
 80011c8:	4b07      	ldr	r3, [pc, #28]	@ (80011e8 <modify_green_led+0x8c>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	4619      	mov	r1, r3
 80011ce:	2003      	movs	r0, #3
 80011d0:	f7ff fd06 	bl	8000be0 <display_lcd>
}
 80011d4:	bf00      	nop
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	20000208 	.word	0x20000208
 80011dc:	40010c00 	.word	0x40010c00
 80011e0:	40010800 	.word	0x40010800
 80011e4:	40011000 	.word	0x40011000
 80011e8:	20000120 	.word	0x20000120

080011ec <modify_amber_led>:
void modify_amber_led(){
 80011ec:	b580      	push	{r7, lr}
 80011ee:	af00      	add	r7, sp, #0
	if(timers[3].flag == 1){
 80011f0:	4b1d      	ldr	r3, [pc, #116]	@ (8001268 <modify_amber_led+0x7c>)
 80011f2:	69db      	ldr	r3, [r3, #28]
 80011f4:	2b01      	cmp	r3, #1
 80011f6:	d12f      	bne.n	8001258 <modify_amber_led+0x6c>
		HAL_GPIO_WritePin(LED0_A_GPIO_Port, LED0_A_Pin, SET);
 80011f8:	2201      	movs	r2, #1
 80011fa:	2120      	movs	r1, #32
 80011fc:	481b      	ldr	r0, [pc, #108]	@ (800126c <modify_amber_led+0x80>)
 80011fe:	f000 ffa4 	bl	800214a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED0_B_GPIO_Port, LED0_B_Pin, RESET);
 8001202:	2200      	movs	r2, #0
 8001204:	2108      	movs	r1, #8
 8001206:	4819      	ldr	r0, [pc, #100]	@ (800126c <modify_amber_led+0x80>)
 8001208:	f000 ff9f 	bl	800214a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(LED1_A_GPIO_Port, LED1_A_Pin, SET);
 800120c:	2201      	movs	r2, #1
 800120e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001212:	4816      	ldr	r0, [pc, #88]	@ (800126c <modify_amber_led+0x80>)
 8001214:	f000 ff99 	bl	800214a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED1_B_GPIO_Port, LED1_B_Pin, RESET);
 8001218:	2200      	movs	r2, #0
 800121a:	2110      	movs	r1, #16
 800121c:	4813      	ldr	r0, [pc, #76]	@ (800126c <modify_amber_led+0x80>)
 800121e:	f000 ff94 	bl	800214a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(LED2_A_GPIO_Port, LED2_A_Pin, SET);
 8001222:	2201      	movs	r2, #1
 8001224:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001228:	4811      	ldr	r0, [pc, #68]	@ (8001270 <modify_amber_led+0x84>)
 800122a:	f000 ff8e 	bl	800214a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED2_B_GPIO_Port, LED2_B_Pin, RESET);
 800122e:	2200      	movs	r2, #0
 8001230:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001234:	480e      	ldr	r0, [pc, #56]	@ (8001270 <modify_amber_led+0x84>)
 8001236:	f000 ff88 	bl	800214a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(LED3_A_GPIO_Port, LED3_A_Pin, SET);
 800123a:	2201      	movs	r2, #1
 800123c:	2140      	movs	r1, #64	@ 0x40
 800123e:	480b      	ldr	r0, [pc, #44]	@ (800126c <modify_amber_led+0x80>)
 8001240:	f000 ff83 	bl	800214a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED3_B_GPIO_Port, LED3_B_Pin, RESET);
 8001244:	2200      	movs	r2, #0
 8001246:	2180      	movs	r1, #128	@ 0x80
 8001248:	480a      	ldr	r0, [pc, #40]	@ (8001274 <modify_amber_led+0x88>)
 800124a:	f000 ff7e 	bl	800214a <HAL_GPIO_WritePin>
		setTimer(3, 500);
 800124e:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8001252:	2003      	movs	r0, #3
 8001254:	f000 fa6e 	bl	8001734 <setTimer>
	}
//	update_led_buffer_B(4); //  mode name
//	update_led_buffer_A(newTime); //new time
//	display();
	display_lcd(4, newTime);
 8001258:	4b07      	ldr	r3, [pc, #28]	@ (8001278 <modify_amber_led+0x8c>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	4619      	mov	r1, r3
 800125e:	2004      	movs	r0, #4
 8001260:	f7ff fcbe 	bl	8000be0 <display_lcd>
}
 8001264:	bf00      	nop
 8001266:	bd80      	pop	{r7, pc}
 8001268:	20000208 	.word	0x20000208
 800126c:	40010c00 	.word	0x40010c00
 8001270:	40010800 	.word	0x40010800
 8001274:	40011000 	.word	0x40011000
 8001278:	20000120 	.word	0x20000120

0800127c <clear_all_led>:
void clear_all_led(){
 800127c:	b580      	push	{r7, lr}
 800127e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED0_A_GPIO_Port, LED0_A_Pin, RESET);
 8001280:	2200      	movs	r2, #0
 8001282:	2120      	movs	r1, #32
 8001284:	4815      	ldr	r0, [pc, #84]	@ (80012dc <clear_all_led+0x60>)
 8001286:	f000 ff60 	bl	800214a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED0_B_GPIO_Port, LED0_B_Pin, RESET);
 800128a:	2200      	movs	r2, #0
 800128c:	2108      	movs	r1, #8
 800128e:	4813      	ldr	r0, [pc, #76]	@ (80012dc <clear_all_led+0x60>)
 8001290:	f000 ff5b 	bl	800214a <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LED1_A_GPIO_Port, LED1_A_Pin, RESET);
 8001294:	2200      	movs	r2, #0
 8001296:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800129a:	4810      	ldr	r0, [pc, #64]	@ (80012dc <clear_all_led+0x60>)
 800129c:	f000 ff55 	bl	800214a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED1_B_GPIO_Port, LED1_B_Pin, RESET);
 80012a0:	2200      	movs	r2, #0
 80012a2:	2110      	movs	r1, #16
 80012a4:	480d      	ldr	r0, [pc, #52]	@ (80012dc <clear_all_led+0x60>)
 80012a6:	f000 ff50 	bl	800214a <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LED2_A_GPIO_Port, LED2_A_Pin, RESET);
 80012aa:	2200      	movs	r2, #0
 80012ac:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80012b0:	480b      	ldr	r0, [pc, #44]	@ (80012e0 <clear_all_led+0x64>)
 80012b2:	f000 ff4a 	bl	800214a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_B_GPIO_Port, LED2_B_Pin, RESET);
 80012b6:	2200      	movs	r2, #0
 80012b8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80012bc:	4808      	ldr	r0, [pc, #32]	@ (80012e0 <clear_all_led+0x64>)
 80012be:	f000 ff44 	bl	800214a <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LED3_A_GPIO_Port, LED3_A_Pin, RESET);
 80012c2:	2200      	movs	r2, #0
 80012c4:	2140      	movs	r1, #64	@ 0x40
 80012c6:	4805      	ldr	r0, [pc, #20]	@ (80012dc <clear_all_led+0x60>)
 80012c8:	f000 ff3f 	bl	800214a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED3_B_GPIO_Port, LED3_B_Pin, RESET);
 80012cc:	2200      	movs	r2, #0
 80012ce:	2180      	movs	r1, #128	@ 0x80
 80012d0:	4804      	ldr	r0, [pc, #16]	@ (80012e4 <clear_all_led+0x68>)
 80012d2:	f000 ff3a 	bl	800214a <HAL_GPIO_WritePin>
}
 80012d6:	bf00      	nop
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	40010c00 	.word	0x40010c00
 80012e0:	40010800 	.word	0x40010800
 80012e4:	40011000 	.word	0x40011000

080012e8 <manual_green_red>:
void manual_green_red(){
 80012e8:	b580      	push	{r7, lr}
 80012ea:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(LED0_A_GPIO_Port, LED0_A_Pin, RESET);
 80012ec:	2200      	movs	r2, #0
 80012ee:	2120      	movs	r1, #32
 80012f0:	4817      	ldr	r0, [pc, #92]	@ (8001350 <manual_green_red+0x68>)
 80012f2:	f000 ff2a 	bl	800214a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED0_B_GPIO_Port, LED0_B_Pin, SET);
 80012f6:	2201      	movs	r2, #1
 80012f8:	2108      	movs	r1, #8
 80012fa:	4815      	ldr	r0, [pc, #84]	@ (8001350 <manual_green_red+0x68>)
 80012fc:	f000 ff25 	bl	800214a <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LED2_A_GPIO_Port, LED2_A_Pin, RESET);
 8001300:	2200      	movs	r2, #0
 8001302:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001306:	4813      	ldr	r0, [pc, #76]	@ (8001354 <manual_green_red+0x6c>)
 8001308:	f000 ff1f 	bl	800214a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_B_GPIO_Port, LED2_B_Pin, SET);
 800130c:	2201      	movs	r2, #1
 800130e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001312:	4810      	ldr	r0, [pc, #64]	@ (8001354 <manual_green_red+0x6c>)
 8001314:	f000 ff19 	bl	800214a <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LED1_A_GPIO_Port, LED1_A_Pin, SET);
 8001318:	2201      	movs	r2, #1
 800131a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800131e:	480c      	ldr	r0, [pc, #48]	@ (8001350 <manual_green_red+0x68>)
 8001320:	f000 ff13 	bl	800214a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED1_B_GPIO_Port, LED1_B_Pin, SET);
 8001324:	2201      	movs	r2, #1
 8001326:	2110      	movs	r1, #16
 8001328:	4809      	ldr	r0, [pc, #36]	@ (8001350 <manual_green_red+0x68>)
 800132a:	f000 ff0e 	bl	800214a <HAL_GPIO_WritePin>


	HAL_GPIO_WritePin(LED3_A_GPIO_Port, LED3_A_Pin, SET);
 800132e:	2201      	movs	r2, #1
 8001330:	2140      	movs	r1, #64	@ 0x40
 8001332:	4807      	ldr	r0, [pc, #28]	@ (8001350 <manual_green_red+0x68>)
 8001334:	f000 ff09 	bl	800214a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED3_B_GPIO_Port, LED3_B_Pin, SET);
 8001338:	2201      	movs	r2, #1
 800133a:	2180      	movs	r1, #128	@ 0x80
 800133c:	4806      	ldr	r0, [pc, #24]	@ (8001358 <manual_green_red+0x70>)
 800133e:	f000 ff04 	bl	800214a <HAL_GPIO_WritePin>
//	update_led_buffer_B(1); //  mode name
//	update_led_buffer_A(0); //00
//	display();
	display_lcd(1, 0);
 8001342:	2100      	movs	r1, #0
 8001344:	2001      	movs	r0, #1
 8001346:	f7ff fc4b 	bl	8000be0 <display_lcd>
}
 800134a:	bf00      	nop
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	40010c00 	.word	0x40010c00
 8001354:	40010800 	.word	0x40010800
 8001358:	40011000 	.word	0x40011000

0800135c <manual_red_green>:
void manual_red_green(){
 800135c:	b580      	push	{r7, lr}
 800135e:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(LED0_A_GPIO_Port, LED0_A_Pin, SET);
 8001360:	2201      	movs	r2, #1
 8001362:	2120      	movs	r1, #32
 8001364:	4817      	ldr	r0, [pc, #92]	@ (80013c4 <manual_red_green+0x68>)
 8001366:	f000 fef0 	bl	800214a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED0_B_GPIO_Port, LED0_B_Pin, SET);
 800136a:	2201      	movs	r2, #1
 800136c:	2108      	movs	r1, #8
 800136e:	4815      	ldr	r0, [pc, #84]	@ (80013c4 <manual_red_green+0x68>)
 8001370:	f000 feeb 	bl	800214a <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LED2_A_GPIO_Port, LED2_A_Pin, SET);
 8001374:	2201      	movs	r2, #1
 8001376:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800137a:	4813      	ldr	r0, [pc, #76]	@ (80013c8 <manual_red_green+0x6c>)
 800137c:	f000 fee5 	bl	800214a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_B_GPIO_Port, LED2_B_Pin, SET);
 8001380:	2201      	movs	r2, #1
 8001382:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001386:	4810      	ldr	r0, [pc, #64]	@ (80013c8 <manual_red_green+0x6c>)
 8001388:	f000 fedf 	bl	800214a <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LED1_A_GPIO_Port, LED1_A_Pin, RESET);
 800138c:	2200      	movs	r2, #0
 800138e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001392:	480c      	ldr	r0, [pc, #48]	@ (80013c4 <manual_red_green+0x68>)
 8001394:	f000 fed9 	bl	800214a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED1_B_GPIO_Port, LED1_B_Pin, SET);
 8001398:	2201      	movs	r2, #1
 800139a:	2110      	movs	r1, #16
 800139c:	4809      	ldr	r0, [pc, #36]	@ (80013c4 <manual_red_green+0x68>)
 800139e:	f000 fed4 	bl	800214a <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LED3_A_GPIO_Port, LED3_A_Pin, RESET);
 80013a2:	2200      	movs	r2, #0
 80013a4:	2140      	movs	r1, #64	@ 0x40
 80013a6:	4807      	ldr	r0, [pc, #28]	@ (80013c4 <manual_red_green+0x68>)
 80013a8:	f000 fecf 	bl	800214a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED3_B_GPIO_Port, LED3_B_Pin, SET);
 80013ac:	2201      	movs	r2, #1
 80013ae:	2180      	movs	r1, #128	@ 0x80
 80013b0:	4806      	ldr	r0, [pc, #24]	@ (80013cc <manual_red_green+0x70>)
 80013b2:	f000 feca 	bl	800214a <HAL_GPIO_WritePin>
//	update_led_buffer_B(1); //  mode name
//	update_led_buffer_A(0); //00
//	display();
	display_lcd(1, 0);
 80013b6:	2100      	movs	r1, #0
 80013b8:	2001      	movs	r0, #1
 80013ba:	f7ff fc11 	bl	8000be0 <display_lcd>
}
 80013be:	bf00      	nop
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	40010c00 	.word	0x40010c00
 80013c8:	40010800 	.word	0x40010800
 80013cc:	40011000 	.word	0x40011000

080013d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013d4:	f000 fb8a 	bl	8001aec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013d8:	f000 f81e 	bl	8001418 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013dc:	f000 f8fc 	bl	80015d8 <MX_GPIO_Init>
  MX_TIM2_Init();
 80013e0:	f000 f884 	bl	80014ec <MX_TIM2_Init>
  MX_I2C1_Init();
 80013e4:	f000 f854 	bl	8001490 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 80013e8:	f000 f8cc 	bl	8001584 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 80013ec:	4808      	ldr	r0, [pc, #32]	@ (8001410 <main+0x40>)
 80013ee:	f001 ffd9 	bl	80033a4 <HAL_TIM_Base_Start_IT>
    status = INIT;
 80013f2:	4b08      	ldr	r3, [pc, #32]	@ (8001414 <main+0x44>)
 80013f4:	2201      	movs	r2, #1
 80013f6:	601a      	str	r2, [r3, #0]
    lcd_init();
 80013f8:	f7ff fc7a 	bl	8000cf0 <lcd_init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  lcd_init();
 80013fc:	f7ff fc78 	bl	8000cf0 <lcd_init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	fsm_auto_run();
 8001400:	f7fe fff2 	bl	80003e8 <fsm_auto_run>
	fsm_modify_run();
 8001404:	f7ff fac6 	bl	8000994 <fsm_modify_run>
	fsm_manual_run();
 8001408:	f7ff fa3a 	bl	8000880 <fsm_manual_run>
	fsm_auto_run();
 800140c:	bf00      	nop
 800140e:	e7f7      	b.n	8001400 <main+0x30>
 8001410:	20000178 	.word	0x20000178
 8001414:	20000100 	.word	0x20000100

08001418 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b090      	sub	sp, #64	@ 0x40
 800141c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800141e:	f107 0318 	add.w	r3, r7, #24
 8001422:	2228      	movs	r2, #40	@ 0x28
 8001424:	2100      	movs	r1, #0
 8001426:	4618      	mov	r0, r3
 8001428:	f002 fc70 	bl	8003d0c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800142c:	1d3b      	adds	r3, r7, #4
 800142e:	2200      	movs	r2, #0
 8001430:	601a      	str	r2, [r3, #0]
 8001432:	605a      	str	r2, [r3, #4]
 8001434:	609a      	str	r2, [r3, #8]
 8001436:	60da      	str	r2, [r3, #12]
 8001438:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800143a:	2302      	movs	r3, #2
 800143c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800143e:	2301      	movs	r3, #1
 8001440:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001442:	2310      	movs	r3, #16
 8001444:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001446:	2300      	movs	r3, #0
 8001448:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800144a:	f107 0318 	add.w	r3, r7, #24
 800144e:	4618      	mov	r0, r3
 8001450:	f001 fb48 	bl	8002ae4 <HAL_RCC_OscConfig>
 8001454:	4603      	mov	r3, r0
 8001456:	2b00      	cmp	r3, #0
 8001458:	d001      	beq.n	800145e <SystemClock_Config+0x46>
  {
    Error_Handler();
 800145a:	f000 f965 	bl	8001728 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800145e:	230f      	movs	r3, #15
 8001460:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001462:	2300      	movs	r3, #0
 8001464:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001466:	2300      	movs	r3, #0
 8001468:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800146a:	2300      	movs	r3, #0
 800146c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800146e:	2300      	movs	r3, #0
 8001470:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001472:	1d3b      	adds	r3, r7, #4
 8001474:	2100      	movs	r1, #0
 8001476:	4618      	mov	r0, r3
 8001478:	f001 fdb6 	bl	8002fe8 <HAL_RCC_ClockConfig>
 800147c:	4603      	mov	r3, r0
 800147e:	2b00      	cmp	r3, #0
 8001480:	d001      	beq.n	8001486 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001482:	f000 f951 	bl	8001728 <Error_Handler>
  }
}
 8001486:	bf00      	nop
 8001488:	3740      	adds	r7, #64	@ 0x40
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}
	...

08001490 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001494:	4b12      	ldr	r3, [pc, #72]	@ (80014e0 <MX_I2C1_Init+0x50>)
 8001496:	4a13      	ldr	r2, [pc, #76]	@ (80014e4 <MX_I2C1_Init+0x54>)
 8001498:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800149a:	4b11      	ldr	r3, [pc, #68]	@ (80014e0 <MX_I2C1_Init+0x50>)
 800149c:	4a12      	ldr	r2, [pc, #72]	@ (80014e8 <MX_I2C1_Init+0x58>)
 800149e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80014a0:	4b0f      	ldr	r3, [pc, #60]	@ (80014e0 <MX_I2C1_Init+0x50>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80014a6:	4b0e      	ldr	r3, [pc, #56]	@ (80014e0 <MX_I2C1_Init+0x50>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80014ac:	4b0c      	ldr	r3, [pc, #48]	@ (80014e0 <MX_I2C1_Init+0x50>)
 80014ae:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80014b2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80014b4:	4b0a      	ldr	r3, [pc, #40]	@ (80014e0 <MX_I2C1_Init+0x50>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80014ba:	4b09      	ldr	r3, [pc, #36]	@ (80014e0 <MX_I2C1_Init+0x50>)
 80014bc:	2200      	movs	r2, #0
 80014be:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80014c0:	4b07      	ldr	r3, [pc, #28]	@ (80014e0 <MX_I2C1_Init+0x50>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80014c6:	4b06      	ldr	r3, [pc, #24]	@ (80014e0 <MX_I2C1_Init+0x50>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80014cc:	4804      	ldr	r0, [pc, #16]	@ (80014e0 <MX_I2C1_Init+0x50>)
 80014ce:	f000 fe6d 	bl	80021ac <HAL_I2C_Init>
 80014d2:	4603      	mov	r3, r0
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d001      	beq.n	80014dc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80014d8:	f000 f926 	bl	8001728 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80014dc:	bf00      	nop
 80014de:	bd80      	pop	{r7, pc}
 80014e0:	20000124 	.word	0x20000124
 80014e4:	40005400 	.word	0x40005400
 80014e8:	000186a0 	.word	0x000186a0

080014ec <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b086      	sub	sp, #24
 80014f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014f2:	f107 0308 	add.w	r3, r7, #8
 80014f6:	2200      	movs	r2, #0
 80014f8:	601a      	str	r2, [r3, #0]
 80014fa:	605a      	str	r2, [r3, #4]
 80014fc:	609a      	str	r2, [r3, #8]
 80014fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001500:	463b      	mov	r3, r7
 8001502:	2200      	movs	r2, #0
 8001504:	601a      	str	r2, [r3, #0]
 8001506:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001508:	4b1d      	ldr	r3, [pc, #116]	@ (8001580 <MX_TIM2_Init+0x94>)
 800150a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800150e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8001510:	4b1b      	ldr	r3, [pc, #108]	@ (8001580 <MX_TIM2_Init+0x94>)
 8001512:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8001516:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001518:	4b19      	ldr	r3, [pc, #100]	@ (8001580 <MX_TIM2_Init+0x94>)
 800151a:	2200      	movs	r2, #0
 800151c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 800151e:	4b18      	ldr	r3, [pc, #96]	@ (8001580 <MX_TIM2_Init+0x94>)
 8001520:	2209      	movs	r2, #9
 8001522:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001524:	4b16      	ldr	r3, [pc, #88]	@ (8001580 <MX_TIM2_Init+0x94>)
 8001526:	2200      	movs	r2, #0
 8001528:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800152a:	4b15      	ldr	r3, [pc, #84]	@ (8001580 <MX_TIM2_Init+0x94>)
 800152c:	2200      	movs	r2, #0
 800152e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001530:	4813      	ldr	r0, [pc, #76]	@ (8001580 <MX_TIM2_Init+0x94>)
 8001532:	f001 fee7 	bl	8003304 <HAL_TIM_Base_Init>
 8001536:	4603      	mov	r3, r0
 8001538:	2b00      	cmp	r3, #0
 800153a:	d001      	beq.n	8001540 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800153c:	f000 f8f4 	bl	8001728 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001540:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001544:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001546:	f107 0308 	add.w	r3, r7, #8
 800154a:	4619      	mov	r1, r3
 800154c:	480c      	ldr	r0, [pc, #48]	@ (8001580 <MX_TIM2_Init+0x94>)
 800154e:	f002 f86b 	bl	8003628 <HAL_TIM_ConfigClockSource>
 8001552:	4603      	mov	r3, r0
 8001554:	2b00      	cmp	r3, #0
 8001556:	d001      	beq.n	800155c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001558:	f000 f8e6 	bl	8001728 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800155c:	2300      	movs	r3, #0
 800155e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001560:	2300      	movs	r3, #0
 8001562:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001564:	463b      	mov	r3, r7
 8001566:	4619      	mov	r1, r3
 8001568:	4805      	ldr	r0, [pc, #20]	@ (8001580 <MX_TIM2_Init+0x94>)
 800156a:	f002 fa4d 	bl	8003a08 <HAL_TIMEx_MasterConfigSynchronization>
 800156e:	4603      	mov	r3, r0
 8001570:	2b00      	cmp	r3, #0
 8001572:	d001      	beq.n	8001578 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001574:	f000 f8d8 	bl	8001728 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001578:	bf00      	nop
 800157a:	3718      	adds	r7, #24
 800157c:	46bd      	mov	sp, r7
 800157e:	bd80      	pop	{r7, pc}
 8001580:	20000178 	.word	0x20000178

08001584 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001588:	4b11      	ldr	r3, [pc, #68]	@ (80015d0 <MX_USART2_UART_Init+0x4c>)
 800158a:	4a12      	ldr	r2, [pc, #72]	@ (80015d4 <MX_USART2_UART_Init+0x50>)
 800158c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800158e:	4b10      	ldr	r3, [pc, #64]	@ (80015d0 <MX_USART2_UART_Init+0x4c>)
 8001590:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001594:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001596:	4b0e      	ldr	r3, [pc, #56]	@ (80015d0 <MX_USART2_UART_Init+0x4c>)
 8001598:	2200      	movs	r2, #0
 800159a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800159c:	4b0c      	ldr	r3, [pc, #48]	@ (80015d0 <MX_USART2_UART_Init+0x4c>)
 800159e:	2200      	movs	r2, #0
 80015a0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80015a2:	4b0b      	ldr	r3, [pc, #44]	@ (80015d0 <MX_USART2_UART_Init+0x4c>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80015a8:	4b09      	ldr	r3, [pc, #36]	@ (80015d0 <MX_USART2_UART_Init+0x4c>)
 80015aa:	220c      	movs	r2, #12
 80015ac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015ae:	4b08      	ldr	r3, [pc, #32]	@ (80015d0 <MX_USART2_UART_Init+0x4c>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80015b4:	4b06      	ldr	r3, [pc, #24]	@ (80015d0 <MX_USART2_UART_Init+0x4c>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80015ba:	4805      	ldr	r0, [pc, #20]	@ (80015d0 <MX_USART2_UART_Init+0x4c>)
 80015bc:	f002 fa94 	bl	8003ae8 <HAL_UART_Init>
 80015c0:	4603      	mov	r3, r0
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d001      	beq.n	80015ca <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80015c6:	f000 f8af 	bl	8001728 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80015ca:	bf00      	nop
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	200001c0 	.word	0x200001c0
 80015d4:	40004400 	.word	0x40004400

080015d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b088      	sub	sp, #32
 80015dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015de:	f107 0310 	add.w	r3, r7, #16
 80015e2:	2200      	movs	r2, #0
 80015e4:	601a      	str	r2, [r3, #0]
 80015e6:	605a      	str	r2, [r3, #4]
 80015e8:	609a      	str	r2, [r3, #8]
 80015ea:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015ec:	4b43      	ldr	r3, [pc, #268]	@ (80016fc <MX_GPIO_Init+0x124>)
 80015ee:	699b      	ldr	r3, [r3, #24]
 80015f0:	4a42      	ldr	r2, [pc, #264]	@ (80016fc <MX_GPIO_Init+0x124>)
 80015f2:	f043 0310 	orr.w	r3, r3, #16
 80015f6:	6193      	str	r3, [r2, #24]
 80015f8:	4b40      	ldr	r3, [pc, #256]	@ (80016fc <MX_GPIO_Init+0x124>)
 80015fa:	699b      	ldr	r3, [r3, #24]
 80015fc:	f003 0310 	and.w	r3, r3, #16
 8001600:	60fb      	str	r3, [r7, #12]
 8001602:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001604:	4b3d      	ldr	r3, [pc, #244]	@ (80016fc <MX_GPIO_Init+0x124>)
 8001606:	699b      	ldr	r3, [r3, #24]
 8001608:	4a3c      	ldr	r2, [pc, #240]	@ (80016fc <MX_GPIO_Init+0x124>)
 800160a:	f043 0304 	orr.w	r3, r3, #4
 800160e:	6193      	str	r3, [r2, #24]
 8001610:	4b3a      	ldr	r3, [pc, #232]	@ (80016fc <MX_GPIO_Init+0x124>)
 8001612:	699b      	ldr	r3, [r3, #24]
 8001614:	f003 0304 	and.w	r3, r3, #4
 8001618:	60bb      	str	r3, [r7, #8]
 800161a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800161c:	4b37      	ldr	r3, [pc, #220]	@ (80016fc <MX_GPIO_Init+0x124>)
 800161e:	699b      	ldr	r3, [r3, #24]
 8001620:	4a36      	ldr	r2, [pc, #216]	@ (80016fc <MX_GPIO_Init+0x124>)
 8001622:	f043 0308 	orr.w	r3, r3, #8
 8001626:	6193      	str	r3, [r2, #24]
 8001628:	4b34      	ldr	r3, [pc, #208]	@ (80016fc <MX_GPIO_Init+0x124>)
 800162a:	699b      	ldr	r3, [r3, #24]
 800162c:	f003 0308 	and.w	r3, r3, #8
 8001630:	607b      	str	r3, [r7, #4]
 8001632:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|LED2_B_Pin|LED2_A_Pin, GPIO_PIN_RESET);
 8001634:	2200      	movs	r2, #0
 8001636:	f44f 7148 	mov.w	r1, #800	@ 0x320
 800163a:	4831      	ldr	r0, [pc, #196]	@ (8001700 <MX_GPIO_Init+0x128>)
 800163c:	f000 fd85 	bl	800214a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_A_Pin|LED0_B_Pin|LED1_B_Pin|LED0_A_Pin
 8001640:	2200      	movs	r2, #0
 8001642:	f44f 618f 	mov.w	r1, #1144	@ 0x478
 8001646:	482f      	ldr	r0, [pc, #188]	@ (8001704 <MX_GPIO_Init+0x12c>)
 8001648:	f000 fd7f 	bl	800214a <HAL_GPIO_WritePin>
                          |LED3_A_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED3_B_Pin|SIGNAL_BUTTON_Pin, GPIO_PIN_RESET);
 800164c:	2200      	movs	r2, #0
 800164e:	f44f 7120 	mov.w	r1, #640	@ 0x280
 8001652:	482d      	ldr	r0, [pc, #180]	@ (8001708 <MX_GPIO_Init+0x130>)
 8001654:	f000 fd79 	bl	800214a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001658:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800165c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800165e:	4b2b      	ldr	r3, [pc, #172]	@ (800170c <MX_GPIO_Init+0x134>)
 8001660:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001662:	2300      	movs	r3, #0
 8001664:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001666:	f107 0310 	add.w	r3, r7, #16
 800166a:	4619      	mov	r1, r3
 800166c:	4826      	ldr	r0, [pc, #152]	@ (8001708 <MX_GPIO_Init+0x130>)
 800166e:	f000 fbd1 	bl	8001e14 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON0_Pin BUTTON1_Pin BUTTON2_Pin */
  GPIO_InitStruct.Pin = BUTTON0_Pin|BUTTON1_Pin|BUTTON2_Pin;
 8001672:	2313      	movs	r3, #19
 8001674:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001676:	2300      	movs	r3, #0
 8001678:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800167a:	2301      	movs	r3, #1
 800167c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800167e:	f107 0310 	add.w	r3, r7, #16
 8001682:	4619      	mov	r1, r3
 8001684:	481e      	ldr	r0, [pc, #120]	@ (8001700 <MX_GPIO_Init+0x128>)
 8001686:	f000 fbc5 	bl	8001e14 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LED2_B_Pin LED2_A_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LED2_B_Pin|LED2_A_Pin;
 800168a:	f44f 7348 	mov.w	r3, #800	@ 0x320
 800168e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001690:	2301      	movs	r3, #1
 8001692:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001694:	2300      	movs	r3, #0
 8001696:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001698:	2302      	movs	r3, #2
 800169a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800169c:	f107 0310 	add.w	r3, r7, #16
 80016a0:	4619      	mov	r1, r3
 80016a2:	4817      	ldr	r0, [pc, #92]	@ (8001700 <MX_GPIO_Init+0x128>)
 80016a4:	f000 fbb6 	bl	8001e14 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_A_Pin LED0_B_Pin LED1_B_Pin LED0_A_Pin
                           LED3_A_Pin */
  GPIO_InitStruct.Pin = LED1_A_Pin|LED0_B_Pin|LED1_B_Pin|LED0_A_Pin
 80016a8:	f44f 638f 	mov.w	r3, #1144	@ 0x478
 80016ac:	613b      	str	r3, [r7, #16]
                          |LED3_A_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016ae:	2301      	movs	r3, #1
 80016b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b2:	2300      	movs	r3, #0
 80016b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016b6:	2302      	movs	r3, #2
 80016b8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016ba:	f107 0310 	add.w	r3, r7, #16
 80016be:	4619      	mov	r1, r3
 80016c0:	4810      	ldr	r0, [pc, #64]	@ (8001704 <MX_GPIO_Init+0x12c>)
 80016c2:	f000 fba7 	bl	8001e14 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED3_B_Pin SIGNAL_BUTTON_Pin */
  GPIO_InitStruct.Pin = LED3_B_Pin|SIGNAL_BUTTON_Pin;
 80016c6:	f44f 7320 	mov.w	r3, #640	@ 0x280
 80016ca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016cc:	2301      	movs	r3, #1
 80016ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d0:	2300      	movs	r3, #0
 80016d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016d4:	2302      	movs	r3, #2
 80016d6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016d8:	f107 0310 	add.w	r3, r7, #16
 80016dc:	4619      	mov	r1, r3
 80016de:	480a      	ldr	r0, [pc, #40]	@ (8001708 <MX_GPIO_Init+0x130>)
 80016e0:	f000 fb98 	bl	8001e14 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80016e4:	2200      	movs	r2, #0
 80016e6:	2100      	movs	r1, #0
 80016e8:	2028      	movs	r0, #40	@ 0x28
 80016ea:	f000 fb5c 	bl	8001da6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80016ee:	2028      	movs	r0, #40	@ 0x28
 80016f0:	f000 fb75 	bl	8001dde <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80016f4:	bf00      	nop
 80016f6:	3720      	adds	r7, #32
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}
 80016fc:	40021000 	.word	0x40021000
 8001700:	40010800 	.word	0x40010800
 8001704:	40010c00 	.word	0x40010c00
 8001708:	40011000 	.word	0x40011000
 800170c:	10110000 	.word	0x10110000

08001710 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001710:	b580      	push	{r7, lr}
 8001712:	b082      	sub	sp, #8
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
	timerRun();
 8001718:	f000 f830 	bl	800177c <timerRun>
	getKeyInput();
 800171c:	f7fe fd5e 	bl	80001dc <getKeyInput>
}
 8001720:	bf00      	nop
 8001722:	3708      	adds	r7, #8
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}

08001728 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001728:	b480      	push	{r7}
 800172a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800172c:	b672      	cpsid	i
}
 800172e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001730:	bf00      	nop
 8001732:	e7fd      	b.n	8001730 <Error_Handler+0x8>

08001734 <setTimer>:

#define NUM_TIMERS 10 // Define the number of timers
Timer timers[NUM_TIMERS];
int timer_cycle = 10;

void setTimer(int index, int duration) {
 8001734:	b480      	push	{r7}
 8001736:	b083      	sub	sp, #12
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
 800173c:	6039      	str	r1, [r7, #0]
    if (index >= 0 && index < NUM_TIMERS) {
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	2b00      	cmp	r3, #0
 8001742:	db11      	blt.n	8001768 <setTimer+0x34>
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	2b09      	cmp	r3, #9
 8001748:	dc0e      	bgt.n	8001768 <setTimer+0x34>
        timers[index].counter = duration / timer_cycle;
 800174a:	4b0a      	ldr	r3, [pc, #40]	@ (8001774 <setTimer+0x40>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	683a      	ldr	r2, [r7, #0]
 8001750:	fb92 f2f3 	sdiv	r2, r2, r3
 8001754:	4908      	ldr	r1, [pc, #32]	@ (8001778 <setTimer+0x44>)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
        timers[index].flag = 0;
 800175c:	4a06      	ldr	r2, [pc, #24]	@ (8001778 <setTimer+0x44>)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	00db      	lsls	r3, r3, #3
 8001762:	4413      	add	r3, r2
 8001764:	2200      	movs	r2, #0
 8001766:	605a      	str	r2, [r3, #4]
    }
}
 8001768:	bf00      	nop
 800176a:	370c      	adds	r7, #12
 800176c:	46bd      	mov	sp, r7
 800176e:	bc80      	pop	{r7}
 8001770:	4770      	bx	lr
 8001772:	bf00      	nop
 8001774:	20000084 	.word	0x20000084
 8001778:	20000208 	.word	0x20000208

0800177c <timerRun>:

void timerRun() {
 800177c:	b480      	push	{r7}
 800177e:	b083      	sub	sp, #12
 8001780:	af00      	add	r7, sp, #0
    for (int i = 0; i < NUM_TIMERS; i++) {
 8001782:	2300      	movs	r3, #0
 8001784:	607b      	str	r3, [r7, #4]
 8001786:	e01d      	b.n	80017c4 <timerRun+0x48>
        if (timers[i].counter > 0) {
 8001788:	4a13      	ldr	r2, [pc, #76]	@ (80017d8 <timerRun+0x5c>)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001790:	2b00      	cmp	r3, #0
 8001792:	dd14      	ble.n	80017be <timerRun+0x42>
            timers[i].counter--;
 8001794:	4a10      	ldr	r2, [pc, #64]	@ (80017d8 <timerRun+0x5c>)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800179c:	1e5a      	subs	r2, r3, #1
 800179e:	490e      	ldr	r1, [pc, #56]	@ (80017d8 <timerRun+0x5c>)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
            if (timers[i].counter <= 0) {
 80017a6:	4a0c      	ldr	r2, [pc, #48]	@ (80017d8 <timerRun+0x5c>)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	dc05      	bgt.n	80017be <timerRun+0x42>
                timers[i].flag = 1;
 80017b2:	4a09      	ldr	r2, [pc, #36]	@ (80017d8 <timerRun+0x5c>)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	00db      	lsls	r3, r3, #3
 80017b8:	4413      	add	r3, r2
 80017ba:	2201      	movs	r2, #1
 80017bc:	605a      	str	r2, [r3, #4]
    for (int i = 0; i < NUM_TIMERS; i++) {
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	3301      	adds	r3, #1
 80017c2:	607b      	str	r3, [r7, #4]
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	2b09      	cmp	r3, #9
 80017c8:	ddde      	ble.n	8001788 <timerRun+0xc>
            }
        }
    }
}
 80017ca:	bf00      	nop
 80017cc:	bf00      	nop
 80017ce:	370c      	adds	r7, #12
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bc80      	pop	{r7}
 80017d4:	4770      	bx	lr
 80017d6:	bf00      	nop
 80017d8:	20000208 	.word	0x20000208

080017dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017dc:	b480      	push	{r7}
 80017de:	b085      	sub	sp, #20
 80017e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80017e2:	4b15      	ldr	r3, [pc, #84]	@ (8001838 <HAL_MspInit+0x5c>)
 80017e4:	699b      	ldr	r3, [r3, #24]
 80017e6:	4a14      	ldr	r2, [pc, #80]	@ (8001838 <HAL_MspInit+0x5c>)
 80017e8:	f043 0301 	orr.w	r3, r3, #1
 80017ec:	6193      	str	r3, [r2, #24]
 80017ee:	4b12      	ldr	r3, [pc, #72]	@ (8001838 <HAL_MspInit+0x5c>)
 80017f0:	699b      	ldr	r3, [r3, #24]
 80017f2:	f003 0301 	and.w	r3, r3, #1
 80017f6:	60bb      	str	r3, [r7, #8]
 80017f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017fa:	4b0f      	ldr	r3, [pc, #60]	@ (8001838 <HAL_MspInit+0x5c>)
 80017fc:	69db      	ldr	r3, [r3, #28]
 80017fe:	4a0e      	ldr	r2, [pc, #56]	@ (8001838 <HAL_MspInit+0x5c>)
 8001800:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001804:	61d3      	str	r3, [r2, #28]
 8001806:	4b0c      	ldr	r3, [pc, #48]	@ (8001838 <HAL_MspInit+0x5c>)
 8001808:	69db      	ldr	r3, [r3, #28]
 800180a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800180e:	607b      	str	r3, [r7, #4]
 8001810:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001812:	4b0a      	ldr	r3, [pc, #40]	@ (800183c <HAL_MspInit+0x60>)
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	60fb      	str	r3, [r7, #12]
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800181e:	60fb      	str	r3, [r7, #12]
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001826:	60fb      	str	r3, [r7, #12]
 8001828:	4a04      	ldr	r2, [pc, #16]	@ (800183c <HAL_MspInit+0x60>)
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800182e:	bf00      	nop
 8001830:	3714      	adds	r7, #20
 8001832:	46bd      	mov	sp, r7
 8001834:	bc80      	pop	{r7}
 8001836:	4770      	bx	lr
 8001838:	40021000 	.word	0x40021000
 800183c:	40010000 	.word	0x40010000

08001840 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b08a      	sub	sp, #40	@ 0x28
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001848:	f107 0314 	add.w	r3, r7, #20
 800184c:	2200      	movs	r2, #0
 800184e:	601a      	str	r2, [r3, #0]
 8001850:	605a      	str	r2, [r3, #4]
 8001852:	609a      	str	r2, [r3, #8]
 8001854:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	4a1d      	ldr	r2, [pc, #116]	@ (80018d0 <HAL_I2C_MspInit+0x90>)
 800185c:	4293      	cmp	r3, r2
 800185e:	d132      	bne.n	80018c6 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001860:	4b1c      	ldr	r3, [pc, #112]	@ (80018d4 <HAL_I2C_MspInit+0x94>)
 8001862:	699b      	ldr	r3, [r3, #24]
 8001864:	4a1b      	ldr	r2, [pc, #108]	@ (80018d4 <HAL_I2C_MspInit+0x94>)
 8001866:	f043 0308 	orr.w	r3, r3, #8
 800186a:	6193      	str	r3, [r2, #24]
 800186c:	4b19      	ldr	r3, [pc, #100]	@ (80018d4 <HAL_I2C_MspInit+0x94>)
 800186e:	699b      	ldr	r3, [r3, #24]
 8001870:	f003 0308 	and.w	r3, r3, #8
 8001874:	613b      	str	r3, [r7, #16]
 8001876:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001878:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800187c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800187e:	2312      	movs	r3, #18
 8001880:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001882:	2303      	movs	r3, #3
 8001884:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001886:	f107 0314 	add.w	r3, r7, #20
 800188a:	4619      	mov	r1, r3
 800188c:	4812      	ldr	r0, [pc, #72]	@ (80018d8 <HAL_I2C_MspInit+0x98>)
 800188e:	f000 fac1 	bl	8001e14 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8001892:	4b12      	ldr	r3, [pc, #72]	@ (80018dc <HAL_I2C_MspInit+0x9c>)
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	627b      	str	r3, [r7, #36]	@ 0x24
 8001898:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800189a:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 800189e:	627b      	str	r3, [r7, #36]	@ 0x24
 80018a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018a2:	f043 0302 	orr.w	r3, r3, #2
 80018a6:	627b      	str	r3, [r7, #36]	@ 0x24
 80018a8:	4a0c      	ldr	r2, [pc, #48]	@ (80018dc <HAL_I2C_MspInit+0x9c>)
 80018aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018ac:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80018ae:	4b09      	ldr	r3, [pc, #36]	@ (80018d4 <HAL_I2C_MspInit+0x94>)
 80018b0:	69db      	ldr	r3, [r3, #28]
 80018b2:	4a08      	ldr	r2, [pc, #32]	@ (80018d4 <HAL_I2C_MspInit+0x94>)
 80018b4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80018b8:	61d3      	str	r3, [r2, #28]
 80018ba:	4b06      	ldr	r3, [pc, #24]	@ (80018d4 <HAL_I2C_MspInit+0x94>)
 80018bc:	69db      	ldr	r3, [r3, #28]
 80018be:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80018c2:	60fb      	str	r3, [r7, #12]
 80018c4:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80018c6:	bf00      	nop
 80018c8:	3728      	adds	r7, #40	@ 0x28
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	bf00      	nop
 80018d0:	40005400 	.word	0x40005400
 80018d4:	40021000 	.word	0x40021000
 80018d8:	40010c00 	.word	0x40010c00
 80018dc:	40010000 	.word	0x40010000

080018e0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b084      	sub	sp, #16
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80018f0:	d113      	bne.n	800191a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80018f2:	4b0c      	ldr	r3, [pc, #48]	@ (8001924 <HAL_TIM_Base_MspInit+0x44>)
 80018f4:	69db      	ldr	r3, [r3, #28]
 80018f6:	4a0b      	ldr	r2, [pc, #44]	@ (8001924 <HAL_TIM_Base_MspInit+0x44>)
 80018f8:	f043 0301 	orr.w	r3, r3, #1
 80018fc:	61d3      	str	r3, [r2, #28]
 80018fe:	4b09      	ldr	r3, [pc, #36]	@ (8001924 <HAL_TIM_Base_MspInit+0x44>)
 8001900:	69db      	ldr	r3, [r3, #28]
 8001902:	f003 0301 	and.w	r3, r3, #1
 8001906:	60fb      	str	r3, [r7, #12]
 8001908:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800190a:	2200      	movs	r2, #0
 800190c:	2100      	movs	r1, #0
 800190e:	201c      	movs	r0, #28
 8001910:	f000 fa49 	bl	8001da6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001914:	201c      	movs	r0, #28
 8001916:	f000 fa62 	bl	8001dde <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 800191a:	bf00      	nop
 800191c:	3710      	adds	r7, #16
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}
 8001922:	bf00      	nop
 8001924:	40021000 	.word	0x40021000

08001928 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b088      	sub	sp, #32
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001930:	f107 0310 	add.w	r3, r7, #16
 8001934:	2200      	movs	r2, #0
 8001936:	601a      	str	r2, [r3, #0]
 8001938:	605a      	str	r2, [r3, #4]
 800193a:	609a      	str	r2, [r3, #8]
 800193c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4a1b      	ldr	r2, [pc, #108]	@ (80019b0 <HAL_UART_MspInit+0x88>)
 8001944:	4293      	cmp	r3, r2
 8001946:	d12f      	bne.n	80019a8 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001948:	4b1a      	ldr	r3, [pc, #104]	@ (80019b4 <HAL_UART_MspInit+0x8c>)
 800194a:	69db      	ldr	r3, [r3, #28]
 800194c:	4a19      	ldr	r2, [pc, #100]	@ (80019b4 <HAL_UART_MspInit+0x8c>)
 800194e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001952:	61d3      	str	r3, [r2, #28]
 8001954:	4b17      	ldr	r3, [pc, #92]	@ (80019b4 <HAL_UART_MspInit+0x8c>)
 8001956:	69db      	ldr	r3, [r3, #28]
 8001958:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800195c:	60fb      	str	r3, [r7, #12]
 800195e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001960:	4b14      	ldr	r3, [pc, #80]	@ (80019b4 <HAL_UART_MspInit+0x8c>)
 8001962:	699b      	ldr	r3, [r3, #24]
 8001964:	4a13      	ldr	r2, [pc, #76]	@ (80019b4 <HAL_UART_MspInit+0x8c>)
 8001966:	f043 0304 	orr.w	r3, r3, #4
 800196a:	6193      	str	r3, [r2, #24]
 800196c:	4b11      	ldr	r3, [pc, #68]	@ (80019b4 <HAL_UART_MspInit+0x8c>)
 800196e:	699b      	ldr	r3, [r3, #24]
 8001970:	f003 0304 	and.w	r3, r3, #4
 8001974:	60bb      	str	r3, [r7, #8]
 8001976:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001978:	2304      	movs	r3, #4
 800197a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800197c:	2302      	movs	r3, #2
 800197e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001980:	2303      	movs	r3, #3
 8001982:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001984:	f107 0310 	add.w	r3, r7, #16
 8001988:	4619      	mov	r1, r3
 800198a:	480b      	ldr	r0, [pc, #44]	@ (80019b8 <HAL_UART_MspInit+0x90>)
 800198c:	f000 fa42 	bl	8001e14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001990:	2308      	movs	r3, #8
 8001992:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001994:	2300      	movs	r3, #0
 8001996:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001998:	2300      	movs	r3, #0
 800199a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800199c:	f107 0310 	add.w	r3, r7, #16
 80019a0:	4619      	mov	r1, r3
 80019a2:	4805      	ldr	r0, [pc, #20]	@ (80019b8 <HAL_UART_MspInit+0x90>)
 80019a4:	f000 fa36 	bl	8001e14 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80019a8:	bf00      	nop
 80019aa:	3720      	adds	r7, #32
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bd80      	pop	{r7, pc}
 80019b0:	40004400 	.word	0x40004400
 80019b4:	40021000 	.word	0x40021000
 80019b8:	40010800 	.word	0x40010800

080019bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019bc:	b480      	push	{r7}
 80019be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80019c0:	bf00      	nop
 80019c2:	e7fd      	b.n	80019c0 <NMI_Handler+0x4>

080019c4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019c4:	b480      	push	{r7}
 80019c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019c8:	bf00      	nop
 80019ca:	e7fd      	b.n	80019c8 <HardFault_Handler+0x4>

080019cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019cc:	b480      	push	{r7}
 80019ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019d0:	bf00      	nop
 80019d2:	e7fd      	b.n	80019d0 <MemManage_Handler+0x4>

080019d4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019d4:	b480      	push	{r7}
 80019d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019d8:	bf00      	nop
 80019da:	e7fd      	b.n	80019d8 <BusFault_Handler+0x4>

080019dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019dc:	b480      	push	{r7}
 80019de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019e0:	bf00      	nop
 80019e2:	e7fd      	b.n	80019e0 <UsageFault_Handler+0x4>

080019e4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019e4:	b480      	push	{r7}
 80019e6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019e8:	bf00      	nop
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bc80      	pop	{r7}
 80019ee:	4770      	bx	lr

080019f0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019f0:	b480      	push	{r7}
 80019f2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019f4:	bf00      	nop
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bc80      	pop	{r7}
 80019fa:	4770      	bx	lr

080019fc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019fc:	b480      	push	{r7}
 80019fe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a00:	bf00      	nop
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bc80      	pop	{r7}
 8001a06:	4770      	bx	lr

08001a08 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a0c:	f000 f8b4 	bl	8001b78 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a10:	bf00      	nop
 8001a12:	bd80      	pop	{r7, pc}

08001a14 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001a18:	4802      	ldr	r0, [pc, #8]	@ (8001a24 <TIM2_IRQHandler+0x10>)
 8001a1a:	f001 fd15 	bl	8003448 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001a1e:	bf00      	nop
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	bf00      	nop
 8001a24:	20000178 	.word	0x20000178

08001a28 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b086      	sub	sp, #24
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a30:	4a14      	ldr	r2, [pc, #80]	@ (8001a84 <_sbrk+0x5c>)
 8001a32:	4b15      	ldr	r3, [pc, #84]	@ (8001a88 <_sbrk+0x60>)
 8001a34:	1ad3      	subs	r3, r2, r3
 8001a36:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a38:	697b      	ldr	r3, [r7, #20]
 8001a3a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a3c:	4b13      	ldr	r3, [pc, #76]	@ (8001a8c <_sbrk+0x64>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d102      	bne.n	8001a4a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a44:	4b11      	ldr	r3, [pc, #68]	@ (8001a8c <_sbrk+0x64>)
 8001a46:	4a12      	ldr	r2, [pc, #72]	@ (8001a90 <_sbrk+0x68>)
 8001a48:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a4a:	4b10      	ldr	r3, [pc, #64]	@ (8001a8c <_sbrk+0x64>)
 8001a4c:	681a      	ldr	r2, [r3, #0]
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	4413      	add	r3, r2
 8001a52:	693a      	ldr	r2, [r7, #16]
 8001a54:	429a      	cmp	r2, r3
 8001a56:	d207      	bcs.n	8001a68 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a58:	f002 f960 	bl	8003d1c <__errno>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	220c      	movs	r2, #12
 8001a60:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a62:	f04f 33ff 	mov.w	r3, #4294967295
 8001a66:	e009      	b.n	8001a7c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a68:	4b08      	ldr	r3, [pc, #32]	@ (8001a8c <_sbrk+0x64>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a6e:	4b07      	ldr	r3, [pc, #28]	@ (8001a8c <_sbrk+0x64>)
 8001a70:	681a      	ldr	r2, [r3, #0]
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	4413      	add	r3, r2
 8001a76:	4a05      	ldr	r2, [pc, #20]	@ (8001a8c <_sbrk+0x64>)
 8001a78:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a7a:	68fb      	ldr	r3, [r7, #12]
}
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	3718      	adds	r7, #24
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bd80      	pop	{r7, pc}
 8001a84:	20005000 	.word	0x20005000
 8001a88:	00000400 	.word	0x00000400
 8001a8c:	20000258 	.word	0x20000258
 8001a90:	200003a8 	.word	0x200003a8

08001a94 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001a94:	b480      	push	{r7}
 8001a96:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a98:	bf00      	nop
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bc80      	pop	{r7}
 8001a9e:	4770      	bx	lr

08001aa0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001aa0:	f7ff fff8 	bl	8001a94 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001aa4:	480b      	ldr	r0, [pc, #44]	@ (8001ad4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001aa6:	490c      	ldr	r1, [pc, #48]	@ (8001ad8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001aa8:	4a0c      	ldr	r2, [pc, #48]	@ (8001adc <LoopFillZerobss+0x16>)
  movs r3, #0
 8001aaa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001aac:	e002      	b.n	8001ab4 <LoopCopyDataInit>

08001aae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001aae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ab0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ab2:	3304      	adds	r3, #4

08001ab4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ab4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ab6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ab8:	d3f9      	bcc.n	8001aae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001aba:	4a09      	ldr	r2, [pc, #36]	@ (8001ae0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001abc:	4c09      	ldr	r4, [pc, #36]	@ (8001ae4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001abe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ac0:	e001      	b.n	8001ac6 <LoopFillZerobss>

08001ac2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ac2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ac4:	3204      	adds	r2, #4

08001ac6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ac6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ac8:	d3fb      	bcc.n	8001ac2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001aca:	f002 f92d 	bl	8003d28 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001ace:	f7ff fc7f 	bl	80013d0 <main>
  bx lr
 8001ad2:	4770      	bx	lr
  ldr r0, =_sdata
 8001ad4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ad8:	200000e4 	.word	0x200000e4
  ldr r2, =_sidata
 8001adc:	080046b4 	.word	0x080046b4
  ldr r2, =_sbss
 8001ae0:	200000e4 	.word	0x200000e4
  ldr r4, =_ebss
 8001ae4:	200003a8 	.word	0x200003a8

08001ae8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001ae8:	e7fe      	b.n	8001ae8 <ADC1_2_IRQHandler>
	...

08001aec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001af0:	4b08      	ldr	r3, [pc, #32]	@ (8001b14 <HAL_Init+0x28>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4a07      	ldr	r2, [pc, #28]	@ (8001b14 <HAL_Init+0x28>)
 8001af6:	f043 0310 	orr.w	r3, r3, #16
 8001afa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001afc:	2003      	movs	r0, #3
 8001afe:	f000 f947 	bl	8001d90 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b02:	200f      	movs	r0, #15
 8001b04:	f000 f808 	bl	8001b18 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b08:	f7ff fe68 	bl	80017dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b0c:	2300      	movs	r3, #0
}
 8001b0e:	4618      	mov	r0, r3
 8001b10:	bd80      	pop	{r7, pc}
 8001b12:	bf00      	nop
 8001b14:	40022000 	.word	0x40022000

08001b18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b082      	sub	sp, #8
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b20:	4b12      	ldr	r3, [pc, #72]	@ (8001b6c <HAL_InitTick+0x54>)
 8001b22:	681a      	ldr	r2, [r3, #0]
 8001b24:	4b12      	ldr	r3, [pc, #72]	@ (8001b70 <HAL_InitTick+0x58>)
 8001b26:	781b      	ldrb	r3, [r3, #0]
 8001b28:	4619      	mov	r1, r3
 8001b2a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b2e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b32:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b36:	4618      	mov	r0, r3
 8001b38:	f000 f95f 	bl	8001dfa <HAL_SYSTICK_Config>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d001      	beq.n	8001b46 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b42:	2301      	movs	r3, #1
 8001b44:	e00e      	b.n	8001b64 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	2b0f      	cmp	r3, #15
 8001b4a:	d80a      	bhi.n	8001b62 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	6879      	ldr	r1, [r7, #4]
 8001b50:	f04f 30ff 	mov.w	r0, #4294967295
 8001b54:	f000 f927 	bl	8001da6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b58:	4a06      	ldr	r2, [pc, #24]	@ (8001b74 <HAL_InitTick+0x5c>)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	e000      	b.n	8001b64 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b62:	2301      	movs	r3, #1
}
 8001b64:	4618      	mov	r0, r3
 8001b66:	3708      	adds	r7, #8
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd80      	pop	{r7, pc}
 8001b6c:	20000088 	.word	0x20000088
 8001b70:	20000090 	.word	0x20000090
 8001b74:	2000008c 	.word	0x2000008c

08001b78 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b7c:	4b05      	ldr	r3, [pc, #20]	@ (8001b94 <HAL_IncTick+0x1c>)
 8001b7e:	781b      	ldrb	r3, [r3, #0]
 8001b80:	461a      	mov	r2, r3
 8001b82:	4b05      	ldr	r3, [pc, #20]	@ (8001b98 <HAL_IncTick+0x20>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4413      	add	r3, r2
 8001b88:	4a03      	ldr	r2, [pc, #12]	@ (8001b98 <HAL_IncTick+0x20>)
 8001b8a:	6013      	str	r3, [r2, #0]
}
 8001b8c:	bf00      	nop
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bc80      	pop	{r7}
 8001b92:	4770      	bx	lr
 8001b94:	20000090 	.word	0x20000090
 8001b98:	2000025c 	.word	0x2000025c

08001b9c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	af00      	add	r7, sp, #0
  return uwTick;
 8001ba0:	4b02      	ldr	r3, [pc, #8]	@ (8001bac <HAL_GetTick+0x10>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
}
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bc80      	pop	{r7}
 8001baa:	4770      	bx	lr
 8001bac:	2000025c 	.word	0x2000025c

08001bb0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b084      	sub	sp, #16
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001bb8:	f7ff fff0 	bl	8001b9c <HAL_GetTick>
 8001bbc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bc8:	d005      	beq.n	8001bd6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001bca:	4b0a      	ldr	r3, [pc, #40]	@ (8001bf4 <HAL_Delay+0x44>)
 8001bcc:	781b      	ldrb	r3, [r3, #0]
 8001bce:	461a      	mov	r2, r3
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	4413      	add	r3, r2
 8001bd4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001bd6:	bf00      	nop
 8001bd8:	f7ff ffe0 	bl	8001b9c <HAL_GetTick>
 8001bdc:	4602      	mov	r2, r0
 8001bde:	68bb      	ldr	r3, [r7, #8]
 8001be0:	1ad3      	subs	r3, r2, r3
 8001be2:	68fa      	ldr	r2, [r7, #12]
 8001be4:	429a      	cmp	r2, r3
 8001be6:	d8f7      	bhi.n	8001bd8 <HAL_Delay+0x28>
  {
  }
}
 8001be8:	bf00      	nop
 8001bea:	bf00      	nop
 8001bec:	3710      	adds	r7, #16
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	bf00      	nop
 8001bf4:	20000090 	.word	0x20000090

08001bf8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b085      	sub	sp, #20
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	f003 0307 	and.w	r3, r3, #7
 8001c06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c08:	4b0c      	ldr	r3, [pc, #48]	@ (8001c3c <__NVIC_SetPriorityGrouping+0x44>)
 8001c0a:	68db      	ldr	r3, [r3, #12]
 8001c0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c0e:	68ba      	ldr	r2, [r7, #8]
 8001c10:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001c14:	4013      	ands	r3, r2
 8001c16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c1c:	68bb      	ldr	r3, [r7, #8]
 8001c1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c20:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001c24:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c2a:	4a04      	ldr	r2, [pc, #16]	@ (8001c3c <__NVIC_SetPriorityGrouping+0x44>)
 8001c2c:	68bb      	ldr	r3, [r7, #8]
 8001c2e:	60d3      	str	r3, [r2, #12]
}
 8001c30:	bf00      	nop
 8001c32:	3714      	adds	r7, #20
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bc80      	pop	{r7}
 8001c38:	4770      	bx	lr
 8001c3a:	bf00      	nop
 8001c3c:	e000ed00 	.word	0xe000ed00

08001c40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c40:	b480      	push	{r7}
 8001c42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c44:	4b04      	ldr	r3, [pc, #16]	@ (8001c58 <__NVIC_GetPriorityGrouping+0x18>)
 8001c46:	68db      	ldr	r3, [r3, #12]
 8001c48:	0a1b      	lsrs	r3, r3, #8
 8001c4a:	f003 0307 	and.w	r3, r3, #7
}
 8001c4e:	4618      	mov	r0, r3
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bc80      	pop	{r7}
 8001c54:	4770      	bx	lr
 8001c56:	bf00      	nop
 8001c58:	e000ed00 	.word	0xe000ed00

08001c5c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	b083      	sub	sp, #12
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	4603      	mov	r3, r0
 8001c64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	db0b      	blt.n	8001c86 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c6e:	79fb      	ldrb	r3, [r7, #7]
 8001c70:	f003 021f 	and.w	r2, r3, #31
 8001c74:	4906      	ldr	r1, [pc, #24]	@ (8001c90 <__NVIC_EnableIRQ+0x34>)
 8001c76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c7a:	095b      	lsrs	r3, r3, #5
 8001c7c:	2001      	movs	r0, #1
 8001c7e:	fa00 f202 	lsl.w	r2, r0, r2
 8001c82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c86:	bf00      	nop
 8001c88:	370c      	adds	r7, #12
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bc80      	pop	{r7}
 8001c8e:	4770      	bx	lr
 8001c90:	e000e100 	.word	0xe000e100

08001c94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c94:	b480      	push	{r7}
 8001c96:	b083      	sub	sp, #12
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	6039      	str	r1, [r7, #0]
 8001c9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ca0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	db0a      	blt.n	8001cbe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	b2da      	uxtb	r2, r3
 8001cac:	490c      	ldr	r1, [pc, #48]	@ (8001ce0 <__NVIC_SetPriority+0x4c>)
 8001cae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cb2:	0112      	lsls	r2, r2, #4
 8001cb4:	b2d2      	uxtb	r2, r2
 8001cb6:	440b      	add	r3, r1
 8001cb8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001cbc:	e00a      	b.n	8001cd4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	b2da      	uxtb	r2, r3
 8001cc2:	4908      	ldr	r1, [pc, #32]	@ (8001ce4 <__NVIC_SetPriority+0x50>)
 8001cc4:	79fb      	ldrb	r3, [r7, #7]
 8001cc6:	f003 030f 	and.w	r3, r3, #15
 8001cca:	3b04      	subs	r3, #4
 8001ccc:	0112      	lsls	r2, r2, #4
 8001cce:	b2d2      	uxtb	r2, r2
 8001cd0:	440b      	add	r3, r1
 8001cd2:	761a      	strb	r2, [r3, #24]
}
 8001cd4:	bf00      	nop
 8001cd6:	370c      	adds	r7, #12
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bc80      	pop	{r7}
 8001cdc:	4770      	bx	lr
 8001cde:	bf00      	nop
 8001ce0:	e000e100 	.word	0xe000e100
 8001ce4:	e000ed00 	.word	0xe000ed00

08001ce8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	b089      	sub	sp, #36	@ 0x24
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	60f8      	str	r0, [r7, #12]
 8001cf0:	60b9      	str	r1, [r7, #8]
 8001cf2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	f003 0307 	and.w	r3, r3, #7
 8001cfa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cfc:	69fb      	ldr	r3, [r7, #28]
 8001cfe:	f1c3 0307 	rsb	r3, r3, #7
 8001d02:	2b04      	cmp	r3, #4
 8001d04:	bf28      	it	cs
 8001d06:	2304      	movcs	r3, #4
 8001d08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d0a:	69fb      	ldr	r3, [r7, #28]
 8001d0c:	3304      	adds	r3, #4
 8001d0e:	2b06      	cmp	r3, #6
 8001d10:	d902      	bls.n	8001d18 <NVIC_EncodePriority+0x30>
 8001d12:	69fb      	ldr	r3, [r7, #28]
 8001d14:	3b03      	subs	r3, #3
 8001d16:	e000      	b.n	8001d1a <NVIC_EncodePriority+0x32>
 8001d18:	2300      	movs	r3, #0
 8001d1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d1c:	f04f 32ff 	mov.w	r2, #4294967295
 8001d20:	69bb      	ldr	r3, [r7, #24]
 8001d22:	fa02 f303 	lsl.w	r3, r2, r3
 8001d26:	43da      	mvns	r2, r3
 8001d28:	68bb      	ldr	r3, [r7, #8]
 8001d2a:	401a      	ands	r2, r3
 8001d2c:	697b      	ldr	r3, [r7, #20]
 8001d2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d30:	f04f 31ff 	mov.w	r1, #4294967295
 8001d34:	697b      	ldr	r3, [r7, #20]
 8001d36:	fa01 f303 	lsl.w	r3, r1, r3
 8001d3a:	43d9      	mvns	r1, r3
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d40:	4313      	orrs	r3, r2
         );
}
 8001d42:	4618      	mov	r0, r3
 8001d44:	3724      	adds	r7, #36	@ 0x24
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bc80      	pop	{r7}
 8001d4a:	4770      	bx	lr

08001d4c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b082      	sub	sp, #8
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	3b01      	subs	r3, #1
 8001d58:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001d5c:	d301      	bcc.n	8001d62 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d5e:	2301      	movs	r3, #1
 8001d60:	e00f      	b.n	8001d82 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d62:	4a0a      	ldr	r2, [pc, #40]	@ (8001d8c <SysTick_Config+0x40>)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	3b01      	subs	r3, #1
 8001d68:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d6a:	210f      	movs	r1, #15
 8001d6c:	f04f 30ff 	mov.w	r0, #4294967295
 8001d70:	f7ff ff90 	bl	8001c94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d74:	4b05      	ldr	r3, [pc, #20]	@ (8001d8c <SysTick_Config+0x40>)
 8001d76:	2200      	movs	r2, #0
 8001d78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d7a:	4b04      	ldr	r3, [pc, #16]	@ (8001d8c <SysTick_Config+0x40>)
 8001d7c:	2207      	movs	r2, #7
 8001d7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d80:	2300      	movs	r3, #0
}
 8001d82:	4618      	mov	r0, r3
 8001d84:	3708      	adds	r7, #8
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}
 8001d8a:	bf00      	nop
 8001d8c:	e000e010 	.word	0xe000e010

08001d90 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b082      	sub	sp, #8
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d98:	6878      	ldr	r0, [r7, #4]
 8001d9a:	f7ff ff2d 	bl	8001bf8 <__NVIC_SetPriorityGrouping>
}
 8001d9e:	bf00      	nop
 8001da0:	3708      	adds	r7, #8
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}

08001da6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001da6:	b580      	push	{r7, lr}
 8001da8:	b086      	sub	sp, #24
 8001daa:	af00      	add	r7, sp, #0
 8001dac:	4603      	mov	r3, r0
 8001dae:	60b9      	str	r1, [r7, #8]
 8001db0:	607a      	str	r2, [r7, #4]
 8001db2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001db4:	2300      	movs	r3, #0
 8001db6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001db8:	f7ff ff42 	bl	8001c40 <__NVIC_GetPriorityGrouping>
 8001dbc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001dbe:	687a      	ldr	r2, [r7, #4]
 8001dc0:	68b9      	ldr	r1, [r7, #8]
 8001dc2:	6978      	ldr	r0, [r7, #20]
 8001dc4:	f7ff ff90 	bl	8001ce8 <NVIC_EncodePriority>
 8001dc8:	4602      	mov	r2, r0
 8001dca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001dce:	4611      	mov	r1, r2
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	f7ff ff5f 	bl	8001c94 <__NVIC_SetPriority>
}
 8001dd6:	bf00      	nop
 8001dd8:	3718      	adds	r7, #24
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}

08001dde <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dde:	b580      	push	{r7, lr}
 8001de0:	b082      	sub	sp, #8
 8001de2:	af00      	add	r7, sp, #0
 8001de4:	4603      	mov	r3, r0
 8001de6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001de8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dec:	4618      	mov	r0, r3
 8001dee:	f7ff ff35 	bl	8001c5c <__NVIC_EnableIRQ>
}
 8001df2:	bf00      	nop
 8001df4:	3708      	adds	r7, #8
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}

08001dfa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001dfa:	b580      	push	{r7, lr}
 8001dfc:	b082      	sub	sp, #8
 8001dfe:	af00      	add	r7, sp, #0
 8001e00:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e02:	6878      	ldr	r0, [r7, #4]
 8001e04:	f7ff ffa2 	bl	8001d4c <SysTick_Config>
 8001e08:	4603      	mov	r3, r0
}
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	3708      	adds	r7, #8
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}
	...

08001e14 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e14:	b480      	push	{r7}
 8001e16:	b08b      	sub	sp, #44	@ 0x2c
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
 8001e1c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001e22:	2300      	movs	r3, #0
 8001e24:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e26:	e169      	b.n	80020fc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001e28:	2201      	movs	r2, #1
 8001e2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e30:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	69fa      	ldr	r2, [r7, #28]
 8001e38:	4013      	ands	r3, r2
 8001e3a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001e3c:	69ba      	ldr	r2, [r7, #24]
 8001e3e:	69fb      	ldr	r3, [r7, #28]
 8001e40:	429a      	cmp	r2, r3
 8001e42:	f040 8158 	bne.w	80020f6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	4a9a      	ldr	r2, [pc, #616]	@ (80020b4 <HAL_GPIO_Init+0x2a0>)
 8001e4c:	4293      	cmp	r3, r2
 8001e4e:	d05e      	beq.n	8001f0e <HAL_GPIO_Init+0xfa>
 8001e50:	4a98      	ldr	r2, [pc, #608]	@ (80020b4 <HAL_GPIO_Init+0x2a0>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d875      	bhi.n	8001f42 <HAL_GPIO_Init+0x12e>
 8001e56:	4a98      	ldr	r2, [pc, #608]	@ (80020b8 <HAL_GPIO_Init+0x2a4>)
 8001e58:	4293      	cmp	r3, r2
 8001e5a:	d058      	beq.n	8001f0e <HAL_GPIO_Init+0xfa>
 8001e5c:	4a96      	ldr	r2, [pc, #600]	@ (80020b8 <HAL_GPIO_Init+0x2a4>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d86f      	bhi.n	8001f42 <HAL_GPIO_Init+0x12e>
 8001e62:	4a96      	ldr	r2, [pc, #600]	@ (80020bc <HAL_GPIO_Init+0x2a8>)
 8001e64:	4293      	cmp	r3, r2
 8001e66:	d052      	beq.n	8001f0e <HAL_GPIO_Init+0xfa>
 8001e68:	4a94      	ldr	r2, [pc, #592]	@ (80020bc <HAL_GPIO_Init+0x2a8>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d869      	bhi.n	8001f42 <HAL_GPIO_Init+0x12e>
 8001e6e:	4a94      	ldr	r2, [pc, #592]	@ (80020c0 <HAL_GPIO_Init+0x2ac>)
 8001e70:	4293      	cmp	r3, r2
 8001e72:	d04c      	beq.n	8001f0e <HAL_GPIO_Init+0xfa>
 8001e74:	4a92      	ldr	r2, [pc, #584]	@ (80020c0 <HAL_GPIO_Init+0x2ac>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d863      	bhi.n	8001f42 <HAL_GPIO_Init+0x12e>
 8001e7a:	4a92      	ldr	r2, [pc, #584]	@ (80020c4 <HAL_GPIO_Init+0x2b0>)
 8001e7c:	4293      	cmp	r3, r2
 8001e7e:	d046      	beq.n	8001f0e <HAL_GPIO_Init+0xfa>
 8001e80:	4a90      	ldr	r2, [pc, #576]	@ (80020c4 <HAL_GPIO_Init+0x2b0>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d85d      	bhi.n	8001f42 <HAL_GPIO_Init+0x12e>
 8001e86:	2b12      	cmp	r3, #18
 8001e88:	d82a      	bhi.n	8001ee0 <HAL_GPIO_Init+0xcc>
 8001e8a:	2b12      	cmp	r3, #18
 8001e8c:	d859      	bhi.n	8001f42 <HAL_GPIO_Init+0x12e>
 8001e8e:	a201      	add	r2, pc, #4	@ (adr r2, 8001e94 <HAL_GPIO_Init+0x80>)
 8001e90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e94:	08001f0f 	.word	0x08001f0f
 8001e98:	08001ee9 	.word	0x08001ee9
 8001e9c:	08001efb 	.word	0x08001efb
 8001ea0:	08001f3d 	.word	0x08001f3d
 8001ea4:	08001f43 	.word	0x08001f43
 8001ea8:	08001f43 	.word	0x08001f43
 8001eac:	08001f43 	.word	0x08001f43
 8001eb0:	08001f43 	.word	0x08001f43
 8001eb4:	08001f43 	.word	0x08001f43
 8001eb8:	08001f43 	.word	0x08001f43
 8001ebc:	08001f43 	.word	0x08001f43
 8001ec0:	08001f43 	.word	0x08001f43
 8001ec4:	08001f43 	.word	0x08001f43
 8001ec8:	08001f43 	.word	0x08001f43
 8001ecc:	08001f43 	.word	0x08001f43
 8001ed0:	08001f43 	.word	0x08001f43
 8001ed4:	08001f43 	.word	0x08001f43
 8001ed8:	08001ef1 	.word	0x08001ef1
 8001edc:	08001f05 	.word	0x08001f05
 8001ee0:	4a79      	ldr	r2, [pc, #484]	@ (80020c8 <HAL_GPIO_Init+0x2b4>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d013      	beq.n	8001f0e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001ee6:	e02c      	b.n	8001f42 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	68db      	ldr	r3, [r3, #12]
 8001eec:	623b      	str	r3, [r7, #32]
          break;
 8001eee:	e029      	b.n	8001f44 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	68db      	ldr	r3, [r3, #12]
 8001ef4:	3304      	adds	r3, #4
 8001ef6:	623b      	str	r3, [r7, #32]
          break;
 8001ef8:	e024      	b.n	8001f44 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	68db      	ldr	r3, [r3, #12]
 8001efe:	3308      	adds	r3, #8
 8001f00:	623b      	str	r3, [r7, #32]
          break;
 8001f02:	e01f      	b.n	8001f44 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	68db      	ldr	r3, [r3, #12]
 8001f08:	330c      	adds	r3, #12
 8001f0a:	623b      	str	r3, [r7, #32]
          break;
 8001f0c:	e01a      	b.n	8001f44 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	689b      	ldr	r3, [r3, #8]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d102      	bne.n	8001f1c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001f16:	2304      	movs	r3, #4
 8001f18:	623b      	str	r3, [r7, #32]
          break;
 8001f1a:	e013      	b.n	8001f44 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	689b      	ldr	r3, [r3, #8]
 8001f20:	2b01      	cmp	r3, #1
 8001f22:	d105      	bne.n	8001f30 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f24:	2308      	movs	r3, #8
 8001f26:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	69fa      	ldr	r2, [r7, #28]
 8001f2c:	611a      	str	r2, [r3, #16]
          break;
 8001f2e:	e009      	b.n	8001f44 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f30:	2308      	movs	r3, #8
 8001f32:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	69fa      	ldr	r2, [r7, #28]
 8001f38:	615a      	str	r2, [r3, #20]
          break;
 8001f3a:	e003      	b.n	8001f44 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	623b      	str	r3, [r7, #32]
          break;
 8001f40:	e000      	b.n	8001f44 <HAL_GPIO_Init+0x130>
          break;
 8001f42:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001f44:	69bb      	ldr	r3, [r7, #24]
 8001f46:	2bff      	cmp	r3, #255	@ 0xff
 8001f48:	d801      	bhi.n	8001f4e <HAL_GPIO_Init+0x13a>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	e001      	b.n	8001f52 <HAL_GPIO_Init+0x13e>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	3304      	adds	r3, #4
 8001f52:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001f54:	69bb      	ldr	r3, [r7, #24]
 8001f56:	2bff      	cmp	r3, #255	@ 0xff
 8001f58:	d802      	bhi.n	8001f60 <HAL_GPIO_Init+0x14c>
 8001f5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f5c:	009b      	lsls	r3, r3, #2
 8001f5e:	e002      	b.n	8001f66 <HAL_GPIO_Init+0x152>
 8001f60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f62:	3b08      	subs	r3, #8
 8001f64:	009b      	lsls	r3, r3, #2
 8001f66:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001f68:	697b      	ldr	r3, [r7, #20]
 8001f6a:	681a      	ldr	r2, [r3, #0]
 8001f6c:	210f      	movs	r1, #15
 8001f6e:	693b      	ldr	r3, [r7, #16]
 8001f70:	fa01 f303 	lsl.w	r3, r1, r3
 8001f74:	43db      	mvns	r3, r3
 8001f76:	401a      	ands	r2, r3
 8001f78:	6a39      	ldr	r1, [r7, #32]
 8001f7a:	693b      	ldr	r3, [r7, #16]
 8001f7c:	fa01 f303 	lsl.w	r3, r1, r3
 8001f80:	431a      	orrs	r2, r3
 8001f82:	697b      	ldr	r3, [r7, #20]
 8001f84:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	f000 80b1 	beq.w	80020f6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001f94:	4b4d      	ldr	r3, [pc, #308]	@ (80020cc <HAL_GPIO_Init+0x2b8>)
 8001f96:	699b      	ldr	r3, [r3, #24]
 8001f98:	4a4c      	ldr	r2, [pc, #304]	@ (80020cc <HAL_GPIO_Init+0x2b8>)
 8001f9a:	f043 0301 	orr.w	r3, r3, #1
 8001f9e:	6193      	str	r3, [r2, #24]
 8001fa0:	4b4a      	ldr	r3, [pc, #296]	@ (80020cc <HAL_GPIO_Init+0x2b8>)
 8001fa2:	699b      	ldr	r3, [r3, #24]
 8001fa4:	f003 0301 	and.w	r3, r3, #1
 8001fa8:	60bb      	str	r3, [r7, #8]
 8001faa:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001fac:	4a48      	ldr	r2, [pc, #288]	@ (80020d0 <HAL_GPIO_Init+0x2bc>)
 8001fae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fb0:	089b      	lsrs	r3, r3, #2
 8001fb2:	3302      	adds	r3, #2
 8001fb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fb8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001fba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fbc:	f003 0303 	and.w	r3, r3, #3
 8001fc0:	009b      	lsls	r3, r3, #2
 8001fc2:	220f      	movs	r2, #15
 8001fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc8:	43db      	mvns	r3, r3
 8001fca:	68fa      	ldr	r2, [r7, #12]
 8001fcc:	4013      	ands	r3, r2
 8001fce:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	4a40      	ldr	r2, [pc, #256]	@ (80020d4 <HAL_GPIO_Init+0x2c0>)
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	d013      	beq.n	8002000 <HAL_GPIO_Init+0x1ec>
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	4a3f      	ldr	r2, [pc, #252]	@ (80020d8 <HAL_GPIO_Init+0x2c4>)
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	d00d      	beq.n	8001ffc <HAL_GPIO_Init+0x1e8>
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	4a3e      	ldr	r2, [pc, #248]	@ (80020dc <HAL_GPIO_Init+0x2c8>)
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d007      	beq.n	8001ff8 <HAL_GPIO_Init+0x1e4>
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	4a3d      	ldr	r2, [pc, #244]	@ (80020e0 <HAL_GPIO_Init+0x2cc>)
 8001fec:	4293      	cmp	r3, r2
 8001fee:	d101      	bne.n	8001ff4 <HAL_GPIO_Init+0x1e0>
 8001ff0:	2303      	movs	r3, #3
 8001ff2:	e006      	b.n	8002002 <HAL_GPIO_Init+0x1ee>
 8001ff4:	2304      	movs	r3, #4
 8001ff6:	e004      	b.n	8002002 <HAL_GPIO_Init+0x1ee>
 8001ff8:	2302      	movs	r3, #2
 8001ffa:	e002      	b.n	8002002 <HAL_GPIO_Init+0x1ee>
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	e000      	b.n	8002002 <HAL_GPIO_Init+0x1ee>
 8002000:	2300      	movs	r3, #0
 8002002:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002004:	f002 0203 	and.w	r2, r2, #3
 8002008:	0092      	lsls	r2, r2, #2
 800200a:	4093      	lsls	r3, r2
 800200c:	68fa      	ldr	r2, [r7, #12]
 800200e:	4313      	orrs	r3, r2
 8002010:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002012:	492f      	ldr	r1, [pc, #188]	@ (80020d0 <HAL_GPIO_Init+0x2bc>)
 8002014:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002016:	089b      	lsrs	r3, r3, #2
 8002018:	3302      	adds	r3, #2
 800201a:	68fa      	ldr	r2, [r7, #12]
 800201c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002028:	2b00      	cmp	r3, #0
 800202a:	d006      	beq.n	800203a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800202c:	4b2d      	ldr	r3, [pc, #180]	@ (80020e4 <HAL_GPIO_Init+0x2d0>)
 800202e:	689a      	ldr	r2, [r3, #8]
 8002030:	492c      	ldr	r1, [pc, #176]	@ (80020e4 <HAL_GPIO_Init+0x2d0>)
 8002032:	69bb      	ldr	r3, [r7, #24]
 8002034:	4313      	orrs	r3, r2
 8002036:	608b      	str	r3, [r1, #8]
 8002038:	e006      	b.n	8002048 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800203a:	4b2a      	ldr	r3, [pc, #168]	@ (80020e4 <HAL_GPIO_Init+0x2d0>)
 800203c:	689a      	ldr	r2, [r3, #8]
 800203e:	69bb      	ldr	r3, [r7, #24]
 8002040:	43db      	mvns	r3, r3
 8002042:	4928      	ldr	r1, [pc, #160]	@ (80020e4 <HAL_GPIO_Init+0x2d0>)
 8002044:	4013      	ands	r3, r2
 8002046:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002050:	2b00      	cmp	r3, #0
 8002052:	d006      	beq.n	8002062 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002054:	4b23      	ldr	r3, [pc, #140]	@ (80020e4 <HAL_GPIO_Init+0x2d0>)
 8002056:	68da      	ldr	r2, [r3, #12]
 8002058:	4922      	ldr	r1, [pc, #136]	@ (80020e4 <HAL_GPIO_Init+0x2d0>)
 800205a:	69bb      	ldr	r3, [r7, #24]
 800205c:	4313      	orrs	r3, r2
 800205e:	60cb      	str	r3, [r1, #12]
 8002060:	e006      	b.n	8002070 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002062:	4b20      	ldr	r3, [pc, #128]	@ (80020e4 <HAL_GPIO_Init+0x2d0>)
 8002064:	68da      	ldr	r2, [r3, #12]
 8002066:	69bb      	ldr	r3, [r7, #24]
 8002068:	43db      	mvns	r3, r3
 800206a:	491e      	ldr	r1, [pc, #120]	@ (80020e4 <HAL_GPIO_Init+0x2d0>)
 800206c:	4013      	ands	r3, r2
 800206e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002078:	2b00      	cmp	r3, #0
 800207a:	d006      	beq.n	800208a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800207c:	4b19      	ldr	r3, [pc, #100]	@ (80020e4 <HAL_GPIO_Init+0x2d0>)
 800207e:	685a      	ldr	r2, [r3, #4]
 8002080:	4918      	ldr	r1, [pc, #96]	@ (80020e4 <HAL_GPIO_Init+0x2d0>)
 8002082:	69bb      	ldr	r3, [r7, #24]
 8002084:	4313      	orrs	r3, r2
 8002086:	604b      	str	r3, [r1, #4]
 8002088:	e006      	b.n	8002098 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800208a:	4b16      	ldr	r3, [pc, #88]	@ (80020e4 <HAL_GPIO_Init+0x2d0>)
 800208c:	685a      	ldr	r2, [r3, #4]
 800208e:	69bb      	ldr	r3, [r7, #24]
 8002090:	43db      	mvns	r3, r3
 8002092:	4914      	ldr	r1, [pc, #80]	@ (80020e4 <HAL_GPIO_Init+0x2d0>)
 8002094:	4013      	ands	r3, r2
 8002096:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d021      	beq.n	80020e8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80020a4:	4b0f      	ldr	r3, [pc, #60]	@ (80020e4 <HAL_GPIO_Init+0x2d0>)
 80020a6:	681a      	ldr	r2, [r3, #0]
 80020a8:	490e      	ldr	r1, [pc, #56]	@ (80020e4 <HAL_GPIO_Init+0x2d0>)
 80020aa:	69bb      	ldr	r3, [r7, #24]
 80020ac:	4313      	orrs	r3, r2
 80020ae:	600b      	str	r3, [r1, #0]
 80020b0:	e021      	b.n	80020f6 <HAL_GPIO_Init+0x2e2>
 80020b2:	bf00      	nop
 80020b4:	10320000 	.word	0x10320000
 80020b8:	10310000 	.word	0x10310000
 80020bc:	10220000 	.word	0x10220000
 80020c0:	10210000 	.word	0x10210000
 80020c4:	10120000 	.word	0x10120000
 80020c8:	10110000 	.word	0x10110000
 80020cc:	40021000 	.word	0x40021000
 80020d0:	40010000 	.word	0x40010000
 80020d4:	40010800 	.word	0x40010800
 80020d8:	40010c00 	.word	0x40010c00
 80020dc:	40011000 	.word	0x40011000
 80020e0:	40011400 	.word	0x40011400
 80020e4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80020e8:	4b0b      	ldr	r3, [pc, #44]	@ (8002118 <HAL_GPIO_Init+0x304>)
 80020ea:	681a      	ldr	r2, [r3, #0]
 80020ec:	69bb      	ldr	r3, [r7, #24]
 80020ee:	43db      	mvns	r3, r3
 80020f0:	4909      	ldr	r1, [pc, #36]	@ (8002118 <HAL_GPIO_Init+0x304>)
 80020f2:	4013      	ands	r3, r2
 80020f4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80020f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020f8:	3301      	adds	r3, #1
 80020fa:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	681a      	ldr	r2, [r3, #0]
 8002100:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002102:	fa22 f303 	lsr.w	r3, r2, r3
 8002106:	2b00      	cmp	r3, #0
 8002108:	f47f ae8e 	bne.w	8001e28 <HAL_GPIO_Init+0x14>
  }
}
 800210c:	bf00      	nop
 800210e:	bf00      	nop
 8002110:	372c      	adds	r7, #44	@ 0x2c
 8002112:	46bd      	mov	sp, r7
 8002114:	bc80      	pop	{r7}
 8002116:	4770      	bx	lr
 8002118:	40010400 	.word	0x40010400

0800211c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800211c:	b480      	push	{r7}
 800211e:	b085      	sub	sp, #20
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
 8002124:	460b      	mov	r3, r1
 8002126:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	689a      	ldr	r2, [r3, #8]
 800212c:	887b      	ldrh	r3, [r7, #2]
 800212e:	4013      	ands	r3, r2
 8002130:	2b00      	cmp	r3, #0
 8002132:	d002      	beq.n	800213a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002134:	2301      	movs	r3, #1
 8002136:	73fb      	strb	r3, [r7, #15]
 8002138:	e001      	b.n	800213e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800213a:	2300      	movs	r3, #0
 800213c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800213e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002140:	4618      	mov	r0, r3
 8002142:	3714      	adds	r7, #20
 8002144:	46bd      	mov	sp, r7
 8002146:	bc80      	pop	{r7}
 8002148:	4770      	bx	lr

0800214a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800214a:	b480      	push	{r7}
 800214c:	b083      	sub	sp, #12
 800214e:	af00      	add	r7, sp, #0
 8002150:	6078      	str	r0, [r7, #4]
 8002152:	460b      	mov	r3, r1
 8002154:	807b      	strh	r3, [r7, #2]
 8002156:	4613      	mov	r3, r2
 8002158:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800215a:	787b      	ldrb	r3, [r7, #1]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d003      	beq.n	8002168 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002160:	887a      	ldrh	r2, [r7, #2]
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002166:	e003      	b.n	8002170 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002168:	887b      	ldrh	r3, [r7, #2]
 800216a:	041a      	lsls	r2, r3, #16
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	611a      	str	r2, [r3, #16]
}
 8002170:	bf00      	nop
 8002172:	370c      	adds	r7, #12
 8002174:	46bd      	mov	sp, r7
 8002176:	bc80      	pop	{r7}
 8002178:	4770      	bx	lr

0800217a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800217a:	b480      	push	{r7}
 800217c:	b085      	sub	sp, #20
 800217e:	af00      	add	r7, sp, #0
 8002180:	6078      	str	r0, [r7, #4]
 8002182:	460b      	mov	r3, r1
 8002184:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	68db      	ldr	r3, [r3, #12]
 800218a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800218c:	887a      	ldrh	r2, [r7, #2]
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	4013      	ands	r3, r2
 8002192:	041a      	lsls	r2, r3, #16
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	43d9      	mvns	r1, r3
 8002198:	887b      	ldrh	r3, [r7, #2]
 800219a:	400b      	ands	r3, r1
 800219c:	431a      	orrs	r2, r3
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	611a      	str	r2, [r3, #16]
}
 80021a2:	bf00      	nop
 80021a4:	3714      	adds	r7, #20
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bc80      	pop	{r7}
 80021aa:	4770      	bx	lr

080021ac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b084      	sub	sp, #16
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d101      	bne.n	80021be <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80021ba:	2301      	movs	r3, #1
 80021bc:	e12b      	b.n	8002416 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80021c4:	b2db      	uxtb	r3, r3
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d106      	bne.n	80021d8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	2200      	movs	r2, #0
 80021ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80021d2:	6878      	ldr	r0, [r7, #4]
 80021d4:	f7ff fb34 	bl	8001840 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2224      	movs	r2, #36	@ 0x24
 80021dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	681a      	ldr	r2, [r3, #0]
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f022 0201 	bic.w	r2, r2, #1
 80021ee:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	681a      	ldr	r2, [r3, #0]
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80021fe:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	681a      	ldr	r2, [r3, #0]
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800220e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002210:	f001 f832 	bl	8003278 <HAL_RCC_GetPCLK1Freq>
 8002214:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	4a81      	ldr	r2, [pc, #516]	@ (8002420 <HAL_I2C_Init+0x274>)
 800221c:	4293      	cmp	r3, r2
 800221e:	d807      	bhi.n	8002230 <HAL_I2C_Init+0x84>
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	4a80      	ldr	r2, [pc, #512]	@ (8002424 <HAL_I2C_Init+0x278>)
 8002224:	4293      	cmp	r3, r2
 8002226:	bf94      	ite	ls
 8002228:	2301      	movls	r3, #1
 800222a:	2300      	movhi	r3, #0
 800222c:	b2db      	uxtb	r3, r3
 800222e:	e006      	b.n	800223e <HAL_I2C_Init+0x92>
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	4a7d      	ldr	r2, [pc, #500]	@ (8002428 <HAL_I2C_Init+0x27c>)
 8002234:	4293      	cmp	r3, r2
 8002236:	bf94      	ite	ls
 8002238:	2301      	movls	r3, #1
 800223a:	2300      	movhi	r3, #0
 800223c:	b2db      	uxtb	r3, r3
 800223e:	2b00      	cmp	r3, #0
 8002240:	d001      	beq.n	8002246 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002242:	2301      	movs	r3, #1
 8002244:	e0e7      	b.n	8002416 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	4a78      	ldr	r2, [pc, #480]	@ (800242c <HAL_I2C_Init+0x280>)
 800224a:	fba2 2303 	umull	r2, r3, r2, r3
 800224e:	0c9b      	lsrs	r3, r3, #18
 8002250:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	68ba      	ldr	r2, [r7, #8]
 8002262:	430a      	orrs	r2, r1
 8002264:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	6a1b      	ldr	r3, [r3, #32]
 800226c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	4a6a      	ldr	r2, [pc, #424]	@ (8002420 <HAL_I2C_Init+0x274>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d802      	bhi.n	8002280 <HAL_I2C_Init+0xd4>
 800227a:	68bb      	ldr	r3, [r7, #8]
 800227c:	3301      	adds	r3, #1
 800227e:	e009      	b.n	8002294 <HAL_I2C_Init+0xe8>
 8002280:	68bb      	ldr	r3, [r7, #8]
 8002282:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002286:	fb02 f303 	mul.w	r3, r2, r3
 800228a:	4a69      	ldr	r2, [pc, #420]	@ (8002430 <HAL_I2C_Init+0x284>)
 800228c:	fba2 2303 	umull	r2, r3, r2, r3
 8002290:	099b      	lsrs	r3, r3, #6
 8002292:	3301      	adds	r3, #1
 8002294:	687a      	ldr	r2, [r7, #4]
 8002296:	6812      	ldr	r2, [r2, #0]
 8002298:	430b      	orrs	r3, r1
 800229a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	69db      	ldr	r3, [r3, #28]
 80022a2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80022a6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	495c      	ldr	r1, [pc, #368]	@ (8002420 <HAL_I2C_Init+0x274>)
 80022b0:	428b      	cmp	r3, r1
 80022b2:	d819      	bhi.n	80022e8 <HAL_I2C_Init+0x13c>
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	1e59      	subs	r1, r3, #1
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	005b      	lsls	r3, r3, #1
 80022be:	fbb1 f3f3 	udiv	r3, r1, r3
 80022c2:	1c59      	adds	r1, r3, #1
 80022c4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80022c8:	400b      	ands	r3, r1
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d00a      	beq.n	80022e4 <HAL_I2C_Init+0x138>
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	1e59      	subs	r1, r3, #1
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	005b      	lsls	r3, r3, #1
 80022d8:	fbb1 f3f3 	udiv	r3, r1, r3
 80022dc:	3301      	adds	r3, #1
 80022de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022e2:	e051      	b.n	8002388 <HAL_I2C_Init+0x1dc>
 80022e4:	2304      	movs	r3, #4
 80022e6:	e04f      	b.n	8002388 <HAL_I2C_Init+0x1dc>
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	689b      	ldr	r3, [r3, #8]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d111      	bne.n	8002314 <HAL_I2C_Init+0x168>
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	1e58      	subs	r0, r3, #1
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6859      	ldr	r1, [r3, #4]
 80022f8:	460b      	mov	r3, r1
 80022fa:	005b      	lsls	r3, r3, #1
 80022fc:	440b      	add	r3, r1
 80022fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8002302:	3301      	adds	r3, #1
 8002304:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002308:	2b00      	cmp	r3, #0
 800230a:	bf0c      	ite	eq
 800230c:	2301      	moveq	r3, #1
 800230e:	2300      	movne	r3, #0
 8002310:	b2db      	uxtb	r3, r3
 8002312:	e012      	b.n	800233a <HAL_I2C_Init+0x18e>
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	1e58      	subs	r0, r3, #1
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6859      	ldr	r1, [r3, #4]
 800231c:	460b      	mov	r3, r1
 800231e:	009b      	lsls	r3, r3, #2
 8002320:	440b      	add	r3, r1
 8002322:	0099      	lsls	r1, r3, #2
 8002324:	440b      	add	r3, r1
 8002326:	fbb0 f3f3 	udiv	r3, r0, r3
 800232a:	3301      	adds	r3, #1
 800232c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002330:	2b00      	cmp	r3, #0
 8002332:	bf0c      	ite	eq
 8002334:	2301      	moveq	r3, #1
 8002336:	2300      	movne	r3, #0
 8002338:	b2db      	uxtb	r3, r3
 800233a:	2b00      	cmp	r3, #0
 800233c:	d001      	beq.n	8002342 <HAL_I2C_Init+0x196>
 800233e:	2301      	movs	r3, #1
 8002340:	e022      	b.n	8002388 <HAL_I2C_Init+0x1dc>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	689b      	ldr	r3, [r3, #8]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d10e      	bne.n	8002368 <HAL_I2C_Init+0x1bc>
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	1e58      	subs	r0, r3, #1
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6859      	ldr	r1, [r3, #4]
 8002352:	460b      	mov	r3, r1
 8002354:	005b      	lsls	r3, r3, #1
 8002356:	440b      	add	r3, r1
 8002358:	fbb0 f3f3 	udiv	r3, r0, r3
 800235c:	3301      	adds	r3, #1
 800235e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002362:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002366:	e00f      	b.n	8002388 <HAL_I2C_Init+0x1dc>
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	1e58      	subs	r0, r3, #1
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6859      	ldr	r1, [r3, #4]
 8002370:	460b      	mov	r3, r1
 8002372:	009b      	lsls	r3, r3, #2
 8002374:	440b      	add	r3, r1
 8002376:	0099      	lsls	r1, r3, #2
 8002378:	440b      	add	r3, r1
 800237a:	fbb0 f3f3 	udiv	r3, r0, r3
 800237e:	3301      	adds	r3, #1
 8002380:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002384:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002388:	6879      	ldr	r1, [r7, #4]
 800238a:	6809      	ldr	r1, [r1, #0]
 800238c:	4313      	orrs	r3, r2
 800238e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	69da      	ldr	r2, [r3, #28]
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6a1b      	ldr	r3, [r3, #32]
 80023a2:	431a      	orrs	r2, r3
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	430a      	orrs	r2, r1
 80023aa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	689b      	ldr	r3, [r3, #8]
 80023b2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80023b6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80023ba:	687a      	ldr	r2, [r7, #4]
 80023bc:	6911      	ldr	r1, [r2, #16]
 80023be:	687a      	ldr	r2, [r7, #4]
 80023c0:	68d2      	ldr	r2, [r2, #12]
 80023c2:	4311      	orrs	r1, r2
 80023c4:	687a      	ldr	r2, [r7, #4]
 80023c6:	6812      	ldr	r2, [r2, #0]
 80023c8:	430b      	orrs	r3, r1
 80023ca:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	68db      	ldr	r3, [r3, #12]
 80023d2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	695a      	ldr	r2, [r3, #20]
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	699b      	ldr	r3, [r3, #24]
 80023de:	431a      	orrs	r2, r3
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	430a      	orrs	r2, r1
 80023e6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	681a      	ldr	r2, [r3, #0]
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f042 0201 	orr.w	r2, r2, #1
 80023f6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2200      	movs	r2, #0
 80023fc:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	2220      	movs	r2, #32
 8002402:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	2200      	movs	r2, #0
 800240a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2200      	movs	r2, #0
 8002410:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002414:	2300      	movs	r3, #0
}
 8002416:	4618      	mov	r0, r3
 8002418:	3710      	adds	r7, #16
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}
 800241e:	bf00      	nop
 8002420:	000186a0 	.word	0x000186a0
 8002424:	001e847f 	.word	0x001e847f
 8002428:	003d08ff 	.word	0x003d08ff
 800242c:	431bde83 	.word	0x431bde83
 8002430:	10624dd3 	.word	0x10624dd3

08002434 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b088      	sub	sp, #32
 8002438:	af02      	add	r7, sp, #8
 800243a:	60f8      	str	r0, [r7, #12]
 800243c:	607a      	str	r2, [r7, #4]
 800243e:	461a      	mov	r2, r3
 8002440:	460b      	mov	r3, r1
 8002442:	817b      	strh	r3, [r7, #10]
 8002444:	4613      	mov	r3, r2
 8002446:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002448:	f7ff fba8 	bl	8001b9c <HAL_GetTick>
 800244c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002454:	b2db      	uxtb	r3, r3
 8002456:	2b20      	cmp	r3, #32
 8002458:	f040 80e0 	bne.w	800261c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800245c:	697b      	ldr	r3, [r7, #20]
 800245e:	9300      	str	r3, [sp, #0]
 8002460:	2319      	movs	r3, #25
 8002462:	2201      	movs	r2, #1
 8002464:	4970      	ldr	r1, [pc, #448]	@ (8002628 <HAL_I2C_Master_Transmit+0x1f4>)
 8002466:	68f8      	ldr	r0, [r7, #12]
 8002468:	f000 f964 	bl	8002734 <I2C_WaitOnFlagUntilTimeout>
 800246c:	4603      	mov	r3, r0
 800246e:	2b00      	cmp	r3, #0
 8002470:	d001      	beq.n	8002476 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002472:	2302      	movs	r3, #2
 8002474:	e0d3      	b.n	800261e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800247c:	2b01      	cmp	r3, #1
 800247e:	d101      	bne.n	8002484 <HAL_I2C_Master_Transmit+0x50>
 8002480:	2302      	movs	r3, #2
 8002482:	e0cc      	b.n	800261e <HAL_I2C_Master_Transmit+0x1ea>
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	2201      	movs	r2, #1
 8002488:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f003 0301 	and.w	r3, r3, #1
 8002496:	2b01      	cmp	r3, #1
 8002498:	d007      	beq.n	80024aa <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	681a      	ldr	r2, [r3, #0]
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f042 0201 	orr.w	r2, r2, #1
 80024a8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	681a      	ldr	r2, [r3, #0]
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80024b8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	2221      	movs	r2, #33	@ 0x21
 80024be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	2210      	movs	r2, #16
 80024c6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	2200      	movs	r2, #0
 80024ce:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	687a      	ldr	r2, [r7, #4]
 80024d4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	893a      	ldrh	r2, [r7, #8]
 80024da:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024e0:	b29a      	uxth	r2, r3
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	4a50      	ldr	r2, [pc, #320]	@ (800262c <HAL_I2C_Master_Transmit+0x1f8>)
 80024ea:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80024ec:	8979      	ldrh	r1, [r7, #10]
 80024ee:	697b      	ldr	r3, [r7, #20]
 80024f0:	6a3a      	ldr	r2, [r7, #32]
 80024f2:	68f8      	ldr	r0, [r7, #12]
 80024f4:	f000 f89c 	bl	8002630 <I2C_MasterRequestWrite>
 80024f8:	4603      	mov	r3, r0
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d001      	beq.n	8002502 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80024fe:	2301      	movs	r3, #1
 8002500:	e08d      	b.n	800261e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002502:	2300      	movs	r3, #0
 8002504:	613b      	str	r3, [r7, #16]
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	695b      	ldr	r3, [r3, #20]
 800250c:	613b      	str	r3, [r7, #16]
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	699b      	ldr	r3, [r3, #24]
 8002514:	613b      	str	r3, [r7, #16]
 8002516:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002518:	e066      	b.n	80025e8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800251a:	697a      	ldr	r2, [r7, #20]
 800251c:	6a39      	ldr	r1, [r7, #32]
 800251e:	68f8      	ldr	r0, [r7, #12]
 8002520:	f000 fa22 	bl	8002968 <I2C_WaitOnTXEFlagUntilTimeout>
 8002524:	4603      	mov	r3, r0
 8002526:	2b00      	cmp	r3, #0
 8002528:	d00d      	beq.n	8002546 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800252e:	2b04      	cmp	r3, #4
 8002530:	d107      	bne.n	8002542 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	681a      	ldr	r2, [r3, #0]
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002540:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002542:	2301      	movs	r3, #1
 8002544:	e06b      	b.n	800261e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800254a:	781a      	ldrb	r2, [r3, #0]
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002556:	1c5a      	adds	r2, r3, #1
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002560:	b29b      	uxth	r3, r3
 8002562:	3b01      	subs	r3, #1
 8002564:	b29a      	uxth	r2, r3
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800256e:	3b01      	subs	r3, #1
 8002570:	b29a      	uxth	r2, r3
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	695b      	ldr	r3, [r3, #20]
 800257c:	f003 0304 	and.w	r3, r3, #4
 8002580:	2b04      	cmp	r3, #4
 8002582:	d11b      	bne.n	80025bc <HAL_I2C_Master_Transmit+0x188>
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002588:	2b00      	cmp	r3, #0
 800258a:	d017      	beq.n	80025bc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002590:	781a      	ldrb	r2, [r3, #0]
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800259c:	1c5a      	adds	r2, r3, #1
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025a6:	b29b      	uxth	r3, r3
 80025a8:	3b01      	subs	r3, #1
 80025aa:	b29a      	uxth	r2, r3
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025b4:	3b01      	subs	r3, #1
 80025b6:	b29a      	uxth	r2, r3
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025bc:	697a      	ldr	r2, [r7, #20]
 80025be:	6a39      	ldr	r1, [r7, #32]
 80025c0:	68f8      	ldr	r0, [r7, #12]
 80025c2:	f000 fa19 	bl	80029f8 <I2C_WaitOnBTFFlagUntilTimeout>
 80025c6:	4603      	mov	r3, r0
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d00d      	beq.n	80025e8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025d0:	2b04      	cmp	r3, #4
 80025d2:	d107      	bne.n	80025e4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	681a      	ldr	r2, [r3, #0]
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80025e2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80025e4:	2301      	movs	r3, #1
 80025e6:	e01a      	b.n	800261e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d194      	bne.n	800251a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	681a      	ldr	r2, [r3, #0]
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80025fe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	2220      	movs	r2, #32
 8002604:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	2200      	movs	r2, #0
 800260c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	2200      	movs	r2, #0
 8002614:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002618:	2300      	movs	r3, #0
 800261a:	e000      	b.n	800261e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800261c:	2302      	movs	r3, #2
  }
}
 800261e:	4618      	mov	r0, r3
 8002620:	3718      	adds	r7, #24
 8002622:	46bd      	mov	sp, r7
 8002624:	bd80      	pop	{r7, pc}
 8002626:	bf00      	nop
 8002628:	00100002 	.word	0x00100002
 800262c:	ffff0000 	.word	0xffff0000

08002630 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b088      	sub	sp, #32
 8002634:	af02      	add	r7, sp, #8
 8002636:	60f8      	str	r0, [r7, #12]
 8002638:	607a      	str	r2, [r7, #4]
 800263a:	603b      	str	r3, [r7, #0]
 800263c:	460b      	mov	r3, r1
 800263e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002644:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002646:	697b      	ldr	r3, [r7, #20]
 8002648:	2b08      	cmp	r3, #8
 800264a:	d006      	beq.n	800265a <I2C_MasterRequestWrite+0x2a>
 800264c:	697b      	ldr	r3, [r7, #20]
 800264e:	2b01      	cmp	r3, #1
 8002650:	d003      	beq.n	800265a <I2C_MasterRequestWrite+0x2a>
 8002652:	697b      	ldr	r3, [r7, #20]
 8002654:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002658:	d108      	bne.n	800266c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	681a      	ldr	r2, [r3, #0]
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002668:	601a      	str	r2, [r3, #0]
 800266a:	e00b      	b.n	8002684 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002670:	2b12      	cmp	r3, #18
 8002672:	d107      	bne.n	8002684 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	681a      	ldr	r2, [r3, #0]
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002682:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	9300      	str	r3, [sp, #0]
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2200      	movs	r2, #0
 800268c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002690:	68f8      	ldr	r0, [r7, #12]
 8002692:	f000 f84f 	bl	8002734 <I2C_WaitOnFlagUntilTimeout>
 8002696:	4603      	mov	r3, r0
 8002698:	2b00      	cmp	r3, #0
 800269a:	d00d      	beq.n	80026b8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026a6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80026aa:	d103      	bne.n	80026b4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80026b2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80026b4:	2303      	movs	r3, #3
 80026b6:	e035      	b.n	8002724 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	691b      	ldr	r3, [r3, #16]
 80026bc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80026c0:	d108      	bne.n	80026d4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80026c2:	897b      	ldrh	r3, [r7, #10]
 80026c4:	b2db      	uxtb	r3, r3
 80026c6:	461a      	mov	r2, r3
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80026d0:	611a      	str	r2, [r3, #16]
 80026d2:	e01b      	b.n	800270c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80026d4:	897b      	ldrh	r3, [r7, #10]
 80026d6:	11db      	asrs	r3, r3, #7
 80026d8:	b2db      	uxtb	r3, r3
 80026da:	f003 0306 	and.w	r3, r3, #6
 80026de:	b2db      	uxtb	r3, r3
 80026e0:	f063 030f 	orn	r3, r3, #15
 80026e4:	b2da      	uxtb	r2, r3
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	687a      	ldr	r2, [r7, #4]
 80026f0:	490e      	ldr	r1, [pc, #56]	@ (800272c <I2C_MasterRequestWrite+0xfc>)
 80026f2:	68f8      	ldr	r0, [r7, #12]
 80026f4:	f000 f898 	bl	8002828 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80026f8:	4603      	mov	r3, r0
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d001      	beq.n	8002702 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80026fe:	2301      	movs	r3, #1
 8002700:	e010      	b.n	8002724 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002702:	897b      	ldrh	r3, [r7, #10]
 8002704:	b2da      	uxtb	r2, r3
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	687a      	ldr	r2, [r7, #4]
 8002710:	4907      	ldr	r1, [pc, #28]	@ (8002730 <I2C_MasterRequestWrite+0x100>)
 8002712:	68f8      	ldr	r0, [r7, #12]
 8002714:	f000 f888 	bl	8002828 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002718:	4603      	mov	r3, r0
 800271a:	2b00      	cmp	r3, #0
 800271c:	d001      	beq.n	8002722 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800271e:	2301      	movs	r3, #1
 8002720:	e000      	b.n	8002724 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002722:	2300      	movs	r3, #0
}
 8002724:	4618      	mov	r0, r3
 8002726:	3718      	adds	r7, #24
 8002728:	46bd      	mov	sp, r7
 800272a:	bd80      	pop	{r7, pc}
 800272c:	00010008 	.word	0x00010008
 8002730:	00010002 	.word	0x00010002

08002734 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b084      	sub	sp, #16
 8002738:	af00      	add	r7, sp, #0
 800273a:	60f8      	str	r0, [r7, #12]
 800273c:	60b9      	str	r1, [r7, #8]
 800273e:	603b      	str	r3, [r7, #0]
 8002740:	4613      	mov	r3, r2
 8002742:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002744:	e048      	b.n	80027d8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	f1b3 3fff 	cmp.w	r3, #4294967295
 800274c:	d044      	beq.n	80027d8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800274e:	f7ff fa25 	bl	8001b9c <HAL_GetTick>
 8002752:	4602      	mov	r2, r0
 8002754:	69bb      	ldr	r3, [r7, #24]
 8002756:	1ad3      	subs	r3, r2, r3
 8002758:	683a      	ldr	r2, [r7, #0]
 800275a:	429a      	cmp	r2, r3
 800275c:	d302      	bcc.n	8002764 <I2C_WaitOnFlagUntilTimeout+0x30>
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d139      	bne.n	80027d8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002764:	68bb      	ldr	r3, [r7, #8]
 8002766:	0c1b      	lsrs	r3, r3, #16
 8002768:	b2db      	uxtb	r3, r3
 800276a:	2b01      	cmp	r3, #1
 800276c:	d10d      	bne.n	800278a <I2C_WaitOnFlagUntilTimeout+0x56>
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	695b      	ldr	r3, [r3, #20]
 8002774:	43da      	mvns	r2, r3
 8002776:	68bb      	ldr	r3, [r7, #8]
 8002778:	4013      	ands	r3, r2
 800277a:	b29b      	uxth	r3, r3
 800277c:	2b00      	cmp	r3, #0
 800277e:	bf0c      	ite	eq
 8002780:	2301      	moveq	r3, #1
 8002782:	2300      	movne	r3, #0
 8002784:	b2db      	uxtb	r3, r3
 8002786:	461a      	mov	r2, r3
 8002788:	e00c      	b.n	80027a4 <I2C_WaitOnFlagUntilTimeout+0x70>
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	699b      	ldr	r3, [r3, #24]
 8002790:	43da      	mvns	r2, r3
 8002792:	68bb      	ldr	r3, [r7, #8]
 8002794:	4013      	ands	r3, r2
 8002796:	b29b      	uxth	r3, r3
 8002798:	2b00      	cmp	r3, #0
 800279a:	bf0c      	ite	eq
 800279c:	2301      	moveq	r3, #1
 800279e:	2300      	movne	r3, #0
 80027a0:	b2db      	uxtb	r3, r3
 80027a2:	461a      	mov	r2, r3
 80027a4:	79fb      	ldrb	r3, [r7, #7]
 80027a6:	429a      	cmp	r2, r3
 80027a8:	d116      	bne.n	80027d8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	2200      	movs	r2, #0
 80027ae:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	2220      	movs	r2, #32
 80027b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	2200      	movs	r2, #0
 80027bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027c4:	f043 0220 	orr.w	r2, r3, #32
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	2200      	movs	r2, #0
 80027d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80027d4:	2301      	movs	r3, #1
 80027d6:	e023      	b.n	8002820 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80027d8:	68bb      	ldr	r3, [r7, #8]
 80027da:	0c1b      	lsrs	r3, r3, #16
 80027dc:	b2db      	uxtb	r3, r3
 80027de:	2b01      	cmp	r3, #1
 80027e0:	d10d      	bne.n	80027fe <I2C_WaitOnFlagUntilTimeout+0xca>
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	695b      	ldr	r3, [r3, #20]
 80027e8:	43da      	mvns	r2, r3
 80027ea:	68bb      	ldr	r3, [r7, #8]
 80027ec:	4013      	ands	r3, r2
 80027ee:	b29b      	uxth	r3, r3
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	bf0c      	ite	eq
 80027f4:	2301      	moveq	r3, #1
 80027f6:	2300      	movne	r3, #0
 80027f8:	b2db      	uxtb	r3, r3
 80027fa:	461a      	mov	r2, r3
 80027fc:	e00c      	b.n	8002818 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	699b      	ldr	r3, [r3, #24]
 8002804:	43da      	mvns	r2, r3
 8002806:	68bb      	ldr	r3, [r7, #8]
 8002808:	4013      	ands	r3, r2
 800280a:	b29b      	uxth	r3, r3
 800280c:	2b00      	cmp	r3, #0
 800280e:	bf0c      	ite	eq
 8002810:	2301      	moveq	r3, #1
 8002812:	2300      	movne	r3, #0
 8002814:	b2db      	uxtb	r3, r3
 8002816:	461a      	mov	r2, r3
 8002818:	79fb      	ldrb	r3, [r7, #7]
 800281a:	429a      	cmp	r2, r3
 800281c:	d093      	beq.n	8002746 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800281e:	2300      	movs	r3, #0
}
 8002820:	4618      	mov	r0, r3
 8002822:	3710      	adds	r7, #16
 8002824:	46bd      	mov	sp, r7
 8002826:	bd80      	pop	{r7, pc}

08002828 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b084      	sub	sp, #16
 800282c:	af00      	add	r7, sp, #0
 800282e:	60f8      	str	r0, [r7, #12]
 8002830:	60b9      	str	r1, [r7, #8]
 8002832:	607a      	str	r2, [r7, #4]
 8002834:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002836:	e071      	b.n	800291c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	695b      	ldr	r3, [r3, #20]
 800283e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002842:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002846:	d123      	bne.n	8002890 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	681a      	ldr	r2, [r3, #0]
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002856:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002860:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	2200      	movs	r2, #0
 8002866:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	2220      	movs	r2, #32
 800286c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	2200      	movs	r2, #0
 8002874:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800287c:	f043 0204 	orr.w	r2, r3, #4
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	2200      	movs	r2, #0
 8002888:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800288c:	2301      	movs	r3, #1
 800288e:	e067      	b.n	8002960 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002896:	d041      	beq.n	800291c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002898:	f7ff f980 	bl	8001b9c <HAL_GetTick>
 800289c:	4602      	mov	r2, r0
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	1ad3      	subs	r3, r2, r3
 80028a2:	687a      	ldr	r2, [r7, #4]
 80028a4:	429a      	cmp	r2, r3
 80028a6:	d302      	bcc.n	80028ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d136      	bne.n	800291c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80028ae:	68bb      	ldr	r3, [r7, #8]
 80028b0:	0c1b      	lsrs	r3, r3, #16
 80028b2:	b2db      	uxtb	r3, r3
 80028b4:	2b01      	cmp	r3, #1
 80028b6:	d10c      	bne.n	80028d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	695b      	ldr	r3, [r3, #20]
 80028be:	43da      	mvns	r2, r3
 80028c0:	68bb      	ldr	r3, [r7, #8]
 80028c2:	4013      	ands	r3, r2
 80028c4:	b29b      	uxth	r3, r3
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	bf14      	ite	ne
 80028ca:	2301      	movne	r3, #1
 80028cc:	2300      	moveq	r3, #0
 80028ce:	b2db      	uxtb	r3, r3
 80028d0:	e00b      	b.n	80028ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	699b      	ldr	r3, [r3, #24]
 80028d8:	43da      	mvns	r2, r3
 80028da:	68bb      	ldr	r3, [r7, #8]
 80028dc:	4013      	ands	r3, r2
 80028de:	b29b      	uxth	r3, r3
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	bf14      	ite	ne
 80028e4:	2301      	movne	r3, #1
 80028e6:	2300      	moveq	r3, #0
 80028e8:	b2db      	uxtb	r3, r3
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d016      	beq.n	800291c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	2200      	movs	r2, #0
 80028f2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	2220      	movs	r2, #32
 80028f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	2200      	movs	r2, #0
 8002900:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002908:	f043 0220 	orr.w	r2, r3, #32
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	2200      	movs	r2, #0
 8002914:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002918:	2301      	movs	r3, #1
 800291a:	e021      	b.n	8002960 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800291c:	68bb      	ldr	r3, [r7, #8]
 800291e:	0c1b      	lsrs	r3, r3, #16
 8002920:	b2db      	uxtb	r3, r3
 8002922:	2b01      	cmp	r3, #1
 8002924:	d10c      	bne.n	8002940 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	695b      	ldr	r3, [r3, #20]
 800292c:	43da      	mvns	r2, r3
 800292e:	68bb      	ldr	r3, [r7, #8]
 8002930:	4013      	ands	r3, r2
 8002932:	b29b      	uxth	r3, r3
 8002934:	2b00      	cmp	r3, #0
 8002936:	bf14      	ite	ne
 8002938:	2301      	movne	r3, #1
 800293a:	2300      	moveq	r3, #0
 800293c:	b2db      	uxtb	r3, r3
 800293e:	e00b      	b.n	8002958 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	699b      	ldr	r3, [r3, #24]
 8002946:	43da      	mvns	r2, r3
 8002948:	68bb      	ldr	r3, [r7, #8]
 800294a:	4013      	ands	r3, r2
 800294c:	b29b      	uxth	r3, r3
 800294e:	2b00      	cmp	r3, #0
 8002950:	bf14      	ite	ne
 8002952:	2301      	movne	r3, #1
 8002954:	2300      	moveq	r3, #0
 8002956:	b2db      	uxtb	r3, r3
 8002958:	2b00      	cmp	r3, #0
 800295a:	f47f af6d 	bne.w	8002838 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800295e:	2300      	movs	r3, #0
}
 8002960:	4618      	mov	r0, r3
 8002962:	3710      	adds	r7, #16
 8002964:	46bd      	mov	sp, r7
 8002966:	bd80      	pop	{r7, pc}

08002968 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b084      	sub	sp, #16
 800296c:	af00      	add	r7, sp, #0
 800296e:	60f8      	str	r0, [r7, #12]
 8002970:	60b9      	str	r1, [r7, #8]
 8002972:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002974:	e034      	b.n	80029e0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002976:	68f8      	ldr	r0, [r7, #12]
 8002978:	f000 f886 	bl	8002a88 <I2C_IsAcknowledgeFailed>
 800297c:	4603      	mov	r3, r0
 800297e:	2b00      	cmp	r3, #0
 8002980:	d001      	beq.n	8002986 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002982:	2301      	movs	r3, #1
 8002984:	e034      	b.n	80029f0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002986:	68bb      	ldr	r3, [r7, #8]
 8002988:	f1b3 3fff 	cmp.w	r3, #4294967295
 800298c:	d028      	beq.n	80029e0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800298e:	f7ff f905 	bl	8001b9c <HAL_GetTick>
 8002992:	4602      	mov	r2, r0
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	1ad3      	subs	r3, r2, r3
 8002998:	68ba      	ldr	r2, [r7, #8]
 800299a:	429a      	cmp	r2, r3
 800299c:	d302      	bcc.n	80029a4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800299e:	68bb      	ldr	r3, [r7, #8]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d11d      	bne.n	80029e0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	695b      	ldr	r3, [r3, #20]
 80029aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80029ae:	2b80      	cmp	r3, #128	@ 0x80
 80029b0:	d016      	beq.n	80029e0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	2200      	movs	r2, #0
 80029b6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	2220      	movs	r2, #32
 80029bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	2200      	movs	r2, #0
 80029c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029cc:	f043 0220 	orr.w	r2, r3, #32
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	2200      	movs	r2, #0
 80029d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80029dc:	2301      	movs	r3, #1
 80029de:	e007      	b.n	80029f0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	695b      	ldr	r3, [r3, #20]
 80029e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80029ea:	2b80      	cmp	r3, #128	@ 0x80
 80029ec:	d1c3      	bne.n	8002976 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80029ee:	2300      	movs	r3, #0
}
 80029f0:	4618      	mov	r0, r3
 80029f2:	3710      	adds	r7, #16
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bd80      	pop	{r7, pc}

080029f8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b084      	sub	sp, #16
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	60f8      	str	r0, [r7, #12]
 8002a00:	60b9      	str	r1, [r7, #8]
 8002a02:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002a04:	e034      	b.n	8002a70 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002a06:	68f8      	ldr	r0, [r7, #12]
 8002a08:	f000 f83e 	bl	8002a88 <I2C_IsAcknowledgeFailed>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d001      	beq.n	8002a16 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002a12:	2301      	movs	r3, #1
 8002a14:	e034      	b.n	8002a80 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a16:	68bb      	ldr	r3, [r7, #8]
 8002a18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a1c:	d028      	beq.n	8002a70 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a1e:	f7ff f8bd 	bl	8001b9c <HAL_GetTick>
 8002a22:	4602      	mov	r2, r0
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	1ad3      	subs	r3, r2, r3
 8002a28:	68ba      	ldr	r2, [r7, #8]
 8002a2a:	429a      	cmp	r2, r3
 8002a2c:	d302      	bcc.n	8002a34 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002a2e:	68bb      	ldr	r3, [r7, #8]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d11d      	bne.n	8002a70 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	695b      	ldr	r3, [r3, #20]
 8002a3a:	f003 0304 	and.w	r3, r3, #4
 8002a3e:	2b04      	cmp	r3, #4
 8002a40:	d016      	beq.n	8002a70 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	2200      	movs	r2, #0
 8002a46:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	2220      	movs	r2, #32
 8002a4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	2200      	movs	r2, #0
 8002a54:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a5c:	f043 0220 	orr.w	r2, r3, #32
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	2200      	movs	r2, #0
 8002a68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	e007      	b.n	8002a80 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	695b      	ldr	r3, [r3, #20]
 8002a76:	f003 0304 	and.w	r3, r3, #4
 8002a7a:	2b04      	cmp	r3, #4
 8002a7c:	d1c3      	bne.n	8002a06 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002a7e:	2300      	movs	r3, #0
}
 8002a80:	4618      	mov	r0, r3
 8002a82:	3710      	adds	r7, #16
 8002a84:	46bd      	mov	sp, r7
 8002a86:	bd80      	pop	{r7, pc}

08002a88 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	b083      	sub	sp, #12
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	695b      	ldr	r3, [r3, #20]
 8002a96:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a9a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002a9e:	d11b      	bne.n	8002ad8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002aa8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2200      	movs	r2, #0
 8002aae:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2220      	movs	r2, #32
 8002ab4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2200      	movs	r2, #0
 8002abc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ac4:	f043 0204 	orr.w	r2, r3, #4
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2200      	movs	r2, #0
 8002ad0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	e000      	b.n	8002ada <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002ad8:	2300      	movs	r3, #0
}
 8002ada:	4618      	mov	r0, r3
 8002adc:	370c      	adds	r7, #12
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bc80      	pop	{r7}
 8002ae2:	4770      	bx	lr

08002ae4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b086      	sub	sp, #24
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d101      	bne.n	8002af6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002af2:	2301      	movs	r3, #1
 8002af4:	e272      	b.n	8002fdc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f003 0301 	and.w	r3, r3, #1
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	f000 8087 	beq.w	8002c12 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002b04:	4b92      	ldr	r3, [pc, #584]	@ (8002d50 <HAL_RCC_OscConfig+0x26c>)
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	f003 030c 	and.w	r3, r3, #12
 8002b0c:	2b04      	cmp	r3, #4
 8002b0e:	d00c      	beq.n	8002b2a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002b10:	4b8f      	ldr	r3, [pc, #572]	@ (8002d50 <HAL_RCC_OscConfig+0x26c>)
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	f003 030c 	and.w	r3, r3, #12
 8002b18:	2b08      	cmp	r3, #8
 8002b1a:	d112      	bne.n	8002b42 <HAL_RCC_OscConfig+0x5e>
 8002b1c:	4b8c      	ldr	r3, [pc, #560]	@ (8002d50 <HAL_RCC_OscConfig+0x26c>)
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b24:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002b28:	d10b      	bne.n	8002b42 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b2a:	4b89      	ldr	r3, [pc, #548]	@ (8002d50 <HAL_RCC_OscConfig+0x26c>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d06c      	beq.n	8002c10 <HAL_RCC_OscConfig+0x12c>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	685b      	ldr	r3, [r3, #4]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d168      	bne.n	8002c10 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	e24c      	b.n	8002fdc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002b4a:	d106      	bne.n	8002b5a <HAL_RCC_OscConfig+0x76>
 8002b4c:	4b80      	ldr	r3, [pc, #512]	@ (8002d50 <HAL_RCC_OscConfig+0x26c>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4a7f      	ldr	r2, [pc, #508]	@ (8002d50 <HAL_RCC_OscConfig+0x26c>)
 8002b52:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b56:	6013      	str	r3, [r2, #0]
 8002b58:	e02e      	b.n	8002bb8 <HAL_RCC_OscConfig+0xd4>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d10c      	bne.n	8002b7c <HAL_RCC_OscConfig+0x98>
 8002b62:	4b7b      	ldr	r3, [pc, #492]	@ (8002d50 <HAL_RCC_OscConfig+0x26c>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4a7a      	ldr	r2, [pc, #488]	@ (8002d50 <HAL_RCC_OscConfig+0x26c>)
 8002b68:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002b6c:	6013      	str	r3, [r2, #0]
 8002b6e:	4b78      	ldr	r3, [pc, #480]	@ (8002d50 <HAL_RCC_OscConfig+0x26c>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4a77      	ldr	r2, [pc, #476]	@ (8002d50 <HAL_RCC_OscConfig+0x26c>)
 8002b74:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002b78:	6013      	str	r3, [r2, #0]
 8002b7a:	e01d      	b.n	8002bb8 <HAL_RCC_OscConfig+0xd4>
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002b84:	d10c      	bne.n	8002ba0 <HAL_RCC_OscConfig+0xbc>
 8002b86:	4b72      	ldr	r3, [pc, #456]	@ (8002d50 <HAL_RCC_OscConfig+0x26c>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	4a71      	ldr	r2, [pc, #452]	@ (8002d50 <HAL_RCC_OscConfig+0x26c>)
 8002b8c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002b90:	6013      	str	r3, [r2, #0]
 8002b92:	4b6f      	ldr	r3, [pc, #444]	@ (8002d50 <HAL_RCC_OscConfig+0x26c>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4a6e      	ldr	r2, [pc, #440]	@ (8002d50 <HAL_RCC_OscConfig+0x26c>)
 8002b98:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b9c:	6013      	str	r3, [r2, #0]
 8002b9e:	e00b      	b.n	8002bb8 <HAL_RCC_OscConfig+0xd4>
 8002ba0:	4b6b      	ldr	r3, [pc, #428]	@ (8002d50 <HAL_RCC_OscConfig+0x26c>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4a6a      	ldr	r2, [pc, #424]	@ (8002d50 <HAL_RCC_OscConfig+0x26c>)
 8002ba6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002baa:	6013      	str	r3, [r2, #0]
 8002bac:	4b68      	ldr	r3, [pc, #416]	@ (8002d50 <HAL_RCC_OscConfig+0x26c>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4a67      	ldr	r2, [pc, #412]	@ (8002d50 <HAL_RCC_OscConfig+0x26c>)
 8002bb2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002bb6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d013      	beq.n	8002be8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bc0:	f7fe ffec 	bl	8001b9c <HAL_GetTick>
 8002bc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bc6:	e008      	b.n	8002bda <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002bc8:	f7fe ffe8 	bl	8001b9c <HAL_GetTick>
 8002bcc:	4602      	mov	r2, r0
 8002bce:	693b      	ldr	r3, [r7, #16]
 8002bd0:	1ad3      	subs	r3, r2, r3
 8002bd2:	2b64      	cmp	r3, #100	@ 0x64
 8002bd4:	d901      	bls.n	8002bda <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002bd6:	2303      	movs	r3, #3
 8002bd8:	e200      	b.n	8002fdc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bda:	4b5d      	ldr	r3, [pc, #372]	@ (8002d50 <HAL_RCC_OscConfig+0x26c>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d0f0      	beq.n	8002bc8 <HAL_RCC_OscConfig+0xe4>
 8002be6:	e014      	b.n	8002c12 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002be8:	f7fe ffd8 	bl	8001b9c <HAL_GetTick>
 8002bec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bee:	e008      	b.n	8002c02 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002bf0:	f7fe ffd4 	bl	8001b9c <HAL_GetTick>
 8002bf4:	4602      	mov	r2, r0
 8002bf6:	693b      	ldr	r3, [r7, #16]
 8002bf8:	1ad3      	subs	r3, r2, r3
 8002bfa:	2b64      	cmp	r3, #100	@ 0x64
 8002bfc:	d901      	bls.n	8002c02 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002bfe:	2303      	movs	r3, #3
 8002c00:	e1ec      	b.n	8002fdc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c02:	4b53      	ldr	r3, [pc, #332]	@ (8002d50 <HAL_RCC_OscConfig+0x26c>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d1f0      	bne.n	8002bf0 <HAL_RCC_OscConfig+0x10c>
 8002c0e:	e000      	b.n	8002c12 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f003 0302 	and.w	r3, r3, #2
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d063      	beq.n	8002ce6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002c1e:	4b4c      	ldr	r3, [pc, #304]	@ (8002d50 <HAL_RCC_OscConfig+0x26c>)
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	f003 030c 	and.w	r3, r3, #12
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d00b      	beq.n	8002c42 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002c2a:	4b49      	ldr	r3, [pc, #292]	@ (8002d50 <HAL_RCC_OscConfig+0x26c>)
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	f003 030c 	and.w	r3, r3, #12
 8002c32:	2b08      	cmp	r3, #8
 8002c34:	d11c      	bne.n	8002c70 <HAL_RCC_OscConfig+0x18c>
 8002c36:	4b46      	ldr	r3, [pc, #280]	@ (8002d50 <HAL_RCC_OscConfig+0x26c>)
 8002c38:	685b      	ldr	r3, [r3, #4]
 8002c3a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d116      	bne.n	8002c70 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c42:	4b43      	ldr	r3, [pc, #268]	@ (8002d50 <HAL_RCC_OscConfig+0x26c>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f003 0302 	and.w	r3, r3, #2
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d005      	beq.n	8002c5a <HAL_RCC_OscConfig+0x176>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	691b      	ldr	r3, [r3, #16]
 8002c52:	2b01      	cmp	r3, #1
 8002c54:	d001      	beq.n	8002c5a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002c56:	2301      	movs	r3, #1
 8002c58:	e1c0      	b.n	8002fdc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c5a:	4b3d      	ldr	r3, [pc, #244]	@ (8002d50 <HAL_RCC_OscConfig+0x26c>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	695b      	ldr	r3, [r3, #20]
 8002c66:	00db      	lsls	r3, r3, #3
 8002c68:	4939      	ldr	r1, [pc, #228]	@ (8002d50 <HAL_RCC_OscConfig+0x26c>)
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c6e:	e03a      	b.n	8002ce6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	691b      	ldr	r3, [r3, #16]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d020      	beq.n	8002cba <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c78:	4b36      	ldr	r3, [pc, #216]	@ (8002d54 <HAL_RCC_OscConfig+0x270>)
 8002c7a:	2201      	movs	r2, #1
 8002c7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c7e:	f7fe ff8d 	bl	8001b9c <HAL_GetTick>
 8002c82:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c84:	e008      	b.n	8002c98 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c86:	f7fe ff89 	bl	8001b9c <HAL_GetTick>
 8002c8a:	4602      	mov	r2, r0
 8002c8c:	693b      	ldr	r3, [r7, #16]
 8002c8e:	1ad3      	subs	r3, r2, r3
 8002c90:	2b02      	cmp	r3, #2
 8002c92:	d901      	bls.n	8002c98 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002c94:	2303      	movs	r3, #3
 8002c96:	e1a1      	b.n	8002fdc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c98:	4b2d      	ldr	r3, [pc, #180]	@ (8002d50 <HAL_RCC_OscConfig+0x26c>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f003 0302 	and.w	r3, r3, #2
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d0f0      	beq.n	8002c86 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ca4:	4b2a      	ldr	r3, [pc, #168]	@ (8002d50 <HAL_RCC_OscConfig+0x26c>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	695b      	ldr	r3, [r3, #20]
 8002cb0:	00db      	lsls	r3, r3, #3
 8002cb2:	4927      	ldr	r1, [pc, #156]	@ (8002d50 <HAL_RCC_OscConfig+0x26c>)
 8002cb4:	4313      	orrs	r3, r2
 8002cb6:	600b      	str	r3, [r1, #0]
 8002cb8:	e015      	b.n	8002ce6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002cba:	4b26      	ldr	r3, [pc, #152]	@ (8002d54 <HAL_RCC_OscConfig+0x270>)
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cc0:	f7fe ff6c 	bl	8001b9c <HAL_GetTick>
 8002cc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cc6:	e008      	b.n	8002cda <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002cc8:	f7fe ff68 	bl	8001b9c <HAL_GetTick>
 8002ccc:	4602      	mov	r2, r0
 8002cce:	693b      	ldr	r3, [r7, #16]
 8002cd0:	1ad3      	subs	r3, r2, r3
 8002cd2:	2b02      	cmp	r3, #2
 8002cd4:	d901      	bls.n	8002cda <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002cd6:	2303      	movs	r3, #3
 8002cd8:	e180      	b.n	8002fdc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cda:	4b1d      	ldr	r3, [pc, #116]	@ (8002d50 <HAL_RCC_OscConfig+0x26c>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f003 0302 	and.w	r3, r3, #2
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d1f0      	bne.n	8002cc8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f003 0308 	and.w	r3, r3, #8
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d03a      	beq.n	8002d68 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	699b      	ldr	r3, [r3, #24]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d019      	beq.n	8002d2e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002cfa:	4b17      	ldr	r3, [pc, #92]	@ (8002d58 <HAL_RCC_OscConfig+0x274>)
 8002cfc:	2201      	movs	r2, #1
 8002cfe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d00:	f7fe ff4c 	bl	8001b9c <HAL_GetTick>
 8002d04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d06:	e008      	b.n	8002d1a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d08:	f7fe ff48 	bl	8001b9c <HAL_GetTick>
 8002d0c:	4602      	mov	r2, r0
 8002d0e:	693b      	ldr	r3, [r7, #16]
 8002d10:	1ad3      	subs	r3, r2, r3
 8002d12:	2b02      	cmp	r3, #2
 8002d14:	d901      	bls.n	8002d1a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002d16:	2303      	movs	r3, #3
 8002d18:	e160      	b.n	8002fdc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d1a:	4b0d      	ldr	r3, [pc, #52]	@ (8002d50 <HAL_RCC_OscConfig+0x26c>)
 8002d1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d1e:	f003 0302 	and.w	r3, r3, #2
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d0f0      	beq.n	8002d08 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002d26:	2001      	movs	r0, #1
 8002d28:	f000 face 	bl	80032c8 <RCC_Delay>
 8002d2c:	e01c      	b.n	8002d68 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d2e:	4b0a      	ldr	r3, [pc, #40]	@ (8002d58 <HAL_RCC_OscConfig+0x274>)
 8002d30:	2200      	movs	r2, #0
 8002d32:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d34:	f7fe ff32 	bl	8001b9c <HAL_GetTick>
 8002d38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d3a:	e00f      	b.n	8002d5c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d3c:	f7fe ff2e 	bl	8001b9c <HAL_GetTick>
 8002d40:	4602      	mov	r2, r0
 8002d42:	693b      	ldr	r3, [r7, #16]
 8002d44:	1ad3      	subs	r3, r2, r3
 8002d46:	2b02      	cmp	r3, #2
 8002d48:	d908      	bls.n	8002d5c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002d4a:	2303      	movs	r3, #3
 8002d4c:	e146      	b.n	8002fdc <HAL_RCC_OscConfig+0x4f8>
 8002d4e:	bf00      	nop
 8002d50:	40021000 	.word	0x40021000
 8002d54:	42420000 	.word	0x42420000
 8002d58:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d5c:	4b92      	ldr	r3, [pc, #584]	@ (8002fa8 <HAL_RCC_OscConfig+0x4c4>)
 8002d5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d60:	f003 0302 	and.w	r3, r3, #2
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d1e9      	bne.n	8002d3c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f003 0304 	and.w	r3, r3, #4
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	f000 80a6 	beq.w	8002ec2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d76:	2300      	movs	r3, #0
 8002d78:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d7a:	4b8b      	ldr	r3, [pc, #556]	@ (8002fa8 <HAL_RCC_OscConfig+0x4c4>)
 8002d7c:	69db      	ldr	r3, [r3, #28]
 8002d7e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d10d      	bne.n	8002da2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d86:	4b88      	ldr	r3, [pc, #544]	@ (8002fa8 <HAL_RCC_OscConfig+0x4c4>)
 8002d88:	69db      	ldr	r3, [r3, #28]
 8002d8a:	4a87      	ldr	r2, [pc, #540]	@ (8002fa8 <HAL_RCC_OscConfig+0x4c4>)
 8002d8c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d90:	61d3      	str	r3, [r2, #28]
 8002d92:	4b85      	ldr	r3, [pc, #532]	@ (8002fa8 <HAL_RCC_OscConfig+0x4c4>)
 8002d94:	69db      	ldr	r3, [r3, #28]
 8002d96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d9a:	60bb      	str	r3, [r7, #8]
 8002d9c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d9e:	2301      	movs	r3, #1
 8002da0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002da2:	4b82      	ldr	r3, [pc, #520]	@ (8002fac <HAL_RCC_OscConfig+0x4c8>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d118      	bne.n	8002de0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002dae:	4b7f      	ldr	r3, [pc, #508]	@ (8002fac <HAL_RCC_OscConfig+0x4c8>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4a7e      	ldr	r2, [pc, #504]	@ (8002fac <HAL_RCC_OscConfig+0x4c8>)
 8002db4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002db8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002dba:	f7fe feef 	bl	8001b9c <HAL_GetTick>
 8002dbe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dc0:	e008      	b.n	8002dd4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002dc2:	f7fe feeb 	bl	8001b9c <HAL_GetTick>
 8002dc6:	4602      	mov	r2, r0
 8002dc8:	693b      	ldr	r3, [r7, #16]
 8002dca:	1ad3      	subs	r3, r2, r3
 8002dcc:	2b64      	cmp	r3, #100	@ 0x64
 8002dce:	d901      	bls.n	8002dd4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002dd0:	2303      	movs	r3, #3
 8002dd2:	e103      	b.n	8002fdc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dd4:	4b75      	ldr	r3, [pc, #468]	@ (8002fac <HAL_RCC_OscConfig+0x4c8>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d0f0      	beq.n	8002dc2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	68db      	ldr	r3, [r3, #12]
 8002de4:	2b01      	cmp	r3, #1
 8002de6:	d106      	bne.n	8002df6 <HAL_RCC_OscConfig+0x312>
 8002de8:	4b6f      	ldr	r3, [pc, #444]	@ (8002fa8 <HAL_RCC_OscConfig+0x4c4>)
 8002dea:	6a1b      	ldr	r3, [r3, #32]
 8002dec:	4a6e      	ldr	r2, [pc, #440]	@ (8002fa8 <HAL_RCC_OscConfig+0x4c4>)
 8002dee:	f043 0301 	orr.w	r3, r3, #1
 8002df2:	6213      	str	r3, [r2, #32]
 8002df4:	e02d      	b.n	8002e52 <HAL_RCC_OscConfig+0x36e>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	68db      	ldr	r3, [r3, #12]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d10c      	bne.n	8002e18 <HAL_RCC_OscConfig+0x334>
 8002dfe:	4b6a      	ldr	r3, [pc, #424]	@ (8002fa8 <HAL_RCC_OscConfig+0x4c4>)
 8002e00:	6a1b      	ldr	r3, [r3, #32]
 8002e02:	4a69      	ldr	r2, [pc, #420]	@ (8002fa8 <HAL_RCC_OscConfig+0x4c4>)
 8002e04:	f023 0301 	bic.w	r3, r3, #1
 8002e08:	6213      	str	r3, [r2, #32]
 8002e0a:	4b67      	ldr	r3, [pc, #412]	@ (8002fa8 <HAL_RCC_OscConfig+0x4c4>)
 8002e0c:	6a1b      	ldr	r3, [r3, #32]
 8002e0e:	4a66      	ldr	r2, [pc, #408]	@ (8002fa8 <HAL_RCC_OscConfig+0x4c4>)
 8002e10:	f023 0304 	bic.w	r3, r3, #4
 8002e14:	6213      	str	r3, [r2, #32]
 8002e16:	e01c      	b.n	8002e52 <HAL_RCC_OscConfig+0x36e>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	68db      	ldr	r3, [r3, #12]
 8002e1c:	2b05      	cmp	r3, #5
 8002e1e:	d10c      	bne.n	8002e3a <HAL_RCC_OscConfig+0x356>
 8002e20:	4b61      	ldr	r3, [pc, #388]	@ (8002fa8 <HAL_RCC_OscConfig+0x4c4>)
 8002e22:	6a1b      	ldr	r3, [r3, #32]
 8002e24:	4a60      	ldr	r2, [pc, #384]	@ (8002fa8 <HAL_RCC_OscConfig+0x4c4>)
 8002e26:	f043 0304 	orr.w	r3, r3, #4
 8002e2a:	6213      	str	r3, [r2, #32]
 8002e2c:	4b5e      	ldr	r3, [pc, #376]	@ (8002fa8 <HAL_RCC_OscConfig+0x4c4>)
 8002e2e:	6a1b      	ldr	r3, [r3, #32]
 8002e30:	4a5d      	ldr	r2, [pc, #372]	@ (8002fa8 <HAL_RCC_OscConfig+0x4c4>)
 8002e32:	f043 0301 	orr.w	r3, r3, #1
 8002e36:	6213      	str	r3, [r2, #32]
 8002e38:	e00b      	b.n	8002e52 <HAL_RCC_OscConfig+0x36e>
 8002e3a:	4b5b      	ldr	r3, [pc, #364]	@ (8002fa8 <HAL_RCC_OscConfig+0x4c4>)
 8002e3c:	6a1b      	ldr	r3, [r3, #32]
 8002e3e:	4a5a      	ldr	r2, [pc, #360]	@ (8002fa8 <HAL_RCC_OscConfig+0x4c4>)
 8002e40:	f023 0301 	bic.w	r3, r3, #1
 8002e44:	6213      	str	r3, [r2, #32]
 8002e46:	4b58      	ldr	r3, [pc, #352]	@ (8002fa8 <HAL_RCC_OscConfig+0x4c4>)
 8002e48:	6a1b      	ldr	r3, [r3, #32]
 8002e4a:	4a57      	ldr	r2, [pc, #348]	@ (8002fa8 <HAL_RCC_OscConfig+0x4c4>)
 8002e4c:	f023 0304 	bic.w	r3, r3, #4
 8002e50:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	68db      	ldr	r3, [r3, #12]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d015      	beq.n	8002e86 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e5a:	f7fe fe9f 	bl	8001b9c <HAL_GetTick>
 8002e5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e60:	e00a      	b.n	8002e78 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e62:	f7fe fe9b 	bl	8001b9c <HAL_GetTick>
 8002e66:	4602      	mov	r2, r0
 8002e68:	693b      	ldr	r3, [r7, #16]
 8002e6a:	1ad3      	subs	r3, r2, r3
 8002e6c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d901      	bls.n	8002e78 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002e74:	2303      	movs	r3, #3
 8002e76:	e0b1      	b.n	8002fdc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e78:	4b4b      	ldr	r3, [pc, #300]	@ (8002fa8 <HAL_RCC_OscConfig+0x4c4>)
 8002e7a:	6a1b      	ldr	r3, [r3, #32]
 8002e7c:	f003 0302 	and.w	r3, r3, #2
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d0ee      	beq.n	8002e62 <HAL_RCC_OscConfig+0x37e>
 8002e84:	e014      	b.n	8002eb0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e86:	f7fe fe89 	bl	8001b9c <HAL_GetTick>
 8002e8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e8c:	e00a      	b.n	8002ea4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e8e:	f7fe fe85 	bl	8001b9c <HAL_GetTick>
 8002e92:	4602      	mov	r2, r0
 8002e94:	693b      	ldr	r3, [r7, #16]
 8002e96:	1ad3      	subs	r3, r2, r3
 8002e98:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d901      	bls.n	8002ea4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002ea0:	2303      	movs	r3, #3
 8002ea2:	e09b      	b.n	8002fdc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ea4:	4b40      	ldr	r3, [pc, #256]	@ (8002fa8 <HAL_RCC_OscConfig+0x4c4>)
 8002ea6:	6a1b      	ldr	r3, [r3, #32]
 8002ea8:	f003 0302 	and.w	r3, r3, #2
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d1ee      	bne.n	8002e8e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002eb0:	7dfb      	ldrb	r3, [r7, #23]
 8002eb2:	2b01      	cmp	r3, #1
 8002eb4:	d105      	bne.n	8002ec2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002eb6:	4b3c      	ldr	r3, [pc, #240]	@ (8002fa8 <HAL_RCC_OscConfig+0x4c4>)
 8002eb8:	69db      	ldr	r3, [r3, #28]
 8002eba:	4a3b      	ldr	r2, [pc, #236]	@ (8002fa8 <HAL_RCC_OscConfig+0x4c4>)
 8002ebc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002ec0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	69db      	ldr	r3, [r3, #28]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	f000 8087 	beq.w	8002fda <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002ecc:	4b36      	ldr	r3, [pc, #216]	@ (8002fa8 <HAL_RCC_OscConfig+0x4c4>)
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	f003 030c 	and.w	r3, r3, #12
 8002ed4:	2b08      	cmp	r3, #8
 8002ed6:	d061      	beq.n	8002f9c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	69db      	ldr	r3, [r3, #28]
 8002edc:	2b02      	cmp	r3, #2
 8002ede:	d146      	bne.n	8002f6e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ee0:	4b33      	ldr	r3, [pc, #204]	@ (8002fb0 <HAL_RCC_OscConfig+0x4cc>)
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ee6:	f7fe fe59 	bl	8001b9c <HAL_GetTick>
 8002eea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002eec:	e008      	b.n	8002f00 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002eee:	f7fe fe55 	bl	8001b9c <HAL_GetTick>
 8002ef2:	4602      	mov	r2, r0
 8002ef4:	693b      	ldr	r3, [r7, #16]
 8002ef6:	1ad3      	subs	r3, r2, r3
 8002ef8:	2b02      	cmp	r3, #2
 8002efa:	d901      	bls.n	8002f00 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002efc:	2303      	movs	r3, #3
 8002efe:	e06d      	b.n	8002fdc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f00:	4b29      	ldr	r3, [pc, #164]	@ (8002fa8 <HAL_RCC_OscConfig+0x4c4>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d1f0      	bne.n	8002eee <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6a1b      	ldr	r3, [r3, #32]
 8002f10:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002f14:	d108      	bne.n	8002f28 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002f16:	4b24      	ldr	r3, [pc, #144]	@ (8002fa8 <HAL_RCC_OscConfig+0x4c4>)
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	689b      	ldr	r3, [r3, #8]
 8002f22:	4921      	ldr	r1, [pc, #132]	@ (8002fa8 <HAL_RCC_OscConfig+0x4c4>)
 8002f24:	4313      	orrs	r3, r2
 8002f26:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f28:	4b1f      	ldr	r3, [pc, #124]	@ (8002fa8 <HAL_RCC_OscConfig+0x4c4>)
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6a19      	ldr	r1, [r3, #32]
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f38:	430b      	orrs	r3, r1
 8002f3a:	491b      	ldr	r1, [pc, #108]	@ (8002fa8 <HAL_RCC_OscConfig+0x4c4>)
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f40:	4b1b      	ldr	r3, [pc, #108]	@ (8002fb0 <HAL_RCC_OscConfig+0x4cc>)
 8002f42:	2201      	movs	r2, #1
 8002f44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f46:	f7fe fe29 	bl	8001b9c <HAL_GetTick>
 8002f4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002f4c:	e008      	b.n	8002f60 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f4e:	f7fe fe25 	bl	8001b9c <HAL_GetTick>
 8002f52:	4602      	mov	r2, r0
 8002f54:	693b      	ldr	r3, [r7, #16]
 8002f56:	1ad3      	subs	r3, r2, r3
 8002f58:	2b02      	cmp	r3, #2
 8002f5a:	d901      	bls.n	8002f60 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002f5c:	2303      	movs	r3, #3
 8002f5e:	e03d      	b.n	8002fdc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002f60:	4b11      	ldr	r3, [pc, #68]	@ (8002fa8 <HAL_RCC_OscConfig+0x4c4>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d0f0      	beq.n	8002f4e <HAL_RCC_OscConfig+0x46a>
 8002f6c:	e035      	b.n	8002fda <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f6e:	4b10      	ldr	r3, [pc, #64]	@ (8002fb0 <HAL_RCC_OscConfig+0x4cc>)
 8002f70:	2200      	movs	r2, #0
 8002f72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f74:	f7fe fe12 	bl	8001b9c <HAL_GetTick>
 8002f78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f7a:	e008      	b.n	8002f8e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f7c:	f7fe fe0e 	bl	8001b9c <HAL_GetTick>
 8002f80:	4602      	mov	r2, r0
 8002f82:	693b      	ldr	r3, [r7, #16]
 8002f84:	1ad3      	subs	r3, r2, r3
 8002f86:	2b02      	cmp	r3, #2
 8002f88:	d901      	bls.n	8002f8e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002f8a:	2303      	movs	r3, #3
 8002f8c:	e026      	b.n	8002fdc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f8e:	4b06      	ldr	r3, [pc, #24]	@ (8002fa8 <HAL_RCC_OscConfig+0x4c4>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d1f0      	bne.n	8002f7c <HAL_RCC_OscConfig+0x498>
 8002f9a:	e01e      	b.n	8002fda <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	69db      	ldr	r3, [r3, #28]
 8002fa0:	2b01      	cmp	r3, #1
 8002fa2:	d107      	bne.n	8002fb4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	e019      	b.n	8002fdc <HAL_RCC_OscConfig+0x4f8>
 8002fa8:	40021000 	.word	0x40021000
 8002fac:	40007000 	.word	0x40007000
 8002fb0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002fb4:	4b0b      	ldr	r3, [pc, #44]	@ (8002fe4 <HAL_RCC_OscConfig+0x500>)
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6a1b      	ldr	r3, [r3, #32]
 8002fc4:	429a      	cmp	r2, r3
 8002fc6:	d106      	bne.n	8002fd6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fd2:	429a      	cmp	r2, r3
 8002fd4:	d001      	beq.n	8002fda <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	e000      	b.n	8002fdc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002fda:	2300      	movs	r3, #0
}
 8002fdc:	4618      	mov	r0, r3
 8002fde:	3718      	adds	r7, #24
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	bd80      	pop	{r7, pc}
 8002fe4:	40021000 	.word	0x40021000

08002fe8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b084      	sub	sp, #16
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
 8002ff0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d101      	bne.n	8002ffc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	e0d0      	b.n	800319e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002ffc:	4b6a      	ldr	r3, [pc, #424]	@ (80031a8 <HAL_RCC_ClockConfig+0x1c0>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f003 0307 	and.w	r3, r3, #7
 8003004:	683a      	ldr	r2, [r7, #0]
 8003006:	429a      	cmp	r2, r3
 8003008:	d910      	bls.n	800302c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800300a:	4b67      	ldr	r3, [pc, #412]	@ (80031a8 <HAL_RCC_ClockConfig+0x1c0>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f023 0207 	bic.w	r2, r3, #7
 8003012:	4965      	ldr	r1, [pc, #404]	@ (80031a8 <HAL_RCC_ClockConfig+0x1c0>)
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	4313      	orrs	r3, r2
 8003018:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800301a:	4b63      	ldr	r3, [pc, #396]	@ (80031a8 <HAL_RCC_ClockConfig+0x1c0>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f003 0307 	and.w	r3, r3, #7
 8003022:	683a      	ldr	r2, [r7, #0]
 8003024:	429a      	cmp	r2, r3
 8003026:	d001      	beq.n	800302c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003028:	2301      	movs	r3, #1
 800302a:	e0b8      	b.n	800319e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f003 0302 	and.w	r3, r3, #2
 8003034:	2b00      	cmp	r3, #0
 8003036:	d020      	beq.n	800307a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f003 0304 	and.w	r3, r3, #4
 8003040:	2b00      	cmp	r3, #0
 8003042:	d005      	beq.n	8003050 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003044:	4b59      	ldr	r3, [pc, #356]	@ (80031ac <HAL_RCC_ClockConfig+0x1c4>)
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	4a58      	ldr	r2, [pc, #352]	@ (80031ac <HAL_RCC_ClockConfig+0x1c4>)
 800304a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800304e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f003 0308 	and.w	r3, r3, #8
 8003058:	2b00      	cmp	r3, #0
 800305a:	d005      	beq.n	8003068 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800305c:	4b53      	ldr	r3, [pc, #332]	@ (80031ac <HAL_RCC_ClockConfig+0x1c4>)
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	4a52      	ldr	r2, [pc, #328]	@ (80031ac <HAL_RCC_ClockConfig+0x1c4>)
 8003062:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8003066:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003068:	4b50      	ldr	r3, [pc, #320]	@ (80031ac <HAL_RCC_ClockConfig+0x1c4>)
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	689b      	ldr	r3, [r3, #8]
 8003074:	494d      	ldr	r1, [pc, #308]	@ (80031ac <HAL_RCC_ClockConfig+0x1c4>)
 8003076:	4313      	orrs	r3, r2
 8003078:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f003 0301 	and.w	r3, r3, #1
 8003082:	2b00      	cmp	r3, #0
 8003084:	d040      	beq.n	8003108 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	2b01      	cmp	r3, #1
 800308c:	d107      	bne.n	800309e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800308e:	4b47      	ldr	r3, [pc, #284]	@ (80031ac <HAL_RCC_ClockConfig+0x1c4>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003096:	2b00      	cmp	r3, #0
 8003098:	d115      	bne.n	80030c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800309a:	2301      	movs	r3, #1
 800309c:	e07f      	b.n	800319e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	685b      	ldr	r3, [r3, #4]
 80030a2:	2b02      	cmp	r3, #2
 80030a4:	d107      	bne.n	80030b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030a6:	4b41      	ldr	r3, [pc, #260]	@ (80031ac <HAL_RCC_ClockConfig+0x1c4>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d109      	bne.n	80030c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030b2:	2301      	movs	r3, #1
 80030b4:	e073      	b.n	800319e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030b6:	4b3d      	ldr	r3, [pc, #244]	@ (80031ac <HAL_RCC_ClockConfig+0x1c4>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f003 0302 	and.w	r3, r3, #2
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d101      	bne.n	80030c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030c2:	2301      	movs	r3, #1
 80030c4:	e06b      	b.n	800319e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80030c6:	4b39      	ldr	r3, [pc, #228]	@ (80031ac <HAL_RCC_ClockConfig+0x1c4>)
 80030c8:	685b      	ldr	r3, [r3, #4]
 80030ca:	f023 0203 	bic.w	r2, r3, #3
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	4936      	ldr	r1, [pc, #216]	@ (80031ac <HAL_RCC_ClockConfig+0x1c4>)
 80030d4:	4313      	orrs	r3, r2
 80030d6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80030d8:	f7fe fd60 	bl	8001b9c <HAL_GetTick>
 80030dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030de:	e00a      	b.n	80030f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030e0:	f7fe fd5c 	bl	8001b9c <HAL_GetTick>
 80030e4:	4602      	mov	r2, r0
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	1ad3      	subs	r3, r2, r3
 80030ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d901      	bls.n	80030f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80030f2:	2303      	movs	r3, #3
 80030f4:	e053      	b.n	800319e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030f6:	4b2d      	ldr	r3, [pc, #180]	@ (80031ac <HAL_RCC_ClockConfig+0x1c4>)
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	f003 020c 	and.w	r2, r3, #12
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	009b      	lsls	r3, r3, #2
 8003104:	429a      	cmp	r2, r3
 8003106:	d1eb      	bne.n	80030e0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003108:	4b27      	ldr	r3, [pc, #156]	@ (80031a8 <HAL_RCC_ClockConfig+0x1c0>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f003 0307 	and.w	r3, r3, #7
 8003110:	683a      	ldr	r2, [r7, #0]
 8003112:	429a      	cmp	r2, r3
 8003114:	d210      	bcs.n	8003138 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003116:	4b24      	ldr	r3, [pc, #144]	@ (80031a8 <HAL_RCC_ClockConfig+0x1c0>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f023 0207 	bic.w	r2, r3, #7
 800311e:	4922      	ldr	r1, [pc, #136]	@ (80031a8 <HAL_RCC_ClockConfig+0x1c0>)
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	4313      	orrs	r3, r2
 8003124:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003126:	4b20      	ldr	r3, [pc, #128]	@ (80031a8 <HAL_RCC_ClockConfig+0x1c0>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f003 0307 	and.w	r3, r3, #7
 800312e:	683a      	ldr	r2, [r7, #0]
 8003130:	429a      	cmp	r2, r3
 8003132:	d001      	beq.n	8003138 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003134:	2301      	movs	r3, #1
 8003136:	e032      	b.n	800319e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f003 0304 	and.w	r3, r3, #4
 8003140:	2b00      	cmp	r3, #0
 8003142:	d008      	beq.n	8003156 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003144:	4b19      	ldr	r3, [pc, #100]	@ (80031ac <HAL_RCC_ClockConfig+0x1c4>)
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	68db      	ldr	r3, [r3, #12]
 8003150:	4916      	ldr	r1, [pc, #88]	@ (80031ac <HAL_RCC_ClockConfig+0x1c4>)
 8003152:	4313      	orrs	r3, r2
 8003154:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f003 0308 	and.w	r3, r3, #8
 800315e:	2b00      	cmp	r3, #0
 8003160:	d009      	beq.n	8003176 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003162:	4b12      	ldr	r3, [pc, #72]	@ (80031ac <HAL_RCC_ClockConfig+0x1c4>)
 8003164:	685b      	ldr	r3, [r3, #4]
 8003166:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	691b      	ldr	r3, [r3, #16]
 800316e:	00db      	lsls	r3, r3, #3
 8003170:	490e      	ldr	r1, [pc, #56]	@ (80031ac <HAL_RCC_ClockConfig+0x1c4>)
 8003172:	4313      	orrs	r3, r2
 8003174:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003176:	f000 f821 	bl	80031bc <HAL_RCC_GetSysClockFreq>
 800317a:	4602      	mov	r2, r0
 800317c:	4b0b      	ldr	r3, [pc, #44]	@ (80031ac <HAL_RCC_ClockConfig+0x1c4>)
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	091b      	lsrs	r3, r3, #4
 8003182:	f003 030f 	and.w	r3, r3, #15
 8003186:	490a      	ldr	r1, [pc, #40]	@ (80031b0 <HAL_RCC_ClockConfig+0x1c8>)
 8003188:	5ccb      	ldrb	r3, [r1, r3]
 800318a:	fa22 f303 	lsr.w	r3, r2, r3
 800318e:	4a09      	ldr	r2, [pc, #36]	@ (80031b4 <HAL_RCC_ClockConfig+0x1cc>)
 8003190:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003192:	4b09      	ldr	r3, [pc, #36]	@ (80031b8 <HAL_RCC_ClockConfig+0x1d0>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4618      	mov	r0, r3
 8003198:	f7fe fcbe 	bl	8001b18 <HAL_InitTick>

  return HAL_OK;
 800319c:	2300      	movs	r3, #0
}
 800319e:	4618      	mov	r0, r3
 80031a0:	3710      	adds	r7, #16
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bd80      	pop	{r7, pc}
 80031a6:	bf00      	nop
 80031a8:	40022000 	.word	0x40022000
 80031ac:	40021000 	.word	0x40021000
 80031b0:	0800464c 	.word	0x0800464c
 80031b4:	20000088 	.word	0x20000088
 80031b8:	2000008c 	.word	0x2000008c

080031bc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80031bc:	b480      	push	{r7}
 80031be:	b087      	sub	sp, #28
 80031c0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80031c2:	2300      	movs	r3, #0
 80031c4:	60fb      	str	r3, [r7, #12]
 80031c6:	2300      	movs	r3, #0
 80031c8:	60bb      	str	r3, [r7, #8]
 80031ca:	2300      	movs	r3, #0
 80031cc:	617b      	str	r3, [r7, #20]
 80031ce:	2300      	movs	r3, #0
 80031d0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80031d2:	2300      	movs	r3, #0
 80031d4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80031d6:	4b1e      	ldr	r3, [pc, #120]	@ (8003250 <HAL_RCC_GetSysClockFreq+0x94>)
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	f003 030c 	and.w	r3, r3, #12
 80031e2:	2b04      	cmp	r3, #4
 80031e4:	d002      	beq.n	80031ec <HAL_RCC_GetSysClockFreq+0x30>
 80031e6:	2b08      	cmp	r3, #8
 80031e8:	d003      	beq.n	80031f2 <HAL_RCC_GetSysClockFreq+0x36>
 80031ea:	e027      	b.n	800323c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80031ec:	4b19      	ldr	r3, [pc, #100]	@ (8003254 <HAL_RCC_GetSysClockFreq+0x98>)
 80031ee:	613b      	str	r3, [r7, #16]
      break;
 80031f0:	e027      	b.n	8003242 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	0c9b      	lsrs	r3, r3, #18
 80031f6:	f003 030f 	and.w	r3, r3, #15
 80031fa:	4a17      	ldr	r2, [pc, #92]	@ (8003258 <HAL_RCC_GetSysClockFreq+0x9c>)
 80031fc:	5cd3      	ldrb	r3, [r2, r3]
 80031fe:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003206:	2b00      	cmp	r3, #0
 8003208:	d010      	beq.n	800322c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800320a:	4b11      	ldr	r3, [pc, #68]	@ (8003250 <HAL_RCC_GetSysClockFreq+0x94>)
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	0c5b      	lsrs	r3, r3, #17
 8003210:	f003 0301 	and.w	r3, r3, #1
 8003214:	4a11      	ldr	r2, [pc, #68]	@ (800325c <HAL_RCC_GetSysClockFreq+0xa0>)
 8003216:	5cd3      	ldrb	r3, [r2, r3]
 8003218:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	4a0d      	ldr	r2, [pc, #52]	@ (8003254 <HAL_RCC_GetSysClockFreq+0x98>)
 800321e:	fb03 f202 	mul.w	r2, r3, r2
 8003222:	68bb      	ldr	r3, [r7, #8]
 8003224:	fbb2 f3f3 	udiv	r3, r2, r3
 8003228:	617b      	str	r3, [r7, #20]
 800322a:	e004      	b.n	8003236 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	4a0c      	ldr	r2, [pc, #48]	@ (8003260 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003230:	fb02 f303 	mul.w	r3, r2, r3
 8003234:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003236:	697b      	ldr	r3, [r7, #20]
 8003238:	613b      	str	r3, [r7, #16]
      break;
 800323a:	e002      	b.n	8003242 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800323c:	4b05      	ldr	r3, [pc, #20]	@ (8003254 <HAL_RCC_GetSysClockFreq+0x98>)
 800323e:	613b      	str	r3, [r7, #16]
      break;
 8003240:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003242:	693b      	ldr	r3, [r7, #16]
}
 8003244:	4618      	mov	r0, r3
 8003246:	371c      	adds	r7, #28
 8003248:	46bd      	mov	sp, r7
 800324a:	bc80      	pop	{r7}
 800324c:	4770      	bx	lr
 800324e:	bf00      	nop
 8003250:	40021000 	.word	0x40021000
 8003254:	007a1200 	.word	0x007a1200
 8003258:	08004664 	.word	0x08004664
 800325c:	08004674 	.word	0x08004674
 8003260:	003d0900 	.word	0x003d0900

08003264 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003264:	b480      	push	{r7}
 8003266:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003268:	4b02      	ldr	r3, [pc, #8]	@ (8003274 <HAL_RCC_GetHCLKFreq+0x10>)
 800326a:	681b      	ldr	r3, [r3, #0]
}
 800326c:	4618      	mov	r0, r3
 800326e:	46bd      	mov	sp, r7
 8003270:	bc80      	pop	{r7}
 8003272:	4770      	bx	lr
 8003274:	20000088 	.word	0x20000088

08003278 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800327c:	f7ff fff2 	bl	8003264 <HAL_RCC_GetHCLKFreq>
 8003280:	4602      	mov	r2, r0
 8003282:	4b05      	ldr	r3, [pc, #20]	@ (8003298 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	0a1b      	lsrs	r3, r3, #8
 8003288:	f003 0307 	and.w	r3, r3, #7
 800328c:	4903      	ldr	r1, [pc, #12]	@ (800329c <HAL_RCC_GetPCLK1Freq+0x24>)
 800328e:	5ccb      	ldrb	r3, [r1, r3]
 8003290:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003294:	4618      	mov	r0, r3
 8003296:	bd80      	pop	{r7, pc}
 8003298:	40021000 	.word	0x40021000
 800329c:	0800465c 	.word	0x0800465c

080032a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80032a4:	f7ff ffde 	bl	8003264 <HAL_RCC_GetHCLKFreq>
 80032a8:	4602      	mov	r2, r0
 80032aa:	4b05      	ldr	r3, [pc, #20]	@ (80032c0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	0adb      	lsrs	r3, r3, #11
 80032b0:	f003 0307 	and.w	r3, r3, #7
 80032b4:	4903      	ldr	r1, [pc, #12]	@ (80032c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80032b6:	5ccb      	ldrb	r3, [r1, r3]
 80032b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032bc:	4618      	mov	r0, r3
 80032be:	bd80      	pop	{r7, pc}
 80032c0:	40021000 	.word	0x40021000
 80032c4:	0800465c 	.word	0x0800465c

080032c8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80032c8:	b480      	push	{r7}
 80032ca:	b085      	sub	sp, #20
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80032d0:	4b0a      	ldr	r3, [pc, #40]	@ (80032fc <RCC_Delay+0x34>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4a0a      	ldr	r2, [pc, #40]	@ (8003300 <RCC_Delay+0x38>)
 80032d6:	fba2 2303 	umull	r2, r3, r2, r3
 80032da:	0a5b      	lsrs	r3, r3, #9
 80032dc:	687a      	ldr	r2, [r7, #4]
 80032de:	fb02 f303 	mul.w	r3, r2, r3
 80032e2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80032e4:	bf00      	nop
  }
  while (Delay --);
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	1e5a      	subs	r2, r3, #1
 80032ea:	60fa      	str	r2, [r7, #12]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d1f9      	bne.n	80032e4 <RCC_Delay+0x1c>
}
 80032f0:	bf00      	nop
 80032f2:	bf00      	nop
 80032f4:	3714      	adds	r7, #20
 80032f6:	46bd      	mov	sp, r7
 80032f8:	bc80      	pop	{r7}
 80032fa:	4770      	bx	lr
 80032fc:	20000088 	.word	0x20000088
 8003300:	10624dd3 	.word	0x10624dd3

08003304 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b082      	sub	sp, #8
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d101      	bne.n	8003316 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003312:	2301      	movs	r3, #1
 8003314:	e041      	b.n	800339a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800331c:	b2db      	uxtb	r3, r3
 800331e:	2b00      	cmp	r3, #0
 8003320:	d106      	bne.n	8003330 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2200      	movs	r2, #0
 8003326:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800332a:	6878      	ldr	r0, [r7, #4]
 800332c:	f7fe fad8 	bl	80018e0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2202      	movs	r2, #2
 8003334:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681a      	ldr	r2, [r3, #0]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	3304      	adds	r3, #4
 8003340:	4619      	mov	r1, r3
 8003342:	4610      	mov	r0, r2
 8003344:	f000 fa5c 	bl	8003800 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2201      	movs	r2, #1
 800334c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2201      	movs	r2, #1
 8003354:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2201      	movs	r2, #1
 800335c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2201      	movs	r2, #1
 8003364:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2201      	movs	r2, #1
 800336c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2201      	movs	r2, #1
 8003374:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2201      	movs	r2, #1
 800337c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2201      	movs	r2, #1
 8003384:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2201      	movs	r2, #1
 800338c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2201      	movs	r2, #1
 8003394:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003398:	2300      	movs	r3, #0
}
 800339a:	4618      	mov	r0, r3
 800339c:	3708      	adds	r7, #8
 800339e:	46bd      	mov	sp, r7
 80033a0:	bd80      	pop	{r7, pc}
	...

080033a4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80033a4:	b480      	push	{r7}
 80033a6:	b085      	sub	sp, #20
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80033b2:	b2db      	uxtb	r3, r3
 80033b4:	2b01      	cmp	r3, #1
 80033b6:	d001      	beq.n	80033bc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80033b8:	2301      	movs	r3, #1
 80033ba:	e03a      	b.n	8003432 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2202      	movs	r2, #2
 80033c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	68da      	ldr	r2, [r3, #12]
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f042 0201 	orr.w	r2, r2, #1
 80033d2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4a18      	ldr	r2, [pc, #96]	@ (800343c <HAL_TIM_Base_Start_IT+0x98>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d00e      	beq.n	80033fc <HAL_TIM_Base_Start_IT+0x58>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80033e6:	d009      	beq.n	80033fc <HAL_TIM_Base_Start_IT+0x58>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4a14      	ldr	r2, [pc, #80]	@ (8003440 <HAL_TIM_Base_Start_IT+0x9c>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d004      	beq.n	80033fc <HAL_TIM_Base_Start_IT+0x58>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4a13      	ldr	r2, [pc, #76]	@ (8003444 <HAL_TIM_Base_Start_IT+0xa0>)
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d111      	bne.n	8003420 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	689b      	ldr	r3, [r3, #8]
 8003402:	f003 0307 	and.w	r3, r3, #7
 8003406:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	2b06      	cmp	r3, #6
 800340c:	d010      	beq.n	8003430 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	681a      	ldr	r2, [r3, #0]
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f042 0201 	orr.w	r2, r2, #1
 800341c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800341e:	e007      	b.n	8003430 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	681a      	ldr	r2, [r3, #0]
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f042 0201 	orr.w	r2, r2, #1
 800342e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003430:	2300      	movs	r3, #0
}
 8003432:	4618      	mov	r0, r3
 8003434:	3714      	adds	r7, #20
 8003436:	46bd      	mov	sp, r7
 8003438:	bc80      	pop	{r7}
 800343a:	4770      	bx	lr
 800343c:	40012c00 	.word	0x40012c00
 8003440:	40000400 	.word	0x40000400
 8003444:	40000800 	.word	0x40000800

08003448 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b084      	sub	sp, #16
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	68db      	ldr	r3, [r3, #12]
 8003456:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	691b      	ldr	r3, [r3, #16]
 800345e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003460:	68bb      	ldr	r3, [r7, #8]
 8003462:	f003 0302 	and.w	r3, r3, #2
 8003466:	2b00      	cmp	r3, #0
 8003468:	d020      	beq.n	80034ac <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	f003 0302 	and.w	r3, r3, #2
 8003470:	2b00      	cmp	r3, #0
 8003472:	d01b      	beq.n	80034ac <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f06f 0202 	mvn.w	r2, #2
 800347c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2201      	movs	r2, #1
 8003482:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	699b      	ldr	r3, [r3, #24]
 800348a:	f003 0303 	and.w	r3, r3, #3
 800348e:	2b00      	cmp	r3, #0
 8003490:	d003      	beq.n	800349a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003492:	6878      	ldr	r0, [r7, #4]
 8003494:	f000 f998 	bl	80037c8 <HAL_TIM_IC_CaptureCallback>
 8003498:	e005      	b.n	80034a6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800349a:	6878      	ldr	r0, [r7, #4]
 800349c:	f000 f98b 	bl	80037b6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034a0:	6878      	ldr	r0, [r7, #4]
 80034a2:	f000 f99a 	bl	80037da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2200      	movs	r2, #0
 80034aa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80034ac:	68bb      	ldr	r3, [r7, #8]
 80034ae:	f003 0304 	and.w	r3, r3, #4
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d020      	beq.n	80034f8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	f003 0304 	and.w	r3, r3, #4
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d01b      	beq.n	80034f8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f06f 0204 	mvn.w	r2, #4
 80034c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2202      	movs	r2, #2
 80034ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	699b      	ldr	r3, [r3, #24]
 80034d6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d003      	beq.n	80034e6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034de:	6878      	ldr	r0, [r7, #4]
 80034e0:	f000 f972 	bl	80037c8 <HAL_TIM_IC_CaptureCallback>
 80034e4:	e005      	b.n	80034f2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034e6:	6878      	ldr	r0, [r7, #4]
 80034e8:	f000 f965 	bl	80037b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034ec:	6878      	ldr	r0, [r7, #4]
 80034ee:	f000 f974 	bl	80037da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2200      	movs	r2, #0
 80034f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80034f8:	68bb      	ldr	r3, [r7, #8]
 80034fa:	f003 0308 	and.w	r3, r3, #8
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d020      	beq.n	8003544 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	f003 0308 	and.w	r3, r3, #8
 8003508:	2b00      	cmp	r3, #0
 800350a:	d01b      	beq.n	8003544 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f06f 0208 	mvn.w	r2, #8
 8003514:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2204      	movs	r2, #4
 800351a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	69db      	ldr	r3, [r3, #28]
 8003522:	f003 0303 	and.w	r3, r3, #3
 8003526:	2b00      	cmp	r3, #0
 8003528:	d003      	beq.n	8003532 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800352a:	6878      	ldr	r0, [r7, #4]
 800352c:	f000 f94c 	bl	80037c8 <HAL_TIM_IC_CaptureCallback>
 8003530:	e005      	b.n	800353e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003532:	6878      	ldr	r0, [r7, #4]
 8003534:	f000 f93f 	bl	80037b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003538:	6878      	ldr	r0, [r7, #4]
 800353a:	f000 f94e 	bl	80037da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2200      	movs	r2, #0
 8003542:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003544:	68bb      	ldr	r3, [r7, #8]
 8003546:	f003 0310 	and.w	r3, r3, #16
 800354a:	2b00      	cmp	r3, #0
 800354c:	d020      	beq.n	8003590 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	f003 0310 	and.w	r3, r3, #16
 8003554:	2b00      	cmp	r3, #0
 8003556:	d01b      	beq.n	8003590 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f06f 0210 	mvn.w	r2, #16
 8003560:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2208      	movs	r2, #8
 8003566:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	69db      	ldr	r3, [r3, #28]
 800356e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003572:	2b00      	cmp	r3, #0
 8003574:	d003      	beq.n	800357e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003576:	6878      	ldr	r0, [r7, #4]
 8003578:	f000 f926 	bl	80037c8 <HAL_TIM_IC_CaptureCallback>
 800357c:	e005      	b.n	800358a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800357e:	6878      	ldr	r0, [r7, #4]
 8003580:	f000 f919 	bl	80037b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003584:	6878      	ldr	r0, [r7, #4]
 8003586:	f000 f928 	bl	80037da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2200      	movs	r2, #0
 800358e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003590:	68bb      	ldr	r3, [r7, #8]
 8003592:	f003 0301 	and.w	r3, r3, #1
 8003596:	2b00      	cmp	r3, #0
 8003598:	d00c      	beq.n	80035b4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	f003 0301 	and.w	r3, r3, #1
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d007      	beq.n	80035b4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f06f 0201 	mvn.w	r2, #1
 80035ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80035ae:	6878      	ldr	r0, [r7, #4]
 80035b0:	f7fe f8ae 	bl	8001710 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80035b4:	68bb      	ldr	r3, [r7, #8]
 80035b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d00c      	beq.n	80035d8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d007      	beq.n	80035d8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80035d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80035d2:	6878      	ldr	r0, [r7, #4]
 80035d4:	f000 fa7f 	bl	8003ad6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80035d8:	68bb      	ldr	r3, [r7, #8]
 80035da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d00c      	beq.n	80035fc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d007      	beq.n	80035fc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80035f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80035f6:	6878      	ldr	r0, [r7, #4]
 80035f8:	f000 f8f8 	bl	80037ec <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80035fc:	68bb      	ldr	r3, [r7, #8]
 80035fe:	f003 0320 	and.w	r3, r3, #32
 8003602:	2b00      	cmp	r3, #0
 8003604:	d00c      	beq.n	8003620 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	f003 0320 	and.w	r3, r3, #32
 800360c:	2b00      	cmp	r3, #0
 800360e:	d007      	beq.n	8003620 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f06f 0220 	mvn.w	r2, #32
 8003618:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800361a:	6878      	ldr	r0, [r7, #4]
 800361c:	f000 fa52 	bl	8003ac4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003620:	bf00      	nop
 8003622:	3710      	adds	r7, #16
 8003624:	46bd      	mov	sp, r7
 8003626:	bd80      	pop	{r7, pc}

08003628 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b084      	sub	sp, #16
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
 8003630:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003632:	2300      	movs	r3, #0
 8003634:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800363c:	2b01      	cmp	r3, #1
 800363e:	d101      	bne.n	8003644 <HAL_TIM_ConfigClockSource+0x1c>
 8003640:	2302      	movs	r3, #2
 8003642:	e0b4      	b.n	80037ae <HAL_TIM_ConfigClockSource+0x186>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2201      	movs	r2, #1
 8003648:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2202      	movs	r2, #2
 8003650:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	689b      	ldr	r3, [r3, #8]
 800365a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800365c:	68bb      	ldr	r3, [r7, #8]
 800365e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003662:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003664:	68bb      	ldr	r3, [r7, #8]
 8003666:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800366a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	68ba      	ldr	r2, [r7, #8]
 8003672:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800367c:	d03e      	beq.n	80036fc <HAL_TIM_ConfigClockSource+0xd4>
 800367e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003682:	f200 8087 	bhi.w	8003794 <HAL_TIM_ConfigClockSource+0x16c>
 8003686:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800368a:	f000 8086 	beq.w	800379a <HAL_TIM_ConfigClockSource+0x172>
 800368e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003692:	d87f      	bhi.n	8003794 <HAL_TIM_ConfigClockSource+0x16c>
 8003694:	2b70      	cmp	r3, #112	@ 0x70
 8003696:	d01a      	beq.n	80036ce <HAL_TIM_ConfigClockSource+0xa6>
 8003698:	2b70      	cmp	r3, #112	@ 0x70
 800369a:	d87b      	bhi.n	8003794 <HAL_TIM_ConfigClockSource+0x16c>
 800369c:	2b60      	cmp	r3, #96	@ 0x60
 800369e:	d050      	beq.n	8003742 <HAL_TIM_ConfigClockSource+0x11a>
 80036a0:	2b60      	cmp	r3, #96	@ 0x60
 80036a2:	d877      	bhi.n	8003794 <HAL_TIM_ConfigClockSource+0x16c>
 80036a4:	2b50      	cmp	r3, #80	@ 0x50
 80036a6:	d03c      	beq.n	8003722 <HAL_TIM_ConfigClockSource+0xfa>
 80036a8:	2b50      	cmp	r3, #80	@ 0x50
 80036aa:	d873      	bhi.n	8003794 <HAL_TIM_ConfigClockSource+0x16c>
 80036ac:	2b40      	cmp	r3, #64	@ 0x40
 80036ae:	d058      	beq.n	8003762 <HAL_TIM_ConfigClockSource+0x13a>
 80036b0:	2b40      	cmp	r3, #64	@ 0x40
 80036b2:	d86f      	bhi.n	8003794 <HAL_TIM_ConfigClockSource+0x16c>
 80036b4:	2b30      	cmp	r3, #48	@ 0x30
 80036b6:	d064      	beq.n	8003782 <HAL_TIM_ConfigClockSource+0x15a>
 80036b8:	2b30      	cmp	r3, #48	@ 0x30
 80036ba:	d86b      	bhi.n	8003794 <HAL_TIM_ConfigClockSource+0x16c>
 80036bc:	2b20      	cmp	r3, #32
 80036be:	d060      	beq.n	8003782 <HAL_TIM_ConfigClockSource+0x15a>
 80036c0:	2b20      	cmp	r3, #32
 80036c2:	d867      	bhi.n	8003794 <HAL_TIM_ConfigClockSource+0x16c>
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d05c      	beq.n	8003782 <HAL_TIM_ConfigClockSource+0x15a>
 80036c8:	2b10      	cmp	r3, #16
 80036ca:	d05a      	beq.n	8003782 <HAL_TIM_ConfigClockSource+0x15a>
 80036cc:	e062      	b.n	8003794 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80036de:	f000 f974 	bl	80039ca <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	689b      	ldr	r3, [r3, #8]
 80036e8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80036ea:	68bb      	ldr	r3, [r7, #8]
 80036ec:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80036f0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	68ba      	ldr	r2, [r7, #8]
 80036f8:	609a      	str	r2, [r3, #8]
      break;
 80036fa:	e04f      	b.n	800379c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800370c:	f000 f95d 	bl	80039ca <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	689a      	ldr	r2, [r3, #8]
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800371e:	609a      	str	r2, [r3, #8]
      break;
 8003720:	e03c      	b.n	800379c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800372e:	461a      	mov	r2, r3
 8003730:	f000 f8d4 	bl	80038dc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	2150      	movs	r1, #80	@ 0x50
 800373a:	4618      	mov	r0, r3
 800373c:	f000 f92b 	bl	8003996 <TIM_ITRx_SetConfig>
      break;
 8003740:	e02c      	b.n	800379c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800374e:	461a      	mov	r2, r3
 8003750:	f000 f8f2 	bl	8003938 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	2160      	movs	r1, #96	@ 0x60
 800375a:	4618      	mov	r0, r3
 800375c:	f000 f91b 	bl	8003996 <TIM_ITRx_SetConfig>
      break;
 8003760:	e01c      	b.n	800379c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800376e:	461a      	mov	r2, r3
 8003770:	f000 f8b4 	bl	80038dc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	2140      	movs	r1, #64	@ 0x40
 800377a:	4618      	mov	r0, r3
 800377c:	f000 f90b 	bl	8003996 <TIM_ITRx_SetConfig>
      break;
 8003780:	e00c      	b.n	800379c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681a      	ldr	r2, [r3, #0]
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4619      	mov	r1, r3
 800378c:	4610      	mov	r0, r2
 800378e:	f000 f902 	bl	8003996 <TIM_ITRx_SetConfig>
      break;
 8003792:	e003      	b.n	800379c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003794:	2301      	movs	r3, #1
 8003796:	73fb      	strb	r3, [r7, #15]
      break;
 8003798:	e000      	b.n	800379c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800379a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2201      	movs	r2, #1
 80037a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2200      	movs	r2, #0
 80037a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80037ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80037ae:	4618      	mov	r0, r3
 80037b0:	3710      	adds	r7, #16
 80037b2:	46bd      	mov	sp, r7
 80037b4:	bd80      	pop	{r7, pc}

080037b6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80037b6:	b480      	push	{r7}
 80037b8:	b083      	sub	sp, #12
 80037ba:	af00      	add	r7, sp, #0
 80037bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80037be:	bf00      	nop
 80037c0:	370c      	adds	r7, #12
 80037c2:	46bd      	mov	sp, r7
 80037c4:	bc80      	pop	{r7}
 80037c6:	4770      	bx	lr

080037c8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80037c8:	b480      	push	{r7}
 80037ca:	b083      	sub	sp, #12
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80037d0:	bf00      	nop
 80037d2:	370c      	adds	r7, #12
 80037d4:	46bd      	mov	sp, r7
 80037d6:	bc80      	pop	{r7}
 80037d8:	4770      	bx	lr

080037da <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80037da:	b480      	push	{r7}
 80037dc:	b083      	sub	sp, #12
 80037de:	af00      	add	r7, sp, #0
 80037e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80037e2:	bf00      	nop
 80037e4:	370c      	adds	r7, #12
 80037e6:	46bd      	mov	sp, r7
 80037e8:	bc80      	pop	{r7}
 80037ea:	4770      	bx	lr

080037ec <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80037ec:	b480      	push	{r7}
 80037ee:	b083      	sub	sp, #12
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80037f4:	bf00      	nop
 80037f6:	370c      	adds	r7, #12
 80037f8:	46bd      	mov	sp, r7
 80037fa:	bc80      	pop	{r7}
 80037fc:	4770      	bx	lr
	...

08003800 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003800:	b480      	push	{r7}
 8003802:	b085      	sub	sp, #20
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
 8003808:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	4a2f      	ldr	r2, [pc, #188]	@ (80038d0 <TIM_Base_SetConfig+0xd0>)
 8003814:	4293      	cmp	r3, r2
 8003816:	d00b      	beq.n	8003830 <TIM_Base_SetConfig+0x30>
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800381e:	d007      	beq.n	8003830 <TIM_Base_SetConfig+0x30>
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	4a2c      	ldr	r2, [pc, #176]	@ (80038d4 <TIM_Base_SetConfig+0xd4>)
 8003824:	4293      	cmp	r3, r2
 8003826:	d003      	beq.n	8003830 <TIM_Base_SetConfig+0x30>
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	4a2b      	ldr	r2, [pc, #172]	@ (80038d8 <TIM_Base_SetConfig+0xd8>)
 800382c:	4293      	cmp	r3, r2
 800382e:	d108      	bne.n	8003842 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003836:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	68fa      	ldr	r2, [r7, #12]
 800383e:	4313      	orrs	r3, r2
 8003840:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	4a22      	ldr	r2, [pc, #136]	@ (80038d0 <TIM_Base_SetConfig+0xd0>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d00b      	beq.n	8003862 <TIM_Base_SetConfig+0x62>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003850:	d007      	beq.n	8003862 <TIM_Base_SetConfig+0x62>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	4a1f      	ldr	r2, [pc, #124]	@ (80038d4 <TIM_Base_SetConfig+0xd4>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d003      	beq.n	8003862 <TIM_Base_SetConfig+0x62>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	4a1e      	ldr	r2, [pc, #120]	@ (80038d8 <TIM_Base_SetConfig+0xd8>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d108      	bne.n	8003874 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003868:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	68db      	ldr	r3, [r3, #12]
 800386e:	68fa      	ldr	r2, [r7, #12]
 8003870:	4313      	orrs	r3, r2
 8003872:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	695b      	ldr	r3, [r3, #20]
 800387e:	4313      	orrs	r3, r2
 8003880:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	68fa      	ldr	r2, [r7, #12]
 8003886:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	689a      	ldr	r2, [r3, #8]
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	681a      	ldr	r2, [r3, #0]
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	4a0d      	ldr	r2, [pc, #52]	@ (80038d0 <TIM_Base_SetConfig+0xd0>)
 800389c:	4293      	cmp	r3, r2
 800389e:	d103      	bne.n	80038a8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	691a      	ldr	r2, [r3, #16]
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2201      	movs	r2, #1
 80038ac:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	691b      	ldr	r3, [r3, #16]
 80038b2:	f003 0301 	and.w	r3, r3, #1
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d005      	beq.n	80038c6 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	691b      	ldr	r3, [r3, #16]
 80038be:	f023 0201 	bic.w	r2, r3, #1
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	611a      	str	r2, [r3, #16]
  }
}
 80038c6:	bf00      	nop
 80038c8:	3714      	adds	r7, #20
 80038ca:	46bd      	mov	sp, r7
 80038cc:	bc80      	pop	{r7}
 80038ce:	4770      	bx	lr
 80038d0:	40012c00 	.word	0x40012c00
 80038d4:	40000400 	.word	0x40000400
 80038d8:	40000800 	.word	0x40000800

080038dc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80038dc:	b480      	push	{r7}
 80038de:	b087      	sub	sp, #28
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	60f8      	str	r0, [r7, #12]
 80038e4:	60b9      	str	r1, [r7, #8]
 80038e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	6a1b      	ldr	r3, [r3, #32]
 80038ec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	6a1b      	ldr	r3, [r3, #32]
 80038f2:	f023 0201 	bic.w	r2, r3, #1
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	699b      	ldr	r3, [r3, #24]
 80038fe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003900:	693b      	ldr	r3, [r7, #16]
 8003902:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003906:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	011b      	lsls	r3, r3, #4
 800390c:	693a      	ldr	r2, [r7, #16]
 800390e:	4313      	orrs	r3, r2
 8003910:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003912:	697b      	ldr	r3, [r7, #20]
 8003914:	f023 030a 	bic.w	r3, r3, #10
 8003918:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800391a:	697a      	ldr	r2, [r7, #20]
 800391c:	68bb      	ldr	r3, [r7, #8]
 800391e:	4313      	orrs	r3, r2
 8003920:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	693a      	ldr	r2, [r7, #16]
 8003926:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	697a      	ldr	r2, [r7, #20]
 800392c:	621a      	str	r2, [r3, #32]
}
 800392e:	bf00      	nop
 8003930:	371c      	adds	r7, #28
 8003932:	46bd      	mov	sp, r7
 8003934:	bc80      	pop	{r7}
 8003936:	4770      	bx	lr

08003938 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003938:	b480      	push	{r7}
 800393a:	b087      	sub	sp, #28
 800393c:	af00      	add	r7, sp, #0
 800393e:	60f8      	str	r0, [r7, #12]
 8003940:	60b9      	str	r1, [r7, #8]
 8003942:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	6a1b      	ldr	r3, [r3, #32]
 8003948:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	6a1b      	ldr	r3, [r3, #32]
 800394e:	f023 0210 	bic.w	r2, r3, #16
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	699b      	ldr	r3, [r3, #24]
 800395a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800395c:	693b      	ldr	r3, [r7, #16]
 800395e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003962:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	031b      	lsls	r3, r3, #12
 8003968:	693a      	ldr	r2, [r7, #16]
 800396a:	4313      	orrs	r3, r2
 800396c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800396e:	697b      	ldr	r3, [r7, #20]
 8003970:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003974:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003976:	68bb      	ldr	r3, [r7, #8]
 8003978:	011b      	lsls	r3, r3, #4
 800397a:	697a      	ldr	r2, [r7, #20]
 800397c:	4313      	orrs	r3, r2
 800397e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	693a      	ldr	r2, [r7, #16]
 8003984:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	697a      	ldr	r2, [r7, #20]
 800398a:	621a      	str	r2, [r3, #32]
}
 800398c:	bf00      	nop
 800398e:	371c      	adds	r7, #28
 8003990:	46bd      	mov	sp, r7
 8003992:	bc80      	pop	{r7}
 8003994:	4770      	bx	lr

08003996 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003996:	b480      	push	{r7}
 8003998:	b085      	sub	sp, #20
 800399a:	af00      	add	r7, sp, #0
 800399c:	6078      	str	r0, [r7, #4]
 800399e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	689b      	ldr	r3, [r3, #8]
 80039a4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80039ac:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80039ae:	683a      	ldr	r2, [r7, #0]
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	4313      	orrs	r3, r2
 80039b4:	f043 0307 	orr.w	r3, r3, #7
 80039b8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	68fa      	ldr	r2, [r7, #12]
 80039be:	609a      	str	r2, [r3, #8]
}
 80039c0:	bf00      	nop
 80039c2:	3714      	adds	r7, #20
 80039c4:	46bd      	mov	sp, r7
 80039c6:	bc80      	pop	{r7}
 80039c8:	4770      	bx	lr

080039ca <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80039ca:	b480      	push	{r7}
 80039cc:	b087      	sub	sp, #28
 80039ce:	af00      	add	r7, sp, #0
 80039d0:	60f8      	str	r0, [r7, #12]
 80039d2:	60b9      	str	r1, [r7, #8]
 80039d4:	607a      	str	r2, [r7, #4]
 80039d6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	689b      	ldr	r3, [r3, #8]
 80039dc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80039de:	697b      	ldr	r3, [r7, #20]
 80039e0:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80039e4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	021a      	lsls	r2, r3, #8
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	431a      	orrs	r2, r3
 80039ee:	68bb      	ldr	r3, [r7, #8]
 80039f0:	4313      	orrs	r3, r2
 80039f2:	697a      	ldr	r2, [r7, #20]
 80039f4:	4313      	orrs	r3, r2
 80039f6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	697a      	ldr	r2, [r7, #20]
 80039fc:	609a      	str	r2, [r3, #8]
}
 80039fe:	bf00      	nop
 8003a00:	371c      	adds	r7, #28
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bc80      	pop	{r7}
 8003a06:	4770      	bx	lr

08003a08 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003a08:	b480      	push	{r7}
 8003a0a:	b085      	sub	sp, #20
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
 8003a10:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003a18:	2b01      	cmp	r3, #1
 8003a1a:	d101      	bne.n	8003a20 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003a1c:	2302      	movs	r3, #2
 8003a1e:	e046      	b.n	8003aae <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2201      	movs	r2, #1
 8003a24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2202      	movs	r2, #2
 8003a2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	685b      	ldr	r3, [r3, #4]
 8003a36:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	689b      	ldr	r3, [r3, #8]
 8003a3e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a46:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	68fa      	ldr	r2, [r7, #12]
 8003a4e:	4313      	orrs	r3, r2
 8003a50:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	68fa      	ldr	r2, [r7, #12]
 8003a58:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4a16      	ldr	r2, [pc, #88]	@ (8003ab8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d00e      	beq.n	8003a82 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a6c:	d009      	beq.n	8003a82 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4a12      	ldr	r2, [pc, #72]	@ (8003abc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d004      	beq.n	8003a82 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4a10      	ldr	r2, [pc, #64]	@ (8003ac0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d10c      	bne.n	8003a9c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003a82:	68bb      	ldr	r3, [r7, #8]
 8003a84:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003a88:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	685b      	ldr	r3, [r3, #4]
 8003a8e:	68ba      	ldr	r2, [r7, #8]
 8003a90:	4313      	orrs	r3, r2
 8003a92:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	68ba      	ldr	r2, [r7, #8]
 8003a9a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2201      	movs	r2, #1
 8003aa0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003aac:	2300      	movs	r3, #0
}
 8003aae:	4618      	mov	r0, r3
 8003ab0:	3714      	adds	r7, #20
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bc80      	pop	{r7}
 8003ab6:	4770      	bx	lr
 8003ab8:	40012c00 	.word	0x40012c00
 8003abc:	40000400 	.word	0x40000400
 8003ac0:	40000800 	.word	0x40000800

08003ac4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003ac4:	b480      	push	{r7}
 8003ac6:	b083      	sub	sp, #12
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003acc:	bf00      	nop
 8003ace:	370c      	adds	r7, #12
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	bc80      	pop	{r7}
 8003ad4:	4770      	bx	lr

08003ad6 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003ad6:	b480      	push	{r7}
 8003ad8:	b083      	sub	sp, #12
 8003ada:	af00      	add	r7, sp, #0
 8003adc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003ade:	bf00      	nop
 8003ae0:	370c      	adds	r7, #12
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bc80      	pop	{r7}
 8003ae6:	4770      	bx	lr

08003ae8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b082      	sub	sp, #8
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d101      	bne.n	8003afa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003af6:	2301      	movs	r3, #1
 8003af8:	e042      	b.n	8003b80 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003b00:	b2db      	uxtb	r3, r3
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d106      	bne.n	8003b14 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2200      	movs	r2, #0
 8003b0a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003b0e:	6878      	ldr	r0, [r7, #4]
 8003b10:	f7fd ff0a 	bl	8001928 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2224      	movs	r2, #36	@ 0x24
 8003b18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	68da      	ldr	r2, [r3, #12]
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003b2a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003b2c:	6878      	ldr	r0, [r7, #4]
 8003b2e:	f000 f82b 	bl	8003b88 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	691a      	ldr	r2, [r3, #16]
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003b40:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	695a      	ldr	r2, [r3, #20]
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003b50:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	68da      	ldr	r2, [r3, #12]
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003b60:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2200      	movs	r2, #0
 8003b66:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2220      	movs	r2, #32
 8003b6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2220      	movs	r2, #32
 8003b74:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003b7e:	2300      	movs	r3, #0
}
 8003b80:	4618      	mov	r0, r3
 8003b82:	3708      	adds	r7, #8
 8003b84:	46bd      	mov	sp, r7
 8003b86:	bd80      	pop	{r7, pc}

08003b88 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b084      	sub	sp, #16
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	691b      	ldr	r3, [r3, #16]
 8003b96:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	68da      	ldr	r2, [r3, #12]
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	430a      	orrs	r2, r1
 8003ba4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	689a      	ldr	r2, [r3, #8]
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	691b      	ldr	r3, [r3, #16]
 8003bae:	431a      	orrs	r2, r3
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	695b      	ldr	r3, [r3, #20]
 8003bb4:	4313      	orrs	r3, r2
 8003bb6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	68db      	ldr	r3, [r3, #12]
 8003bbe:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8003bc2:	f023 030c 	bic.w	r3, r3, #12
 8003bc6:	687a      	ldr	r2, [r7, #4]
 8003bc8:	6812      	ldr	r2, [r2, #0]
 8003bca:	68b9      	ldr	r1, [r7, #8]
 8003bcc:	430b      	orrs	r3, r1
 8003bce:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	695b      	ldr	r3, [r3, #20]
 8003bd6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	699a      	ldr	r2, [r3, #24]
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	430a      	orrs	r2, r1
 8003be4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4a2c      	ldr	r2, [pc, #176]	@ (8003c9c <UART_SetConfig+0x114>)
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d103      	bne.n	8003bf8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003bf0:	f7ff fb56 	bl	80032a0 <HAL_RCC_GetPCLK2Freq>
 8003bf4:	60f8      	str	r0, [r7, #12]
 8003bf6:	e002      	b.n	8003bfe <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003bf8:	f7ff fb3e 	bl	8003278 <HAL_RCC_GetPCLK1Freq>
 8003bfc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003bfe:	68fa      	ldr	r2, [r7, #12]
 8003c00:	4613      	mov	r3, r2
 8003c02:	009b      	lsls	r3, r3, #2
 8003c04:	4413      	add	r3, r2
 8003c06:	009a      	lsls	r2, r3, #2
 8003c08:	441a      	add	r2, r3
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	685b      	ldr	r3, [r3, #4]
 8003c0e:	009b      	lsls	r3, r3, #2
 8003c10:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c14:	4a22      	ldr	r2, [pc, #136]	@ (8003ca0 <UART_SetConfig+0x118>)
 8003c16:	fba2 2303 	umull	r2, r3, r2, r3
 8003c1a:	095b      	lsrs	r3, r3, #5
 8003c1c:	0119      	lsls	r1, r3, #4
 8003c1e:	68fa      	ldr	r2, [r7, #12]
 8003c20:	4613      	mov	r3, r2
 8003c22:	009b      	lsls	r3, r3, #2
 8003c24:	4413      	add	r3, r2
 8003c26:	009a      	lsls	r2, r3, #2
 8003c28:	441a      	add	r2, r3
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	685b      	ldr	r3, [r3, #4]
 8003c2e:	009b      	lsls	r3, r3, #2
 8003c30:	fbb2 f2f3 	udiv	r2, r2, r3
 8003c34:	4b1a      	ldr	r3, [pc, #104]	@ (8003ca0 <UART_SetConfig+0x118>)
 8003c36:	fba3 0302 	umull	r0, r3, r3, r2
 8003c3a:	095b      	lsrs	r3, r3, #5
 8003c3c:	2064      	movs	r0, #100	@ 0x64
 8003c3e:	fb00 f303 	mul.w	r3, r0, r3
 8003c42:	1ad3      	subs	r3, r2, r3
 8003c44:	011b      	lsls	r3, r3, #4
 8003c46:	3332      	adds	r3, #50	@ 0x32
 8003c48:	4a15      	ldr	r2, [pc, #84]	@ (8003ca0 <UART_SetConfig+0x118>)
 8003c4a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c4e:	095b      	lsrs	r3, r3, #5
 8003c50:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003c54:	4419      	add	r1, r3
 8003c56:	68fa      	ldr	r2, [r7, #12]
 8003c58:	4613      	mov	r3, r2
 8003c5a:	009b      	lsls	r3, r3, #2
 8003c5c:	4413      	add	r3, r2
 8003c5e:	009a      	lsls	r2, r3, #2
 8003c60:	441a      	add	r2, r3
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	685b      	ldr	r3, [r3, #4]
 8003c66:	009b      	lsls	r3, r3, #2
 8003c68:	fbb2 f2f3 	udiv	r2, r2, r3
 8003c6c:	4b0c      	ldr	r3, [pc, #48]	@ (8003ca0 <UART_SetConfig+0x118>)
 8003c6e:	fba3 0302 	umull	r0, r3, r3, r2
 8003c72:	095b      	lsrs	r3, r3, #5
 8003c74:	2064      	movs	r0, #100	@ 0x64
 8003c76:	fb00 f303 	mul.w	r3, r0, r3
 8003c7a:	1ad3      	subs	r3, r2, r3
 8003c7c:	011b      	lsls	r3, r3, #4
 8003c7e:	3332      	adds	r3, #50	@ 0x32
 8003c80:	4a07      	ldr	r2, [pc, #28]	@ (8003ca0 <UART_SetConfig+0x118>)
 8003c82:	fba2 2303 	umull	r2, r3, r2, r3
 8003c86:	095b      	lsrs	r3, r3, #5
 8003c88:	f003 020f 	and.w	r2, r3, #15
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	440a      	add	r2, r1
 8003c92:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003c94:	bf00      	nop
 8003c96:	3710      	adds	r7, #16
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	bd80      	pop	{r7, pc}
 8003c9c:	40013800 	.word	0x40013800
 8003ca0:	51eb851f 	.word	0x51eb851f

08003ca4 <sniprintf>:
 8003ca4:	b40c      	push	{r2, r3}
 8003ca6:	b530      	push	{r4, r5, lr}
 8003ca8:	4b17      	ldr	r3, [pc, #92]	@ (8003d08 <sniprintf+0x64>)
 8003caa:	1e0c      	subs	r4, r1, #0
 8003cac:	681d      	ldr	r5, [r3, #0]
 8003cae:	b09d      	sub	sp, #116	@ 0x74
 8003cb0:	da08      	bge.n	8003cc4 <sniprintf+0x20>
 8003cb2:	238b      	movs	r3, #139	@ 0x8b
 8003cb4:	f04f 30ff 	mov.w	r0, #4294967295
 8003cb8:	602b      	str	r3, [r5, #0]
 8003cba:	b01d      	add	sp, #116	@ 0x74
 8003cbc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003cc0:	b002      	add	sp, #8
 8003cc2:	4770      	bx	lr
 8003cc4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8003cc8:	f8ad 3014 	strh.w	r3, [sp, #20]
 8003ccc:	bf0c      	ite	eq
 8003cce:	4623      	moveq	r3, r4
 8003cd0:	f104 33ff 	addne.w	r3, r4, #4294967295
 8003cd4:	9304      	str	r3, [sp, #16]
 8003cd6:	9307      	str	r3, [sp, #28]
 8003cd8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003cdc:	9002      	str	r0, [sp, #8]
 8003cde:	9006      	str	r0, [sp, #24]
 8003ce0:	f8ad 3016 	strh.w	r3, [sp, #22]
 8003ce4:	4628      	mov	r0, r5
 8003ce6:	ab21      	add	r3, sp, #132	@ 0x84
 8003ce8:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8003cea:	a902      	add	r1, sp, #8
 8003cec:	9301      	str	r3, [sp, #4]
 8003cee:	f000 f993 	bl	8004018 <_svfiprintf_r>
 8003cf2:	1c43      	adds	r3, r0, #1
 8003cf4:	bfbc      	itt	lt
 8003cf6:	238b      	movlt	r3, #139	@ 0x8b
 8003cf8:	602b      	strlt	r3, [r5, #0]
 8003cfa:	2c00      	cmp	r4, #0
 8003cfc:	d0dd      	beq.n	8003cba <sniprintf+0x16>
 8003cfe:	2200      	movs	r2, #0
 8003d00:	9b02      	ldr	r3, [sp, #8]
 8003d02:	701a      	strb	r2, [r3, #0]
 8003d04:	e7d9      	b.n	8003cba <sniprintf+0x16>
 8003d06:	bf00      	nop
 8003d08:	20000094 	.word	0x20000094

08003d0c <memset>:
 8003d0c:	4603      	mov	r3, r0
 8003d0e:	4402      	add	r2, r0
 8003d10:	4293      	cmp	r3, r2
 8003d12:	d100      	bne.n	8003d16 <memset+0xa>
 8003d14:	4770      	bx	lr
 8003d16:	f803 1b01 	strb.w	r1, [r3], #1
 8003d1a:	e7f9      	b.n	8003d10 <memset+0x4>

08003d1c <__errno>:
 8003d1c:	4b01      	ldr	r3, [pc, #4]	@ (8003d24 <__errno+0x8>)
 8003d1e:	6818      	ldr	r0, [r3, #0]
 8003d20:	4770      	bx	lr
 8003d22:	bf00      	nop
 8003d24:	20000094 	.word	0x20000094

08003d28 <__libc_init_array>:
 8003d28:	b570      	push	{r4, r5, r6, lr}
 8003d2a:	2600      	movs	r6, #0
 8003d2c:	4d0c      	ldr	r5, [pc, #48]	@ (8003d60 <__libc_init_array+0x38>)
 8003d2e:	4c0d      	ldr	r4, [pc, #52]	@ (8003d64 <__libc_init_array+0x3c>)
 8003d30:	1b64      	subs	r4, r4, r5
 8003d32:	10a4      	asrs	r4, r4, #2
 8003d34:	42a6      	cmp	r6, r4
 8003d36:	d109      	bne.n	8003d4c <__libc_init_array+0x24>
 8003d38:	f000 fc78 	bl	800462c <_init>
 8003d3c:	2600      	movs	r6, #0
 8003d3e:	4d0a      	ldr	r5, [pc, #40]	@ (8003d68 <__libc_init_array+0x40>)
 8003d40:	4c0a      	ldr	r4, [pc, #40]	@ (8003d6c <__libc_init_array+0x44>)
 8003d42:	1b64      	subs	r4, r4, r5
 8003d44:	10a4      	asrs	r4, r4, #2
 8003d46:	42a6      	cmp	r6, r4
 8003d48:	d105      	bne.n	8003d56 <__libc_init_array+0x2e>
 8003d4a:	bd70      	pop	{r4, r5, r6, pc}
 8003d4c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d50:	4798      	blx	r3
 8003d52:	3601      	adds	r6, #1
 8003d54:	e7ee      	b.n	8003d34 <__libc_init_array+0xc>
 8003d56:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d5a:	4798      	blx	r3
 8003d5c:	3601      	adds	r6, #1
 8003d5e:	e7f2      	b.n	8003d46 <__libc_init_array+0x1e>
 8003d60:	080046ac 	.word	0x080046ac
 8003d64:	080046ac 	.word	0x080046ac
 8003d68:	080046ac 	.word	0x080046ac
 8003d6c:	080046b0 	.word	0x080046b0

08003d70 <__retarget_lock_acquire_recursive>:
 8003d70:	4770      	bx	lr

08003d72 <__retarget_lock_release_recursive>:
 8003d72:	4770      	bx	lr

08003d74 <_free_r>:
 8003d74:	b538      	push	{r3, r4, r5, lr}
 8003d76:	4605      	mov	r5, r0
 8003d78:	2900      	cmp	r1, #0
 8003d7a:	d040      	beq.n	8003dfe <_free_r+0x8a>
 8003d7c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003d80:	1f0c      	subs	r4, r1, #4
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	bfb8      	it	lt
 8003d86:	18e4      	addlt	r4, r4, r3
 8003d88:	f000 f8de 	bl	8003f48 <__malloc_lock>
 8003d8c:	4a1c      	ldr	r2, [pc, #112]	@ (8003e00 <_free_r+0x8c>)
 8003d8e:	6813      	ldr	r3, [r2, #0]
 8003d90:	b933      	cbnz	r3, 8003da0 <_free_r+0x2c>
 8003d92:	6063      	str	r3, [r4, #4]
 8003d94:	6014      	str	r4, [r2, #0]
 8003d96:	4628      	mov	r0, r5
 8003d98:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003d9c:	f000 b8da 	b.w	8003f54 <__malloc_unlock>
 8003da0:	42a3      	cmp	r3, r4
 8003da2:	d908      	bls.n	8003db6 <_free_r+0x42>
 8003da4:	6820      	ldr	r0, [r4, #0]
 8003da6:	1821      	adds	r1, r4, r0
 8003da8:	428b      	cmp	r3, r1
 8003daa:	bf01      	itttt	eq
 8003dac:	6819      	ldreq	r1, [r3, #0]
 8003dae:	685b      	ldreq	r3, [r3, #4]
 8003db0:	1809      	addeq	r1, r1, r0
 8003db2:	6021      	streq	r1, [r4, #0]
 8003db4:	e7ed      	b.n	8003d92 <_free_r+0x1e>
 8003db6:	461a      	mov	r2, r3
 8003db8:	685b      	ldr	r3, [r3, #4]
 8003dba:	b10b      	cbz	r3, 8003dc0 <_free_r+0x4c>
 8003dbc:	42a3      	cmp	r3, r4
 8003dbe:	d9fa      	bls.n	8003db6 <_free_r+0x42>
 8003dc0:	6811      	ldr	r1, [r2, #0]
 8003dc2:	1850      	adds	r0, r2, r1
 8003dc4:	42a0      	cmp	r0, r4
 8003dc6:	d10b      	bne.n	8003de0 <_free_r+0x6c>
 8003dc8:	6820      	ldr	r0, [r4, #0]
 8003dca:	4401      	add	r1, r0
 8003dcc:	1850      	adds	r0, r2, r1
 8003dce:	4283      	cmp	r3, r0
 8003dd0:	6011      	str	r1, [r2, #0]
 8003dd2:	d1e0      	bne.n	8003d96 <_free_r+0x22>
 8003dd4:	6818      	ldr	r0, [r3, #0]
 8003dd6:	685b      	ldr	r3, [r3, #4]
 8003dd8:	4408      	add	r0, r1
 8003dda:	6010      	str	r0, [r2, #0]
 8003ddc:	6053      	str	r3, [r2, #4]
 8003dde:	e7da      	b.n	8003d96 <_free_r+0x22>
 8003de0:	d902      	bls.n	8003de8 <_free_r+0x74>
 8003de2:	230c      	movs	r3, #12
 8003de4:	602b      	str	r3, [r5, #0]
 8003de6:	e7d6      	b.n	8003d96 <_free_r+0x22>
 8003de8:	6820      	ldr	r0, [r4, #0]
 8003dea:	1821      	adds	r1, r4, r0
 8003dec:	428b      	cmp	r3, r1
 8003dee:	bf01      	itttt	eq
 8003df0:	6819      	ldreq	r1, [r3, #0]
 8003df2:	685b      	ldreq	r3, [r3, #4]
 8003df4:	1809      	addeq	r1, r1, r0
 8003df6:	6021      	streq	r1, [r4, #0]
 8003df8:	6063      	str	r3, [r4, #4]
 8003dfa:	6054      	str	r4, [r2, #4]
 8003dfc:	e7cb      	b.n	8003d96 <_free_r+0x22>
 8003dfe:	bd38      	pop	{r3, r4, r5, pc}
 8003e00:	200003a4 	.word	0x200003a4

08003e04 <sbrk_aligned>:
 8003e04:	b570      	push	{r4, r5, r6, lr}
 8003e06:	4e0f      	ldr	r6, [pc, #60]	@ (8003e44 <sbrk_aligned+0x40>)
 8003e08:	460c      	mov	r4, r1
 8003e0a:	6831      	ldr	r1, [r6, #0]
 8003e0c:	4605      	mov	r5, r0
 8003e0e:	b911      	cbnz	r1, 8003e16 <sbrk_aligned+0x12>
 8003e10:	f000 fbaa 	bl	8004568 <_sbrk_r>
 8003e14:	6030      	str	r0, [r6, #0]
 8003e16:	4621      	mov	r1, r4
 8003e18:	4628      	mov	r0, r5
 8003e1a:	f000 fba5 	bl	8004568 <_sbrk_r>
 8003e1e:	1c43      	adds	r3, r0, #1
 8003e20:	d103      	bne.n	8003e2a <sbrk_aligned+0x26>
 8003e22:	f04f 34ff 	mov.w	r4, #4294967295
 8003e26:	4620      	mov	r0, r4
 8003e28:	bd70      	pop	{r4, r5, r6, pc}
 8003e2a:	1cc4      	adds	r4, r0, #3
 8003e2c:	f024 0403 	bic.w	r4, r4, #3
 8003e30:	42a0      	cmp	r0, r4
 8003e32:	d0f8      	beq.n	8003e26 <sbrk_aligned+0x22>
 8003e34:	1a21      	subs	r1, r4, r0
 8003e36:	4628      	mov	r0, r5
 8003e38:	f000 fb96 	bl	8004568 <_sbrk_r>
 8003e3c:	3001      	adds	r0, #1
 8003e3e:	d1f2      	bne.n	8003e26 <sbrk_aligned+0x22>
 8003e40:	e7ef      	b.n	8003e22 <sbrk_aligned+0x1e>
 8003e42:	bf00      	nop
 8003e44:	200003a0 	.word	0x200003a0

08003e48 <_malloc_r>:
 8003e48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003e4c:	1ccd      	adds	r5, r1, #3
 8003e4e:	f025 0503 	bic.w	r5, r5, #3
 8003e52:	3508      	adds	r5, #8
 8003e54:	2d0c      	cmp	r5, #12
 8003e56:	bf38      	it	cc
 8003e58:	250c      	movcc	r5, #12
 8003e5a:	2d00      	cmp	r5, #0
 8003e5c:	4606      	mov	r6, r0
 8003e5e:	db01      	blt.n	8003e64 <_malloc_r+0x1c>
 8003e60:	42a9      	cmp	r1, r5
 8003e62:	d904      	bls.n	8003e6e <_malloc_r+0x26>
 8003e64:	230c      	movs	r3, #12
 8003e66:	6033      	str	r3, [r6, #0]
 8003e68:	2000      	movs	r0, #0
 8003e6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003e6e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003f44 <_malloc_r+0xfc>
 8003e72:	f000 f869 	bl	8003f48 <__malloc_lock>
 8003e76:	f8d8 3000 	ldr.w	r3, [r8]
 8003e7a:	461c      	mov	r4, r3
 8003e7c:	bb44      	cbnz	r4, 8003ed0 <_malloc_r+0x88>
 8003e7e:	4629      	mov	r1, r5
 8003e80:	4630      	mov	r0, r6
 8003e82:	f7ff ffbf 	bl	8003e04 <sbrk_aligned>
 8003e86:	1c43      	adds	r3, r0, #1
 8003e88:	4604      	mov	r4, r0
 8003e8a:	d158      	bne.n	8003f3e <_malloc_r+0xf6>
 8003e8c:	f8d8 4000 	ldr.w	r4, [r8]
 8003e90:	4627      	mov	r7, r4
 8003e92:	2f00      	cmp	r7, #0
 8003e94:	d143      	bne.n	8003f1e <_malloc_r+0xd6>
 8003e96:	2c00      	cmp	r4, #0
 8003e98:	d04b      	beq.n	8003f32 <_malloc_r+0xea>
 8003e9a:	6823      	ldr	r3, [r4, #0]
 8003e9c:	4639      	mov	r1, r7
 8003e9e:	4630      	mov	r0, r6
 8003ea0:	eb04 0903 	add.w	r9, r4, r3
 8003ea4:	f000 fb60 	bl	8004568 <_sbrk_r>
 8003ea8:	4581      	cmp	r9, r0
 8003eaa:	d142      	bne.n	8003f32 <_malloc_r+0xea>
 8003eac:	6821      	ldr	r1, [r4, #0]
 8003eae:	4630      	mov	r0, r6
 8003eb0:	1a6d      	subs	r5, r5, r1
 8003eb2:	4629      	mov	r1, r5
 8003eb4:	f7ff ffa6 	bl	8003e04 <sbrk_aligned>
 8003eb8:	3001      	adds	r0, #1
 8003eba:	d03a      	beq.n	8003f32 <_malloc_r+0xea>
 8003ebc:	6823      	ldr	r3, [r4, #0]
 8003ebe:	442b      	add	r3, r5
 8003ec0:	6023      	str	r3, [r4, #0]
 8003ec2:	f8d8 3000 	ldr.w	r3, [r8]
 8003ec6:	685a      	ldr	r2, [r3, #4]
 8003ec8:	bb62      	cbnz	r2, 8003f24 <_malloc_r+0xdc>
 8003eca:	f8c8 7000 	str.w	r7, [r8]
 8003ece:	e00f      	b.n	8003ef0 <_malloc_r+0xa8>
 8003ed0:	6822      	ldr	r2, [r4, #0]
 8003ed2:	1b52      	subs	r2, r2, r5
 8003ed4:	d420      	bmi.n	8003f18 <_malloc_r+0xd0>
 8003ed6:	2a0b      	cmp	r2, #11
 8003ed8:	d917      	bls.n	8003f0a <_malloc_r+0xc2>
 8003eda:	1961      	adds	r1, r4, r5
 8003edc:	42a3      	cmp	r3, r4
 8003ede:	6025      	str	r5, [r4, #0]
 8003ee0:	bf18      	it	ne
 8003ee2:	6059      	strne	r1, [r3, #4]
 8003ee4:	6863      	ldr	r3, [r4, #4]
 8003ee6:	bf08      	it	eq
 8003ee8:	f8c8 1000 	streq.w	r1, [r8]
 8003eec:	5162      	str	r2, [r4, r5]
 8003eee:	604b      	str	r3, [r1, #4]
 8003ef0:	4630      	mov	r0, r6
 8003ef2:	f000 f82f 	bl	8003f54 <__malloc_unlock>
 8003ef6:	f104 000b 	add.w	r0, r4, #11
 8003efa:	1d23      	adds	r3, r4, #4
 8003efc:	f020 0007 	bic.w	r0, r0, #7
 8003f00:	1ac2      	subs	r2, r0, r3
 8003f02:	bf1c      	itt	ne
 8003f04:	1a1b      	subne	r3, r3, r0
 8003f06:	50a3      	strne	r3, [r4, r2]
 8003f08:	e7af      	b.n	8003e6a <_malloc_r+0x22>
 8003f0a:	6862      	ldr	r2, [r4, #4]
 8003f0c:	42a3      	cmp	r3, r4
 8003f0e:	bf0c      	ite	eq
 8003f10:	f8c8 2000 	streq.w	r2, [r8]
 8003f14:	605a      	strne	r2, [r3, #4]
 8003f16:	e7eb      	b.n	8003ef0 <_malloc_r+0xa8>
 8003f18:	4623      	mov	r3, r4
 8003f1a:	6864      	ldr	r4, [r4, #4]
 8003f1c:	e7ae      	b.n	8003e7c <_malloc_r+0x34>
 8003f1e:	463c      	mov	r4, r7
 8003f20:	687f      	ldr	r7, [r7, #4]
 8003f22:	e7b6      	b.n	8003e92 <_malloc_r+0x4a>
 8003f24:	461a      	mov	r2, r3
 8003f26:	685b      	ldr	r3, [r3, #4]
 8003f28:	42a3      	cmp	r3, r4
 8003f2a:	d1fb      	bne.n	8003f24 <_malloc_r+0xdc>
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	6053      	str	r3, [r2, #4]
 8003f30:	e7de      	b.n	8003ef0 <_malloc_r+0xa8>
 8003f32:	230c      	movs	r3, #12
 8003f34:	4630      	mov	r0, r6
 8003f36:	6033      	str	r3, [r6, #0]
 8003f38:	f000 f80c 	bl	8003f54 <__malloc_unlock>
 8003f3c:	e794      	b.n	8003e68 <_malloc_r+0x20>
 8003f3e:	6005      	str	r5, [r0, #0]
 8003f40:	e7d6      	b.n	8003ef0 <_malloc_r+0xa8>
 8003f42:	bf00      	nop
 8003f44:	200003a4 	.word	0x200003a4

08003f48 <__malloc_lock>:
 8003f48:	4801      	ldr	r0, [pc, #4]	@ (8003f50 <__malloc_lock+0x8>)
 8003f4a:	f7ff bf11 	b.w	8003d70 <__retarget_lock_acquire_recursive>
 8003f4e:	bf00      	nop
 8003f50:	2000039c 	.word	0x2000039c

08003f54 <__malloc_unlock>:
 8003f54:	4801      	ldr	r0, [pc, #4]	@ (8003f5c <__malloc_unlock+0x8>)
 8003f56:	f7ff bf0c 	b.w	8003d72 <__retarget_lock_release_recursive>
 8003f5a:	bf00      	nop
 8003f5c:	2000039c 	.word	0x2000039c

08003f60 <__ssputs_r>:
 8003f60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f64:	461f      	mov	r7, r3
 8003f66:	688e      	ldr	r6, [r1, #8]
 8003f68:	4682      	mov	sl, r0
 8003f6a:	42be      	cmp	r6, r7
 8003f6c:	460c      	mov	r4, r1
 8003f6e:	4690      	mov	r8, r2
 8003f70:	680b      	ldr	r3, [r1, #0]
 8003f72:	d82d      	bhi.n	8003fd0 <__ssputs_r+0x70>
 8003f74:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003f78:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003f7c:	d026      	beq.n	8003fcc <__ssputs_r+0x6c>
 8003f7e:	6965      	ldr	r5, [r4, #20]
 8003f80:	6909      	ldr	r1, [r1, #16]
 8003f82:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003f86:	eba3 0901 	sub.w	r9, r3, r1
 8003f8a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003f8e:	1c7b      	adds	r3, r7, #1
 8003f90:	444b      	add	r3, r9
 8003f92:	106d      	asrs	r5, r5, #1
 8003f94:	429d      	cmp	r5, r3
 8003f96:	bf38      	it	cc
 8003f98:	461d      	movcc	r5, r3
 8003f9a:	0553      	lsls	r3, r2, #21
 8003f9c:	d527      	bpl.n	8003fee <__ssputs_r+0x8e>
 8003f9e:	4629      	mov	r1, r5
 8003fa0:	f7ff ff52 	bl	8003e48 <_malloc_r>
 8003fa4:	4606      	mov	r6, r0
 8003fa6:	b360      	cbz	r0, 8004002 <__ssputs_r+0xa2>
 8003fa8:	464a      	mov	r2, r9
 8003faa:	6921      	ldr	r1, [r4, #16]
 8003fac:	f000 fafa 	bl	80045a4 <memcpy>
 8003fb0:	89a3      	ldrh	r3, [r4, #12]
 8003fb2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8003fb6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003fba:	81a3      	strh	r3, [r4, #12]
 8003fbc:	6126      	str	r6, [r4, #16]
 8003fbe:	444e      	add	r6, r9
 8003fc0:	6026      	str	r6, [r4, #0]
 8003fc2:	463e      	mov	r6, r7
 8003fc4:	6165      	str	r5, [r4, #20]
 8003fc6:	eba5 0509 	sub.w	r5, r5, r9
 8003fca:	60a5      	str	r5, [r4, #8]
 8003fcc:	42be      	cmp	r6, r7
 8003fce:	d900      	bls.n	8003fd2 <__ssputs_r+0x72>
 8003fd0:	463e      	mov	r6, r7
 8003fd2:	4632      	mov	r2, r6
 8003fd4:	4641      	mov	r1, r8
 8003fd6:	6820      	ldr	r0, [r4, #0]
 8003fd8:	f000 faac 	bl	8004534 <memmove>
 8003fdc:	2000      	movs	r0, #0
 8003fde:	68a3      	ldr	r3, [r4, #8]
 8003fe0:	1b9b      	subs	r3, r3, r6
 8003fe2:	60a3      	str	r3, [r4, #8]
 8003fe4:	6823      	ldr	r3, [r4, #0]
 8003fe6:	4433      	add	r3, r6
 8003fe8:	6023      	str	r3, [r4, #0]
 8003fea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003fee:	462a      	mov	r2, r5
 8003ff0:	f000 fae6 	bl	80045c0 <_realloc_r>
 8003ff4:	4606      	mov	r6, r0
 8003ff6:	2800      	cmp	r0, #0
 8003ff8:	d1e0      	bne.n	8003fbc <__ssputs_r+0x5c>
 8003ffa:	4650      	mov	r0, sl
 8003ffc:	6921      	ldr	r1, [r4, #16]
 8003ffe:	f7ff feb9 	bl	8003d74 <_free_r>
 8004002:	230c      	movs	r3, #12
 8004004:	f8ca 3000 	str.w	r3, [sl]
 8004008:	89a3      	ldrh	r3, [r4, #12]
 800400a:	f04f 30ff 	mov.w	r0, #4294967295
 800400e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004012:	81a3      	strh	r3, [r4, #12]
 8004014:	e7e9      	b.n	8003fea <__ssputs_r+0x8a>
	...

08004018 <_svfiprintf_r>:
 8004018:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800401c:	4698      	mov	r8, r3
 800401e:	898b      	ldrh	r3, [r1, #12]
 8004020:	4607      	mov	r7, r0
 8004022:	061b      	lsls	r3, r3, #24
 8004024:	460d      	mov	r5, r1
 8004026:	4614      	mov	r4, r2
 8004028:	b09d      	sub	sp, #116	@ 0x74
 800402a:	d510      	bpl.n	800404e <_svfiprintf_r+0x36>
 800402c:	690b      	ldr	r3, [r1, #16]
 800402e:	b973      	cbnz	r3, 800404e <_svfiprintf_r+0x36>
 8004030:	2140      	movs	r1, #64	@ 0x40
 8004032:	f7ff ff09 	bl	8003e48 <_malloc_r>
 8004036:	6028      	str	r0, [r5, #0]
 8004038:	6128      	str	r0, [r5, #16]
 800403a:	b930      	cbnz	r0, 800404a <_svfiprintf_r+0x32>
 800403c:	230c      	movs	r3, #12
 800403e:	603b      	str	r3, [r7, #0]
 8004040:	f04f 30ff 	mov.w	r0, #4294967295
 8004044:	b01d      	add	sp, #116	@ 0x74
 8004046:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800404a:	2340      	movs	r3, #64	@ 0x40
 800404c:	616b      	str	r3, [r5, #20]
 800404e:	2300      	movs	r3, #0
 8004050:	9309      	str	r3, [sp, #36]	@ 0x24
 8004052:	2320      	movs	r3, #32
 8004054:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004058:	2330      	movs	r3, #48	@ 0x30
 800405a:	f04f 0901 	mov.w	r9, #1
 800405e:	f8cd 800c 	str.w	r8, [sp, #12]
 8004062:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 80041fc <_svfiprintf_r+0x1e4>
 8004066:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800406a:	4623      	mov	r3, r4
 800406c:	469a      	mov	sl, r3
 800406e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004072:	b10a      	cbz	r2, 8004078 <_svfiprintf_r+0x60>
 8004074:	2a25      	cmp	r2, #37	@ 0x25
 8004076:	d1f9      	bne.n	800406c <_svfiprintf_r+0x54>
 8004078:	ebba 0b04 	subs.w	fp, sl, r4
 800407c:	d00b      	beq.n	8004096 <_svfiprintf_r+0x7e>
 800407e:	465b      	mov	r3, fp
 8004080:	4622      	mov	r2, r4
 8004082:	4629      	mov	r1, r5
 8004084:	4638      	mov	r0, r7
 8004086:	f7ff ff6b 	bl	8003f60 <__ssputs_r>
 800408a:	3001      	adds	r0, #1
 800408c:	f000 80a7 	beq.w	80041de <_svfiprintf_r+0x1c6>
 8004090:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004092:	445a      	add	r2, fp
 8004094:	9209      	str	r2, [sp, #36]	@ 0x24
 8004096:	f89a 3000 	ldrb.w	r3, [sl]
 800409a:	2b00      	cmp	r3, #0
 800409c:	f000 809f 	beq.w	80041de <_svfiprintf_r+0x1c6>
 80040a0:	2300      	movs	r3, #0
 80040a2:	f04f 32ff 	mov.w	r2, #4294967295
 80040a6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80040aa:	f10a 0a01 	add.w	sl, sl, #1
 80040ae:	9304      	str	r3, [sp, #16]
 80040b0:	9307      	str	r3, [sp, #28]
 80040b2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80040b6:	931a      	str	r3, [sp, #104]	@ 0x68
 80040b8:	4654      	mov	r4, sl
 80040ba:	2205      	movs	r2, #5
 80040bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80040c0:	484e      	ldr	r0, [pc, #312]	@ (80041fc <_svfiprintf_r+0x1e4>)
 80040c2:	f000 fa61 	bl	8004588 <memchr>
 80040c6:	9a04      	ldr	r2, [sp, #16]
 80040c8:	b9d8      	cbnz	r0, 8004102 <_svfiprintf_r+0xea>
 80040ca:	06d0      	lsls	r0, r2, #27
 80040cc:	bf44      	itt	mi
 80040ce:	2320      	movmi	r3, #32
 80040d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80040d4:	0711      	lsls	r1, r2, #28
 80040d6:	bf44      	itt	mi
 80040d8:	232b      	movmi	r3, #43	@ 0x2b
 80040da:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80040de:	f89a 3000 	ldrb.w	r3, [sl]
 80040e2:	2b2a      	cmp	r3, #42	@ 0x2a
 80040e4:	d015      	beq.n	8004112 <_svfiprintf_r+0xfa>
 80040e6:	4654      	mov	r4, sl
 80040e8:	2000      	movs	r0, #0
 80040ea:	f04f 0c0a 	mov.w	ip, #10
 80040ee:	9a07      	ldr	r2, [sp, #28]
 80040f0:	4621      	mov	r1, r4
 80040f2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80040f6:	3b30      	subs	r3, #48	@ 0x30
 80040f8:	2b09      	cmp	r3, #9
 80040fa:	d94b      	bls.n	8004194 <_svfiprintf_r+0x17c>
 80040fc:	b1b0      	cbz	r0, 800412c <_svfiprintf_r+0x114>
 80040fe:	9207      	str	r2, [sp, #28]
 8004100:	e014      	b.n	800412c <_svfiprintf_r+0x114>
 8004102:	eba0 0308 	sub.w	r3, r0, r8
 8004106:	fa09 f303 	lsl.w	r3, r9, r3
 800410a:	4313      	orrs	r3, r2
 800410c:	46a2      	mov	sl, r4
 800410e:	9304      	str	r3, [sp, #16]
 8004110:	e7d2      	b.n	80040b8 <_svfiprintf_r+0xa0>
 8004112:	9b03      	ldr	r3, [sp, #12]
 8004114:	1d19      	adds	r1, r3, #4
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	9103      	str	r1, [sp, #12]
 800411a:	2b00      	cmp	r3, #0
 800411c:	bfbb      	ittet	lt
 800411e:	425b      	neglt	r3, r3
 8004120:	f042 0202 	orrlt.w	r2, r2, #2
 8004124:	9307      	strge	r3, [sp, #28]
 8004126:	9307      	strlt	r3, [sp, #28]
 8004128:	bfb8      	it	lt
 800412a:	9204      	strlt	r2, [sp, #16]
 800412c:	7823      	ldrb	r3, [r4, #0]
 800412e:	2b2e      	cmp	r3, #46	@ 0x2e
 8004130:	d10a      	bne.n	8004148 <_svfiprintf_r+0x130>
 8004132:	7863      	ldrb	r3, [r4, #1]
 8004134:	2b2a      	cmp	r3, #42	@ 0x2a
 8004136:	d132      	bne.n	800419e <_svfiprintf_r+0x186>
 8004138:	9b03      	ldr	r3, [sp, #12]
 800413a:	3402      	adds	r4, #2
 800413c:	1d1a      	adds	r2, r3, #4
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	9203      	str	r2, [sp, #12]
 8004142:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004146:	9305      	str	r3, [sp, #20]
 8004148:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8004200 <_svfiprintf_r+0x1e8>
 800414c:	2203      	movs	r2, #3
 800414e:	4650      	mov	r0, sl
 8004150:	7821      	ldrb	r1, [r4, #0]
 8004152:	f000 fa19 	bl	8004588 <memchr>
 8004156:	b138      	cbz	r0, 8004168 <_svfiprintf_r+0x150>
 8004158:	2240      	movs	r2, #64	@ 0x40
 800415a:	9b04      	ldr	r3, [sp, #16]
 800415c:	eba0 000a 	sub.w	r0, r0, sl
 8004160:	4082      	lsls	r2, r0
 8004162:	4313      	orrs	r3, r2
 8004164:	3401      	adds	r4, #1
 8004166:	9304      	str	r3, [sp, #16]
 8004168:	f814 1b01 	ldrb.w	r1, [r4], #1
 800416c:	2206      	movs	r2, #6
 800416e:	4825      	ldr	r0, [pc, #148]	@ (8004204 <_svfiprintf_r+0x1ec>)
 8004170:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004174:	f000 fa08 	bl	8004588 <memchr>
 8004178:	2800      	cmp	r0, #0
 800417a:	d036      	beq.n	80041ea <_svfiprintf_r+0x1d2>
 800417c:	4b22      	ldr	r3, [pc, #136]	@ (8004208 <_svfiprintf_r+0x1f0>)
 800417e:	bb1b      	cbnz	r3, 80041c8 <_svfiprintf_r+0x1b0>
 8004180:	9b03      	ldr	r3, [sp, #12]
 8004182:	3307      	adds	r3, #7
 8004184:	f023 0307 	bic.w	r3, r3, #7
 8004188:	3308      	adds	r3, #8
 800418a:	9303      	str	r3, [sp, #12]
 800418c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800418e:	4433      	add	r3, r6
 8004190:	9309      	str	r3, [sp, #36]	@ 0x24
 8004192:	e76a      	b.n	800406a <_svfiprintf_r+0x52>
 8004194:	460c      	mov	r4, r1
 8004196:	2001      	movs	r0, #1
 8004198:	fb0c 3202 	mla	r2, ip, r2, r3
 800419c:	e7a8      	b.n	80040f0 <_svfiprintf_r+0xd8>
 800419e:	2300      	movs	r3, #0
 80041a0:	f04f 0c0a 	mov.w	ip, #10
 80041a4:	4619      	mov	r1, r3
 80041a6:	3401      	adds	r4, #1
 80041a8:	9305      	str	r3, [sp, #20]
 80041aa:	4620      	mov	r0, r4
 80041ac:	f810 2b01 	ldrb.w	r2, [r0], #1
 80041b0:	3a30      	subs	r2, #48	@ 0x30
 80041b2:	2a09      	cmp	r2, #9
 80041b4:	d903      	bls.n	80041be <_svfiprintf_r+0x1a6>
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d0c6      	beq.n	8004148 <_svfiprintf_r+0x130>
 80041ba:	9105      	str	r1, [sp, #20]
 80041bc:	e7c4      	b.n	8004148 <_svfiprintf_r+0x130>
 80041be:	4604      	mov	r4, r0
 80041c0:	2301      	movs	r3, #1
 80041c2:	fb0c 2101 	mla	r1, ip, r1, r2
 80041c6:	e7f0      	b.n	80041aa <_svfiprintf_r+0x192>
 80041c8:	ab03      	add	r3, sp, #12
 80041ca:	9300      	str	r3, [sp, #0]
 80041cc:	462a      	mov	r2, r5
 80041ce:	4638      	mov	r0, r7
 80041d0:	4b0e      	ldr	r3, [pc, #56]	@ (800420c <_svfiprintf_r+0x1f4>)
 80041d2:	a904      	add	r1, sp, #16
 80041d4:	f3af 8000 	nop.w
 80041d8:	1c42      	adds	r2, r0, #1
 80041da:	4606      	mov	r6, r0
 80041dc:	d1d6      	bne.n	800418c <_svfiprintf_r+0x174>
 80041de:	89ab      	ldrh	r3, [r5, #12]
 80041e0:	065b      	lsls	r3, r3, #25
 80041e2:	f53f af2d 	bmi.w	8004040 <_svfiprintf_r+0x28>
 80041e6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80041e8:	e72c      	b.n	8004044 <_svfiprintf_r+0x2c>
 80041ea:	ab03      	add	r3, sp, #12
 80041ec:	9300      	str	r3, [sp, #0]
 80041ee:	462a      	mov	r2, r5
 80041f0:	4638      	mov	r0, r7
 80041f2:	4b06      	ldr	r3, [pc, #24]	@ (800420c <_svfiprintf_r+0x1f4>)
 80041f4:	a904      	add	r1, sp, #16
 80041f6:	f000 f87d 	bl	80042f4 <_printf_i>
 80041fa:	e7ed      	b.n	80041d8 <_svfiprintf_r+0x1c0>
 80041fc:	08004676 	.word	0x08004676
 8004200:	0800467c 	.word	0x0800467c
 8004204:	08004680 	.word	0x08004680
 8004208:	00000000 	.word	0x00000000
 800420c:	08003f61 	.word	0x08003f61

08004210 <_printf_common>:
 8004210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004214:	4616      	mov	r6, r2
 8004216:	4698      	mov	r8, r3
 8004218:	688a      	ldr	r2, [r1, #8]
 800421a:	690b      	ldr	r3, [r1, #16]
 800421c:	4607      	mov	r7, r0
 800421e:	4293      	cmp	r3, r2
 8004220:	bfb8      	it	lt
 8004222:	4613      	movlt	r3, r2
 8004224:	6033      	str	r3, [r6, #0]
 8004226:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800422a:	460c      	mov	r4, r1
 800422c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004230:	b10a      	cbz	r2, 8004236 <_printf_common+0x26>
 8004232:	3301      	adds	r3, #1
 8004234:	6033      	str	r3, [r6, #0]
 8004236:	6823      	ldr	r3, [r4, #0]
 8004238:	0699      	lsls	r1, r3, #26
 800423a:	bf42      	ittt	mi
 800423c:	6833      	ldrmi	r3, [r6, #0]
 800423e:	3302      	addmi	r3, #2
 8004240:	6033      	strmi	r3, [r6, #0]
 8004242:	6825      	ldr	r5, [r4, #0]
 8004244:	f015 0506 	ands.w	r5, r5, #6
 8004248:	d106      	bne.n	8004258 <_printf_common+0x48>
 800424a:	f104 0a19 	add.w	sl, r4, #25
 800424e:	68e3      	ldr	r3, [r4, #12]
 8004250:	6832      	ldr	r2, [r6, #0]
 8004252:	1a9b      	subs	r3, r3, r2
 8004254:	42ab      	cmp	r3, r5
 8004256:	dc2b      	bgt.n	80042b0 <_printf_common+0xa0>
 8004258:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800425c:	6822      	ldr	r2, [r4, #0]
 800425e:	3b00      	subs	r3, #0
 8004260:	bf18      	it	ne
 8004262:	2301      	movne	r3, #1
 8004264:	0692      	lsls	r2, r2, #26
 8004266:	d430      	bmi.n	80042ca <_printf_common+0xba>
 8004268:	4641      	mov	r1, r8
 800426a:	4638      	mov	r0, r7
 800426c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004270:	47c8      	blx	r9
 8004272:	3001      	adds	r0, #1
 8004274:	d023      	beq.n	80042be <_printf_common+0xae>
 8004276:	6823      	ldr	r3, [r4, #0]
 8004278:	6922      	ldr	r2, [r4, #16]
 800427a:	f003 0306 	and.w	r3, r3, #6
 800427e:	2b04      	cmp	r3, #4
 8004280:	bf14      	ite	ne
 8004282:	2500      	movne	r5, #0
 8004284:	6833      	ldreq	r3, [r6, #0]
 8004286:	f04f 0600 	mov.w	r6, #0
 800428a:	bf08      	it	eq
 800428c:	68e5      	ldreq	r5, [r4, #12]
 800428e:	f104 041a 	add.w	r4, r4, #26
 8004292:	bf08      	it	eq
 8004294:	1aed      	subeq	r5, r5, r3
 8004296:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800429a:	bf08      	it	eq
 800429c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80042a0:	4293      	cmp	r3, r2
 80042a2:	bfc4      	itt	gt
 80042a4:	1a9b      	subgt	r3, r3, r2
 80042a6:	18ed      	addgt	r5, r5, r3
 80042a8:	42b5      	cmp	r5, r6
 80042aa:	d11a      	bne.n	80042e2 <_printf_common+0xd2>
 80042ac:	2000      	movs	r0, #0
 80042ae:	e008      	b.n	80042c2 <_printf_common+0xb2>
 80042b0:	2301      	movs	r3, #1
 80042b2:	4652      	mov	r2, sl
 80042b4:	4641      	mov	r1, r8
 80042b6:	4638      	mov	r0, r7
 80042b8:	47c8      	blx	r9
 80042ba:	3001      	adds	r0, #1
 80042bc:	d103      	bne.n	80042c6 <_printf_common+0xb6>
 80042be:	f04f 30ff 	mov.w	r0, #4294967295
 80042c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80042c6:	3501      	adds	r5, #1
 80042c8:	e7c1      	b.n	800424e <_printf_common+0x3e>
 80042ca:	2030      	movs	r0, #48	@ 0x30
 80042cc:	18e1      	adds	r1, r4, r3
 80042ce:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80042d2:	1c5a      	adds	r2, r3, #1
 80042d4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80042d8:	4422      	add	r2, r4
 80042da:	3302      	adds	r3, #2
 80042dc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80042e0:	e7c2      	b.n	8004268 <_printf_common+0x58>
 80042e2:	2301      	movs	r3, #1
 80042e4:	4622      	mov	r2, r4
 80042e6:	4641      	mov	r1, r8
 80042e8:	4638      	mov	r0, r7
 80042ea:	47c8      	blx	r9
 80042ec:	3001      	adds	r0, #1
 80042ee:	d0e6      	beq.n	80042be <_printf_common+0xae>
 80042f0:	3601      	adds	r6, #1
 80042f2:	e7d9      	b.n	80042a8 <_printf_common+0x98>

080042f4 <_printf_i>:
 80042f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80042f8:	7e0f      	ldrb	r7, [r1, #24]
 80042fa:	4691      	mov	r9, r2
 80042fc:	2f78      	cmp	r7, #120	@ 0x78
 80042fe:	4680      	mov	r8, r0
 8004300:	460c      	mov	r4, r1
 8004302:	469a      	mov	sl, r3
 8004304:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004306:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800430a:	d807      	bhi.n	800431c <_printf_i+0x28>
 800430c:	2f62      	cmp	r7, #98	@ 0x62
 800430e:	d80a      	bhi.n	8004326 <_printf_i+0x32>
 8004310:	2f00      	cmp	r7, #0
 8004312:	f000 80d3 	beq.w	80044bc <_printf_i+0x1c8>
 8004316:	2f58      	cmp	r7, #88	@ 0x58
 8004318:	f000 80ba 	beq.w	8004490 <_printf_i+0x19c>
 800431c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004320:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004324:	e03a      	b.n	800439c <_printf_i+0xa8>
 8004326:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800432a:	2b15      	cmp	r3, #21
 800432c:	d8f6      	bhi.n	800431c <_printf_i+0x28>
 800432e:	a101      	add	r1, pc, #4	@ (adr r1, 8004334 <_printf_i+0x40>)
 8004330:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004334:	0800438d 	.word	0x0800438d
 8004338:	080043a1 	.word	0x080043a1
 800433c:	0800431d 	.word	0x0800431d
 8004340:	0800431d 	.word	0x0800431d
 8004344:	0800431d 	.word	0x0800431d
 8004348:	0800431d 	.word	0x0800431d
 800434c:	080043a1 	.word	0x080043a1
 8004350:	0800431d 	.word	0x0800431d
 8004354:	0800431d 	.word	0x0800431d
 8004358:	0800431d 	.word	0x0800431d
 800435c:	0800431d 	.word	0x0800431d
 8004360:	080044a3 	.word	0x080044a3
 8004364:	080043cb 	.word	0x080043cb
 8004368:	0800445d 	.word	0x0800445d
 800436c:	0800431d 	.word	0x0800431d
 8004370:	0800431d 	.word	0x0800431d
 8004374:	080044c5 	.word	0x080044c5
 8004378:	0800431d 	.word	0x0800431d
 800437c:	080043cb 	.word	0x080043cb
 8004380:	0800431d 	.word	0x0800431d
 8004384:	0800431d 	.word	0x0800431d
 8004388:	08004465 	.word	0x08004465
 800438c:	6833      	ldr	r3, [r6, #0]
 800438e:	1d1a      	adds	r2, r3, #4
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	6032      	str	r2, [r6, #0]
 8004394:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004398:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800439c:	2301      	movs	r3, #1
 800439e:	e09e      	b.n	80044de <_printf_i+0x1ea>
 80043a0:	6833      	ldr	r3, [r6, #0]
 80043a2:	6820      	ldr	r0, [r4, #0]
 80043a4:	1d19      	adds	r1, r3, #4
 80043a6:	6031      	str	r1, [r6, #0]
 80043a8:	0606      	lsls	r6, r0, #24
 80043aa:	d501      	bpl.n	80043b0 <_printf_i+0xbc>
 80043ac:	681d      	ldr	r5, [r3, #0]
 80043ae:	e003      	b.n	80043b8 <_printf_i+0xc4>
 80043b0:	0645      	lsls	r5, r0, #25
 80043b2:	d5fb      	bpl.n	80043ac <_printf_i+0xb8>
 80043b4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80043b8:	2d00      	cmp	r5, #0
 80043ba:	da03      	bge.n	80043c4 <_printf_i+0xd0>
 80043bc:	232d      	movs	r3, #45	@ 0x2d
 80043be:	426d      	negs	r5, r5
 80043c0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80043c4:	230a      	movs	r3, #10
 80043c6:	4859      	ldr	r0, [pc, #356]	@ (800452c <_printf_i+0x238>)
 80043c8:	e011      	b.n	80043ee <_printf_i+0xfa>
 80043ca:	6821      	ldr	r1, [r4, #0]
 80043cc:	6833      	ldr	r3, [r6, #0]
 80043ce:	0608      	lsls	r0, r1, #24
 80043d0:	f853 5b04 	ldr.w	r5, [r3], #4
 80043d4:	d402      	bmi.n	80043dc <_printf_i+0xe8>
 80043d6:	0649      	lsls	r1, r1, #25
 80043d8:	bf48      	it	mi
 80043da:	b2ad      	uxthmi	r5, r5
 80043dc:	2f6f      	cmp	r7, #111	@ 0x6f
 80043de:	6033      	str	r3, [r6, #0]
 80043e0:	bf14      	ite	ne
 80043e2:	230a      	movne	r3, #10
 80043e4:	2308      	moveq	r3, #8
 80043e6:	4851      	ldr	r0, [pc, #324]	@ (800452c <_printf_i+0x238>)
 80043e8:	2100      	movs	r1, #0
 80043ea:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80043ee:	6866      	ldr	r6, [r4, #4]
 80043f0:	2e00      	cmp	r6, #0
 80043f2:	bfa8      	it	ge
 80043f4:	6821      	ldrge	r1, [r4, #0]
 80043f6:	60a6      	str	r6, [r4, #8]
 80043f8:	bfa4      	itt	ge
 80043fa:	f021 0104 	bicge.w	r1, r1, #4
 80043fe:	6021      	strge	r1, [r4, #0]
 8004400:	b90d      	cbnz	r5, 8004406 <_printf_i+0x112>
 8004402:	2e00      	cmp	r6, #0
 8004404:	d04b      	beq.n	800449e <_printf_i+0x1aa>
 8004406:	4616      	mov	r6, r2
 8004408:	fbb5 f1f3 	udiv	r1, r5, r3
 800440c:	fb03 5711 	mls	r7, r3, r1, r5
 8004410:	5dc7      	ldrb	r7, [r0, r7]
 8004412:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004416:	462f      	mov	r7, r5
 8004418:	42bb      	cmp	r3, r7
 800441a:	460d      	mov	r5, r1
 800441c:	d9f4      	bls.n	8004408 <_printf_i+0x114>
 800441e:	2b08      	cmp	r3, #8
 8004420:	d10b      	bne.n	800443a <_printf_i+0x146>
 8004422:	6823      	ldr	r3, [r4, #0]
 8004424:	07df      	lsls	r7, r3, #31
 8004426:	d508      	bpl.n	800443a <_printf_i+0x146>
 8004428:	6923      	ldr	r3, [r4, #16]
 800442a:	6861      	ldr	r1, [r4, #4]
 800442c:	4299      	cmp	r1, r3
 800442e:	bfde      	ittt	le
 8004430:	2330      	movle	r3, #48	@ 0x30
 8004432:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004436:	f106 36ff 	addle.w	r6, r6, #4294967295
 800443a:	1b92      	subs	r2, r2, r6
 800443c:	6122      	str	r2, [r4, #16]
 800443e:	464b      	mov	r3, r9
 8004440:	4621      	mov	r1, r4
 8004442:	4640      	mov	r0, r8
 8004444:	f8cd a000 	str.w	sl, [sp]
 8004448:	aa03      	add	r2, sp, #12
 800444a:	f7ff fee1 	bl	8004210 <_printf_common>
 800444e:	3001      	adds	r0, #1
 8004450:	d14a      	bne.n	80044e8 <_printf_i+0x1f4>
 8004452:	f04f 30ff 	mov.w	r0, #4294967295
 8004456:	b004      	add	sp, #16
 8004458:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800445c:	6823      	ldr	r3, [r4, #0]
 800445e:	f043 0320 	orr.w	r3, r3, #32
 8004462:	6023      	str	r3, [r4, #0]
 8004464:	2778      	movs	r7, #120	@ 0x78
 8004466:	4832      	ldr	r0, [pc, #200]	@ (8004530 <_printf_i+0x23c>)
 8004468:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800446c:	6823      	ldr	r3, [r4, #0]
 800446e:	6831      	ldr	r1, [r6, #0]
 8004470:	061f      	lsls	r7, r3, #24
 8004472:	f851 5b04 	ldr.w	r5, [r1], #4
 8004476:	d402      	bmi.n	800447e <_printf_i+0x18a>
 8004478:	065f      	lsls	r7, r3, #25
 800447a:	bf48      	it	mi
 800447c:	b2ad      	uxthmi	r5, r5
 800447e:	6031      	str	r1, [r6, #0]
 8004480:	07d9      	lsls	r1, r3, #31
 8004482:	bf44      	itt	mi
 8004484:	f043 0320 	orrmi.w	r3, r3, #32
 8004488:	6023      	strmi	r3, [r4, #0]
 800448a:	b11d      	cbz	r5, 8004494 <_printf_i+0x1a0>
 800448c:	2310      	movs	r3, #16
 800448e:	e7ab      	b.n	80043e8 <_printf_i+0xf4>
 8004490:	4826      	ldr	r0, [pc, #152]	@ (800452c <_printf_i+0x238>)
 8004492:	e7e9      	b.n	8004468 <_printf_i+0x174>
 8004494:	6823      	ldr	r3, [r4, #0]
 8004496:	f023 0320 	bic.w	r3, r3, #32
 800449a:	6023      	str	r3, [r4, #0]
 800449c:	e7f6      	b.n	800448c <_printf_i+0x198>
 800449e:	4616      	mov	r6, r2
 80044a0:	e7bd      	b.n	800441e <_printf_i+0x12a>
 80044a2:	6833      	ldr	r3, [r6, #0]
 80044a4:	6825      	ldr	r5, [r4, #0]
 80044a6:	1d18      	adds	r0, r3, #4
 80044a8:	6961      	ldr	r1, [r4, #20]
 80044aa:	6030      	str	r0, [r6, #0]
 80044ac:	062e      	lsls	r6, r5, #24
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	d501      	bpl.n	80044b6 <_printf_i+0x1c2>
 80044b2:	6019      	str	r1, [r3, #0]
 80044b4:	e002      	b.n	80044bc <_printf_i+0x1c8>
 80044b6:	0668      	lsls	r0, r5, #25
 80044b8:	d5fb      	bpl.n	80044b2 <_printf_i+0x1be>
 80044ba:	8019      	strh	r1, [r3, #0]
 80044bc:	2300      	movs	r3, #0
 80044be:	4616      	mov	r6, r2
 80044c0:	6123      	str	r3, [r4, #16]
 80044c2:	e7bc      	b.n	800443e <_printf_i+0x14a>
 80044c4:	6833      	ldr	r3, [r6, #0]
 80044c6:	2100      	movs	r1, #0
 80044c8:	1d1a      	adds	r2, r3, #4
 80044ca:	6032      	str	r2, [r6, #0]
 80044cc:	681e      	ldr	r6, [r3, #0]
 80044ce:	6862      	ldr	r2, [r4, #4]
 80044d0:	4630      	mov	r0, r6
 80044d2:	f000 f859 	bl	8004588 <memchr>
 80044d6:	b108      	cbz	r0, 80044dc <_printf_i+0x1e8>
 80044d8:	1b80      	subs	r0, r0, r6
 80044da:	6060      	str	r0, [r4, #4]
 80044dc:	6863      	ldr	r3, [r4, #4]
 80044de:	6123      	str	r3, [r4, #16]
 80044e0:	2300      	movs	r3, #0
 80044e2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80044e6:	e7aa      	b.n	800443e <_printf_i+0x14a>
 80044e8:	4632      	mov	r2, r6
 80044ea:	4649      	mov	r1, r9
 80044ec:	4640      	mov	r0, r8
 80044ee:	6923      	ldr	r3, [r4, #16]
 80044f0:	47d0      	blx	sl
 80044f2:	3001      	adds	r0, #1
 80044f4:	d0ad      	beq.n	8004452 <_printf_i+0x15e>
 80044f6:	6823      	ldr	r3, [r4, #0]
 80044f8:	079b      	lsls	r3, r3, #30
 80044fa:	d413      	bmi.n	8004524 <_printf_i+0x230>
 80044fc:	68e0      	ldr	r0, [r4, #12]
 80044fe:	9b03      	ldr	r3, [sp, #12]
 8004500:	4298      	cmp	r0, r3
 8004502:	bfb8      	it	lt
 8004504:	4618      	movlt	r0, r3
 8004506:	e7a6      	b.n	8004456 <_printf_i+0x162>
 8004508:	2301      	movs	r3, #1
 800450a:	4632      	mov	r2, r6
 800450c:	4649      	mov	r1, r9
 800450e:	4640      	mov	r0, r8
 8004510:	47d0      	blx	sl
 8004512:	3001      	adds	r0, #1
 8004514:	d09d      	beq.n	8004452 <_printf_i+0x15e>
 8004516:	3501      	adds	r5, #1
 8004518:	68e3      	ldr	r3, [r4, #12]
 800451a:	9903      	ldr	r1, [sp, #12]
 800451c:	1a5b      	subs	r3, r3, r1
 800451e:	42ab      	cmp	r3, r5
 8004520:	dcf2      	bgt.n	8004508 <_printf_i+0x214>
 8004522:	e7eb      	b.n	80044fc <_printf_i+0x208>
 8004524:	2500      	movs	r5, #0
 8004526:	f104 0619 	add.w	r6, r4, #25
 800452a:	e7f5      	b.n	8004518 <_printf_i+0x224>
 800452c:	08004687 	.word	0x08004687
 8004530:	08004698 	.word	0x08004698

08004534 <memmove>:
 8004534:	4288      	cmp	r0, r1
 8004536:	b510      	push	{r4, lr}
 8004538:	eb01 0402 	add.w	r4, r1, r2
 800453c:	d902      	bls.n	8004544 <memmove+0x10>
 800453e:	4284      	cmp	r4, r0
 8004540:	4623      	mov	r3, r4
 8004542:	d807      	bhi.n	8004554 <memmove+0x20>
 8004544:	1e43      	subs	r3, r0, #1
 8004546:	42a1      	cmp	r1, r4
 8004548:	d008      	beq.n	800455c <memmove+0x28>
 800454a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800454e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004552:	e7f8      	b.n	8004546 <memmove+0x12>
 8004554:	4601      	mov	r1, r0
 8004556:	4402      	add	r2, r0
 8004558:	428a      	cmp	r2, r1
 800455a:	d100      	bne.n	800455e <memmove+0x2a>
 800455c:	bd10      	pop	{r4, pc}
 800455e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004562:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004566:	e7f7      	b.n	8004558 <memmove+0x24>

08004568 <_sbrk_r>:
 8004568:	b538      	push	{r3, r4, r5, lr}
 800456a:	2300      	movs	r3, #0
 800456c:	4d05      	ldr	r5, [pc, #20]	@ (8004584 <_sbrk_r+0x1c>)
 800456e:	4604      	mov	r4, r0
 8004570:	4608      	mov	r0, r1
 8004572:	602b      	str	r3, [r5, #0]
 8004574:	f7fd fa58 	bl	8001a28 <_sbrk>
 8004578:	1c43      	adds	r3, r0, #1
 800457a:	d102      	bne.n	8004582 <_sbrk_r+0x1a>
 800457c:	682b      	ldr	r3, [r5, #0]
 800457e:	b103      	cbz	r3, 8004582 <_sbrk_r+0x1a>
 8004580:	6023      	str	r3, [r4, #0]
 8004582:	bd38      	pop	{r3, r4, r5, pc}
 8004584:	20000398 	.word	0x20000398

08004588 <memchr>:
 8004588:	4603      	mov	r3, r0
 800458a:	b510      	push	{r4, lr}
 800458c:	b2c9      	uxtb	r1, r1
 800458e:	4402      	add	r2, r0
 8004590:	4293      	cmp	r3, r2
 8004592:	4618      	mov	r0, r3
 8004594:	d101      	bne.n	800459a <memchr+0x12>
 8004596:	2000      	movs	r0, #0
 8004598:	e003      	b.n	80045a2 <memchr+0x1a>
 800459a:	7804      	ldrb	r4, [r0, #0]
 800459c:	3301      	adds	r3, #1
 800459e:	428c      	cmp	r4, r1
 80045a0:	d1f6      	bne.n	8004590 <memchr+0x8>
 80045a2:	bd10      	pop	{r4, pc}

080045a4 <memcpy>:
 80045a4:	440a      	add	r2, r1
 80045a6:	4291      	cmp	r1, r2
 80045a8:	f100 33ff 	add.w	r3, r0, #4294967295
 80045ac:	d100      	bne.n	80045b0 <memcpy+0xc>
 80045ae:	4770      	bx	lr
 80045b0:	b510      	push	{r4, lr}
 80045b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80045b6:	4291      	cmp	r1, r2
 80045b8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80045bc:	d1f9      	bne.n	80045b2 <memcpy+0xe>
 80045be:	bd10      	pop	{r4, pc}

080045c0 <_realloc_r>:
 80045c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80045c4:	4680      	mov	r8, r0
 80045c6:	4615      	mov	r5, r2
 80045c8:	460c      	mov	r4, r1
 80045ca:	b921      	cbnz	r1, 80045d6 <_realloc_r+0x16>
 80045cc:	4611      	mov	r1, r2
 80045ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80045d2:	f7ff bc39 	b.w	8003e48 <_malloc_r>
 80045d6:	b92a      	cbnz	r2, 80045e4 <_realloc_r+0x24>
 80045d8:	f7ff fbcc 	bl	8003d74 <_free_r>
 80045dc:	2400      	movs	r4, #0
 80045de:	4620      	mov	r0, r4
 80045e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80045e4:	f000 f81a 	bl	800461c <_malloc_usable_size_r>
 80045e8:	4285      	cmp	r5, r0
 80045ea:	4606      	mov	r6, r0
 80045ec:	d802      	bhi.n	80045f4 <_realloc_r+0x34>
 80045ee:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80045f2:	d8f4      	bhi.n	80045de <_realloc_r+0x1e>
 80045f4:	4629      	mov	r1, r5
 80045f6:	4640      	mov	r0, r8
 80045f8:	f7ff fc26 	bl	8003e48 <_malloc_r>
 80045fc:	4607      	mov	r7, r0
 80045fe:	2800      	cmp	r0, #0
 8004600:	d0ec      	beq.n	80045dc <_realloc_r+0x1c>
 8004602:	42b5      	cmp	r5, r6
 8004604:	462a      	mov	r2, r5
 8004606:	4621      	mov	r1, r4
 8004608:	bf28      	it	cs
 800460a:	4632      	movcs	r2, r6
 800460c:	f7ff ffca 	bl	80045a4 <memcpy>
 8004610:	4621      	mov	r1, r4
 8004612:	4640      	mov	r0, r8
 8004614:	f7ff fbae 	bl	8003d74 <_free_r>
 8004618:	463c      	mov	r4, r7
 800461a:	e7e0      	b.n	80045de <_realloc_r+0x1e>

0800461c <_malloc_usable_size_r>:
 800461c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004620:	1f18      	subs	r0, r3, #4
 8004622:	2b00      	cmp	r3, #0
 8004624:	bfbc      	itt	lt
 8004626:	580b      	ldrlt	r3, [r1, r0]
 8004628:	18c0      	addlt	r0, r0, r3
 800462a:	4770      	bx	lr

0800462c <_init>:
 800462c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800462e:	bf00      	nop
 8004630:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004632:	bc08      	pop	{r3}
 8004634:	469e      	mov	lr, r3
 8004636:	4770      	bx	lr

08004638 <_fini>:
 8004638:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800463a:	bf00      	nop
 800463c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800463e:	bc08      	pop	{r3}
 8004640:	469e      	mov	lr, r3
 8004642:	4770      	bx	lr
